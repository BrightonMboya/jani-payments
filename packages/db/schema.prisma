// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator zod {
  provider = "zod-prisma"
  output   = "src/zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = false // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

// thimk of this as workspaces under organization
model Project {
  id                String          @id @default(cuid())
  name              String
  slug              String          @unique
  logo              String?
  plan              String          @default("free")
  billingCycleStart Int // day of the month when the billing cycle starts
  inviteCode        String?         @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  usageLastChecked  DateTime        @default(now())
  users             ProjectUsers[]
  invites           ProjectInvite[]
  sentEmails        SentEmail[]
  products          Products[]
  prices            Prices[]
  discounts         Discounts[]
  customers         Customers[]
  Subscriptions     Subscriptions[]

  @@index(usageLastChecked(sort: Asc))
}

// this table is for members of org working on a certain project
model ProjectUsers {
  id        String   @id @default(cuid())
  role      Role     @default(member)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@index([projectId])
}

enum Role {
  owner
  member
}

model ProjectInvite {
  email     String
  expires   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@unique([email, projectId])
  @@index([projectId])
}

model SentEmail {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index([projectId])
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  source           String?
  defaultWorkspace String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  ProjectUsers     ProjectUsers[]
  sessions         Session[]
  api_keys         Api_keys[]

  @@index(source)
  @@index(defaultWorkspace)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Products {
  id          String         @unique @default(uuid())
  name        String
  description String
  status      product_status @default(active)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime
  custom_data Json?
  Project     Project        @relation(fields: [project_id], references: [id])
  project_id  String
  prices      Prices[]
}

enum product_status {
  active
  archived
}

model Api_keys {
  id          String   @unique @default(uuid())
  prefix      String?
  description String?
  createdAt   DateTime @default(now())
  key         String   @unique
  User        User     @relation(fields: [userId], references: [id])
  userId      String

  @@index([key, userId])
}

enum Entity_Status {
  active
  archived
}

enum PriceType {
  standard //considered part of the catalog and can be reused across transaction
  custom // just a one time price, ideally created for a specific transaction
}

enum BillingInterval {
  day
  week
  month
  year
}

// model QuantityConstraints {
//   id      String  @id @default(cuid())
//   minimum Int
//   maximum Int
//   Price   Prices? @relation(fields: [priceId], references: [id])
//   priceId String? @unique
// }

// Main Price model
model Prices {
  id                      String              @id
  type                    PriceType           @default(standard)
  description             String?
  name                    String
  billing_cycle_frequency Int
  billing_cycle_interval  BillingInterval
  trial_period_frequency  Int
  trial_period_interval   BillingInterval
  // tax_mode            TaxMode
  amount                  Decimal
  currency_code           String
  custom_data             Json? // Flexible custom data storage
  status                  Entity_Status
  // quantity                QuantityConstraints?
  created_at              DateTime
  updated_at              DateTime            @updatedAt
  Products                Products?           @relation(fields: [product_id], references: [id])
  product_id              String
  Project                 Project             @relation(fields: [projectId], references: [id])
  projectId               String
  Discount_Prices         Discount_Prices[]
  Subscription_Items      SubscriptionItems[]

  @@index([product_id, projectId])
}

enum Discount_type {
  flat
  percentage
  flat_per_seat
}

model Discounts {
  id                      String            @id
  status                  Entity_Status?    @default(active)
  description             String?
  enabled_for_checkout    Boolean?
  amount                  Decimal
  currency_code           String
  type                    Discount_type
  recur                   Boolean?
  max_recurring_intervals Decimal?
  usage_limit             Int?
  expires_at              DateTime?
  custom_data             Json?
  discount_prices         Discount_Prices[]
  times_used              Int?              @default(0)
  created_at              DateTime
  updated_at              DateTime
  Project                 Project?          @relation(fields: [projectId], references: [id])
  projectId               String?
  Subscriptions           Subscriptions[]
}

model Discount_Prices {
  discount    Discounts? @relation(fields: [discount_Id], references: [id])
  discount_Id String
  price_id    String
  price       Prices     @relation(fields: [price_id], references: [id])

  @@id([discount_Id, price_id])
}

model Customers {
  id            String          @id
  email         String          @unique
  name          String
  status        Entity_Status?  @default(active)
  description   String?
  custom_data   Json?
  created_at    DateTime
  updated_at    DateTime        @updatedAt
  Project       Project?        @relation(fields: [projectId], references: [id])
  projectId     String?
  Addresses     Addresses[]
  Subscriptions Subscriptions[]
}

model Addresses {
  id            String          @id
  description   String?
  first_line    String?
  custom_data   Json?
  city          String?
  status        Entity_Status?  @default(active)
  created_at    DateTime        @default(now())
  updated_at    DateTime
  Customers     Customers?      @relation(fields: [customer_id], references: [id])
  customer_id   String?
  Subscriptions Subscriptions[]
}

enum SubscriptionsStatus {
  active
  cancelled
  past_due
  paused
  trial
}

enum CollectionMode {
  automatic
  manual
}

enum SubscriptionItemsStatus {
  active
  inactive
  trialing
}

model SubscriptionItems {
  id              String        @id
  subscription    Subscriptions @relation(fields: [subscription_id], references: [id])
  subscription_id String
  price           Prices        @relation(fields: [price_id], references: [id])
  price_id        String

  quantity             Int
  status               SubscriptionItemsStatus
  recurring            Boolean
  created_at           DateTime                @default(now())
  updated_at           DateTime                @updatedAt
  // billing dates
  previously_billed_at DateTime?
  next_billed_at       DateTime?
  // trial dates
  trial_started_at     DateTime?
  trial_ended_at       DateTime?
  custom_data          Json?
}

enum ScheduledChangeAction {
  pause
  resume
  cancel
}

model Subscription_Scheduled_Changes {
  id              String                @id @default(cuid())
  subscription    Subscriptions         @relation(fields: [subscription_id], references: [id])
  subscription_id String
  action          ScheduledChangeAction
  effective_at    DateTime
  resumes_at      DateTime?

  @@index([subscription_id])
  @@index([effective_at])
}

model BillingDetails {
  id                     String          @id @default(cuid())
  subscription           Subscriptions   @relation(fields: [subscription_id], references: [id])
  subscription_id        String          @unique // one billing detail per subscription
  // the 2 below means how long has the customer have to pay for this invoice
  payment_interval       BillingInterval
  payment_frequency      Int
  enable_checkout        Boolean         @default(false)
  purchase_order_number  String?
  additional_information String?
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
}

model Subscriptions {
  id            String              @id
  status        SubscriptionsStatus
  currency_code String

  // Temporal Data
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  started_at      DateTime?
  first_billed_at DateTime?
  next_billed_at  DateTime?
  paused_at       DateTime?
  canceled_at     DateTime?

  // current_billing_period
  current_period_starts DateTime?
  current_period_ends   DateTime?

  // billing_cycle info
  billing_cycle_interval  BillingInterval
  billing_cycle_frequency Int

  // management_urls
  update_payment_method_url String?
  cancel_url                String?

  // relations
  customer    Customers @relation(fields: [customer_id], references: [id])
  customer_id String
  address     Addresses @relation(fields: [address_id], references: [id])
  address_id  String
  project     Project   @relation(fields: [project_id], references: [id])
  project_id  String

  // Active Discount
  discount    Discounts? @relation(fields: [discount_id], references: [id])
  discount_id String?

  collection_mode CollectionMode

  Subscription_Items             SubscriptionItems[]
  Subscription_Scheduled_Changes Subscription_Scheduled_Changes[]
  BillingDetails                 BillingDetails?

  @@index([customer_id])
  @@index([project_id])
  @@index([next_billed_at])
}
