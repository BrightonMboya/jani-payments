/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Any valid JSON value
 */
export type PostCustomersCustomerIdAddressesCustomData = {};

export const PostCustomersCustomerIdAddressesStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostCustomersCustomerIdAddressesStatus = ClosedEnum<
  typeof PostCustomersCustomerIdAddressesStatus
>;

export type PostCustomersCustomerIdAddressesRequestBody = {
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PostCustomersCustomerIdAddressesCustomData | undefined;
  city?: string | null | undefined;
  status?: PostCustomersCustomerIdAddressesStatus | null | undefined;
  customerId?: string | null | undefined;
};

export type PostCustomersCustomerIdAddressesRequest = {
  customerId: string;
  requestBody?: PostCustomersCustomerIdAddressesRequestBody | undefined;
};

/**
 * Any valid JSON value
 */
export type PostCustomersCustomerIdAddressesAddressesCustomData = {};

export const PostCustomersCustomerIdAddressesAddressesStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostCustomersCustomerIdAddressesAddressesStatus = ClosedEnum<
  typeof PostCustomersCustomerIdAddressesAddressesStatus
>;

/**
 * Creates a new Address
 */
export type PostCustomersCustomerIdAddressesResponseBody = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostCustomersCustomerIdAddressesAddressesCustomData;
  city?: string | null | undefined;
  status?: PostCustomersCustomerIdAddressesAddressesStatus | null | undefined;
  createdAt: string;
  updatedAt: string;
  customerId?: string | null | undefined;
};

/** @internal */
export const PostCustomersCustomerIdAddressesCustomData$inboundSchema:
  z.ZodType<PostCustomersCustomerIdAddressesCustomData, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type PostCustomersCustomerIdAddressesCustomData$Outbound = {};

/** @internal */
export const PostCustomersCustomerIdAddressesCustomData$outboundSchema:
  z.ZodType<
    PostCustomersCustomerIdAddressesCustomData$Outbound,
    z.ZodTypeDef,
    PostCustomersCustomerIdAddressesCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomerIdAddressesCustomData$ {
  /** @deprecated use `PostCustomersCustomerIdAddressesCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostCustomersCustomerIdAddressesCustomData$inboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostCustomersCustomerIdAddressesCustomData$outboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesCustomData$Outbound` instead. */
  export type Outbound = PostCustomersCustomerIdAddressesCustomData$Outbound;
}

export function postCustomersCustomerIdAddressesCustomDataToJSON(
  postCustomersCustomerIdAddressesCustomData:
    PostCustomersCustomerIdAddressesCustomData,
): string {
  return JSON.stringify(
    PostCustomersCustomerIdAddressesCustomData$outboundSchema.parse(
      postCustomersCustomerIdAddressesCustomData,
    ),
  );
}

export function postCustomersCustomerIdAddressesCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCustomersCustomerIdAddressesCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCustomersCustomerIdAddressesCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCustomersCustomerIdAddressesCustomData' from JSON`,
  );
}

/** @internal */
export const PostCustomersCustomerIdAddressesStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostCustomersCustomerIdAddressesStatus> = z.nativeEnum(
    PostCustomersCustomerIdAddressesStatus,
  );

/** @internal */
export const PostCustomersCustomerIdAddressesStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostCustomersCustomerIdAddressesStatus> =
    PostCustomersCustomerIdAddressesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomerIdAddressesStatus$ {
  /** @deprecated use `PostCustomersCustomerIdAddressesStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostCustomersCustomerIdAddressesStatus$inboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostCustomersCustomerIdAddressesStatus$outboundSchema;
}

/** @internal */
export const PostCustomersCustomerIdAddressesRequestBody$inboundSchema:
  z.ZodType<
    PostCustomersCustomerIdAddressesRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    description: z.nullable(z.string()).optional(),
    first_line: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      PostCustomersCustomerIdAddressesCustomData$inboundSchema
    ).optional(),
    city: z.nullable(z.string()).optional(),
    status: z.nullable(PostCustomersCustomerIdAddressesStatus$inboundSchema)
      .optional(),
    customer_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_line": "firstLine",
      "custom_data": "customData",
      "customer_id": "customerId",
    });
  });

/** @internal */
export type PostCustomersCustomerIdAddressesRequestBody$Outbound = {
  description?: string | null | undefined;
  first_line?: string | null | undefined;
  custom_data?: PostCustomersCustomerIdAddressesCustomData$Outbound | undefined;
  city?: string | null | undefined;
  status?: string | null | undefined;
  customer_id?: string | null | undefined;
};

/** @internal */
export const PostCustomersCustomerIdAddressesRequestBody$outboundSchema:
  z.ZodType<
    PostCustomersCustomerIdAddressesRequestBody$Outbound,
    z.ZodTypeDef,
    PostCustomersCustomerIdAddressesRequestBody
  > = z.object({
    description: z.nullable(z.string()).optional(),
    firstLine: z.nullable(z.string()).optional(),
    customData: z.lazy(() =>
      PostCustomersCustomerIdAddressesCustomData$outboundSchema
    ).optional(),
    city: z.nullable(z.string()).optional(),
    status: z.nullable(PostCustomersCustomerIdAddressesStatus$outboundSchema)
      .optional(),
    customerId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      firstLine: "first_line",
      customData: "custom_data",
      customerId: "customer_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomerIdAddressesRequestBody$ {
  /** @deprecated use `PostCustomersCustomerIdAddressesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostCustomersCustomerIdAddressesRequestBody$inboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostCustomersCustomerIdAddressesRequestBody$outboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesRequestBody$Outbound` instead. */
  export type Outbound = PostCustomersCustomerIdAddressesRequestBody$Outbound;
}

export function postCustomersCustomerIdAddressesRequestBodyToJSON(
  postCustomersCustomerIdAddressesRequestBody:
    PostCustomersCustomerIdAddressesRequestBody,
): string {
  return JSON.stringify(
    PostCustomersCustomerIdAddressesRequestBody$outboundSchema.parse(
      postCustomersCustomerIdAddressesRequestBody,
    ),
  );
}

export function postCustomersCustomerIdAddressesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCustomersCustomerIdAddressesRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCustomersCustomerIdAddressesRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCustomersCustomerIdAddressesRequestBody' from JSON`,
  );
}

/** @internal */
export const PostCustomersCustomerIdAddressesRequest$inboundSchema: z.ZodType<
  PostCustomersCustomerIdAddressesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
  RequestBody: z.lazy(() =>
    PostCustomersCustomerIdAddressesRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostCustomersCustomerIdAddressesRequest$Outbound = {
  customer_id: string;
  RequestBody?:
    | PostCustomersCustomerIdAddressesRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PostCustomersCustomerIdAddressesRequest$outboundSchema: z.ZodType<
  PostCustomersCustomerIdAddressesRequest$Outbound,
  z.ZodTypeDef,
  PostCustomersCustomerIdAddressesRequest
> = z.object({
  customerId: z.string(),
  requestBody: z.lazy(() =>
    PostCustomersCustomerIdAddressesRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomerIdAddressesRequest$ {
  /** @deprecated use `PostCustomersCustomerIdAddressesRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostCustomersCustomerIdAddressesRequest$inboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostCustomersCustomerIdAddressesRequest$outboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesRequest$Outbound` instead. */
  export type Outbound = PostCustomersCustomerIdAddressesRequest$Outbound;
}

export function postCustomersCustomerIdAddressesRequestToJSON(
  postCustomersCustomerIdAddressesRequest:
    PostCustomersCustomerIdAddressesRequest,
): string {
  return JSON.stringify(
    PostCustomersCustomerIdAddressesRequest$outboundSchema.parse(
      postCustomersCustomerIdAddressesRequest,
    ),
  );
}

export function postCustomersCustomerIdAddressesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCustomersCustomerIdAddressesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCustomersCustomerIdAddressesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCustomersCustomerIdAddressesRequest' from JSON`,
  );
}

/** @internal */
export const PostCustomersCustomerIdAddressesAddressesCustomData$inboundSchema:
  z.ZodType<
    PostCustomersCustomerIdAddressesAddressesCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostCustomersCustomerIdAddressesAddressesCustomData$Outbound = {};

/** @internal */
export const PostCustomersCustomerIdAddressesAddressesCustomData$outboundSchema:
  z.ZodType<
    PostCustomersCustomerIdAddressesAddressesCustomData$Outbound,
    z.ZodTypeDef,
    PostCustomersCustomerIdAddressesAddressesCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomerIdAddressesAddressesCustomData$ {
  /** @deprecated use `PostCustomersCustomerIdAddressesAddressesCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostCustomersCustomerIdAddressesAddressesCustomData$inboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesAddressesCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostCustomersCustomerIdAddressesAddressesCustomData$outboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesAddressesCustomData$Outbound` instead. */
  export type Outbound =
    PostCustomersCustomerIdAddressesAddressesCustomData$Outbound;
}

export function postCustomersCustomerIdAddressesAddressesCustomDataToJSON(
  postCustomersCustomerIdAddressesAddressesCustomData:
    PostCustomersCustomerIdAddressesAddressesCustomData,
): string {
  return JSON.stringify(
    PostCustomersCustomerIdAddressesAddressesCustomData$outboundSchema.parse(
      postCustomersCustomerIdAddressesAddressesCustomData,
    ),
  );
}

export function postCustomersCustomerIdAddressesAddressesCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCustomersCustomerIdAddressesAddressesCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCustomersCustomerIdAddressesAddressesCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCustomersCustomerIdAddressesAddressesCustomData' from JSON`,
  );
}

/** @internal */
export const PostCustomersCustomerIdAddressesAddressesStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostCustomersCustomerIdAddressesAddressesStatus> = z
    .nativeEnum(PostCustomersCustomerIdAddressesAddressesStatus);

/** @internal */
export const PostCustomersCustomerIdAddressesAddressesStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostCustomersCustomerIdAddressesAddressesStatus> =
    PostCustomersCustomerIdAddressesAddressesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomerIdAddressesAddressesStatus$ {
  /** @deprecated use `PostCustomersCustomerIdAddressesAddressesStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostCustomersCustomerIdAddressesAddressesStatus$inboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesAddressesStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostCustomersCustomerIdAddressesAddressesStatus$outboundSchema;
}

/** @internal */
export const PostCustomersCustomerIdAddressesResponseBody$inboundSchema:
  z.ZodType<
    PostCustomersCustomerIdAddressesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    description: z.nullable(z.string()).optional(),
    first_line: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      PostCustomersCustomerIdAddressesAddressesCustomData$inboundSchema
    ),
    city: z.nullable(z.string()).optional(),
    status: z.nullable(
      PostCustomersCustomerIdAddressesAddressesStatus$inboundSchema,
    ).optional(),
    created_at: z.string(),
    updated_at: z.string(),
    customer_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_line": "firstLine",
      "custom_data": "customData",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "customer_id": "customerId",
    });
  });

/** @internal */
export type PostCustomersCustomerIdAddressesResponseBody$Outbound = {
  id: string;
  description?: string | null | undefined;
  first_line?: string | null | undefined;
  custom_data: PostCustomersCustomerIdAddressesAddressesCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | null | undefined;
  created_at: string;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const PostCustomersCustomerIdAddressesResponseBody$outboundSchema:
  z.ZodType<
    PostCustomersCustomerIdAddressesResponseBody$Outbound,
    z.ZodTypeDef,
    PostCustomersCustomerIdAddressesResponseBody
  > = z.object({
    id: z.string(),
    description: z.nullable(z.string()).optional(),
    firstLine: z.nullable(z.string()).optional(),
    customData: z.lazy(() =>
      PostCustomersCustomerIdAddressesAddressesCustomData$outboundSchema
    ),
    city: z.nullable(z.string()).optional(),
    status: z.nullable(
      PostCustomersCustomerIdAddressesAddressesStatus$outboundSchema,
    ).optional(),
    createdAt: z.string(),
    updatedAt: z.string(),
    customerId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      firstLine: "first_line",
      customData: "custom_data",
      createdAt: "created_at",
      updatedAt: "updated_at",
      customerId: "customer_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomerIdAddressesResponseBody$ {
  /** @deprecated use `PostCustomersCustomerIdAddressesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostCustomersCustomerIdAddressesResponseBody$inboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostCustomersCustomerIdAddressesResponseBody$outboundSchema;
  /** @deprecated use `PostCustomersCustomerIdAddressesResponseBody$Outbound` instead. */
  export type Outbound = PostCustomersCustomerIdAddressesResponseBody$Outbound;
}

export function postCustomersCustomerIdAddressesResponseBodyToJSON(
  postCustomersCustomerIdAddressesResponseBody:
    PostCustomersCustomerIdAddressesResponseBody,
): string {
  return JSON.stringify(
    PostCustomersCustomerIdAddressesResponseBody$outboundSchema.parse(
      postCustomersCustomerIdAddressesResponseBody,
    ),
  );
}

export function postCustomersCustomerIdAddressesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCustomersCustomerIdAddressesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCustomersCustomerIdAddressesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCustomersCustomerIdAddressesResponseBody' from JSON`,
  );
}
