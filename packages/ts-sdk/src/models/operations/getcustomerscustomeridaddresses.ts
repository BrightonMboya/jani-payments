/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCustomersCustomerIdAddressesRequest = {
  customerId: string;
};

/**
 * Any valid JSON value
 */
export type GetCustomersCustomerIdAddressesCustomData = {};

export const GetCustomersCustomerIdAddressesStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetCustomersCustomerIdAddressesStatus = ClosedEnum<
  typeof GetCustomersCustomerIdAddressesStatus
>;

export type GetCustomersCustomerIdAddressesResponseBody = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetCustomersCustomerIdAddressesCustomData;
  city?: string | null | undefined;
  status?: GetCustomersCustomerIdAddressesStatus | null | undefined;
  createdAt: string;
  updatedAt: string;
  customerId?: string | null | undefined;
};

/** @internal */
export const GetCustomersCustomerIdAddressesRequest$inboundSchema: z.ZodType<
  GetCustomersCustomerIdAddressesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
  });
});

/** @internal */
export type GetCustomersCustomerIdAddressesRequest$Outbound = {
  customer_id: string;
};

/** @internal */
export const GetCustomersCustomerIdAddressesRequest$outboundSchema: z.ZodType<
  GetCustomersCustomerIdAddressesRequest$Outbound,
  z.ZodTypeDef,
  GetCustomersCustomerIdAddressesRequest
> = z.object({
  customerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomerIdAddressesRequest$ {
  /** @deprecated use `GetCustomersCustomerIdAddressesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomersCustomerIdAddressesRequest$inboundSchema;
  /** @deprecated use `GetCustomersCustomerIdAddressesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomersCustomerIdAddressesRequest$outboundSchema;
  /** @deprecated use `GetCustomersCustomerIdAddressesRequest$Outbound` instead. */
  export type Outbound = GetCustomersCustomerIdAddressesRequest$Outbound;
}

export function getCustomersCustomerIdAddressesRequestToJSON(
  getCustomersCustomerIdAddressesRequest:
    GetCustomersCustomerIdAddressesRequest,
): string {
  return JSON.stringify(
    GetCustomersCustomerIdAddressesRequest$outboundSchema.parse(
      getCustomersCustomerIdAddressesRequest,
    ),
  );
}

export function getCustomersCustomerIdAddressesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersCustomerIdAddressesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomersCustomerIdAddressesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersCustomerIdAddressesRequest' from JSON`,
  );
}

/** @internal */
export const GetCustomersCustomerIdAddressesCustomData$inboundSchema: z.ZodType<
  GetCustomersCustomerIdAddressesCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetCustomersCustomerIdAddressesCustomData$Outbound = {};

/** @internal */
export const GetCustomersCustomerIdAddressesCustomData$outboundSchema:
  z.ZodType<
    GetCustomersCustomerIdAddressesCustomData$Outbound,
    z.ZodTypeDef,
    GetCustomersCustomerIdAddressesCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomerIdAddressesCustomData$ {
  /** @deprecated use `GetCustomersCustomerIdAddressesCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomersCustomerIdAddressesCustomData$inboundSchema;
  /** @deprecated use `GetCustomersCustomerIdAddressesCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomersCustomerIdAddressesCustomData$outboundSchema;
  /** @deprecated use `GetCustomersCustomerIdAddressesCustomData$Outbound` instead. */
  export type Outbound = GetCustomersCustomerIdAddressesCustomData$Outbound;
}

export function getCustomersCustomerIdAddressesCustomDataToJSON(
  getCustomersCustomerIdAddressesCustomData:
    GetCustomersCustomerIdAddressesCustomData,
): string {
  return JSON.stringify(
    GetCustomersCustomerIdAddressesCustomData$outboundSchema.parse(
      getCustomersCustomerIdAddressesCustomData,
    ),
  );
}

export function getCustomersCustomerIdAddressesCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetCustomersCustomerIdAddressesCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomersCustomerIdAddressesCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCustomersCustomerIdAddressesCustomData' from JSON`,
  );
}

/** @internal */
export const GetCustomersCustomerIdAddressesStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetCustomersCustomerIdAddressesStatus> = z.nativeEnum(
    GetCustomersCustomerIdAddressesStatus,
  );

/** @internal */
export const GetCustomersCustomerIdAddressesStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetCustomersCustomerIdAddressesStatus> =
    GetCustomersCustomerIdAddressesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomerIdAddressesStatus$ {
  /** @deprecated use `GetCustomersCustomerIdAddressesStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomersCustomerIdAddressesStatus$inboundSchema;
  /** @deprecated use `GetCustomersCustomerIdAddressesStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomersCustomerIdAddressesStatus$outboundSchema;
}

/** @internal */
export const GetCustomersCustomerIdAddressesResponseBody$inboundSchema:
  z.ZodType<
    GetCustomersCustomerIdAddressesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    description: z.nullable(z.string()).optional(),
    first_line: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      GetCustomersCustomerIdAddressesCustomData$inboundSchema
    ),
    city: z.nullable(z.string()).optional(),
    status: z.nullable(GetCustomersCustomerIdAddressesStatus$inboundSchema)
      .optional(),
    created_at: z.string(),
    updated_at: z.string(),
    customer_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_line": "firstLine",
      "custom_data": "customData",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "customer_id": "customerId",
    });
  });

/** @internal */
export type GetCustomersCustomerIdAddressesResponseBody$Outbound = {
  id: string;
  description?: string | null | undefined;
  first_line?: string | null | undefined;
  custom_data: GetCustomersCustomerIdAddressesCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | null | undefined;
  created_at: string;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const GetCustomersCustomerIdAddressesResponseBody$outboundSchema:
  z.ZodType<
    GetCustomersCustomerIdAddressesResponseBody$Outbound,
    z.ZodTypeDef,
    GetCustomersCustomerIdAddressesResponseBody
  > = z.object({
    id: z.string(),
    description: z.nullable(z.string()).optional(),
    firstLine: z.nullable(z.string()).optional(),
    customData: z.lazy(() =>
      GetCustomersCustomerIdAddressesCustomData$outboundSchema
    ),
    city: z.nullable(z.string()).optional(),
    status: z.nullable(GetCustomersCustomerIdAddressesStatus$outboundSchema)
      .optional(),
    createdAt: z.string(),
    updatedAt: z.string(),
    customerId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      firstLine: "first_line",
      customData: "custom_data",
      createdAt: "created_at",
      updatedAt: "updated_at",
      customerId: "customer_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomerIdAddressesResponseBody$ {
  /** @deprecated use `GetCustomersCustomerIdAddressesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomersCustomerIdAddressesResponseBody$inboundSchema;
  /** @deprecated use `GetCustomersCustomerIdAddressesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomersCustomerIdAddressesResponseBody$outboundSchema;
  /** @deprecated use `GetCustomersCustomerIdAddressesResponseBody$Outbound` instead. */
  export type Outbound = GetCustomersCustomerIdAddressesResponseBody$Outbound;
}

export function getCustomersCustomerIdAddressesResponseBodyToJSON(
  getCustomersCustomerIdAddressesResponseBody:
    GetCustomersCustomerIdAddressesResponseBody,
): string {
  return JSON.stringify(
    GetCustomersCustomerIdAddressesResponseBody$outboundSchema.parse(
      getCustomersCustomerIdAddressesResponseBody,
    ),
  );
}

export function getCustomersCustomerIdAddressesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetCustomersCustomerIdAddressesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomersCustomerIdAddressesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCustomersCustomerIdAddressesResponseBody' from JSON`,
  );
}
