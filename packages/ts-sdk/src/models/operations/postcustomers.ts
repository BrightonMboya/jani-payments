/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostCustomersStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostCustomersStatus = ClosedEnum<typeof PostCustomersStatus>;

/**
 * Any valid JSON value
 */
export type PostCustomersCustomData = {};

export type PostCustomersRequestBody = {
  email: string;
  name: string;
  status?: PostCustomersStatus | null | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PostCustomersCustomData | undefined;
};

export const PostCustomersCustomersStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostCustomersCustomersStatus = ClosedEnum<
  typeof PostCustomersCustomersStatus
>;

/**
 * Any valid JSON value
 */
export type PostCustomersCustomersCustomData = {};

/**
 * Creates a new Customer
 */
export type PostCustomersResponseBody = {
  id: string;
  email: string;
  name: string;
  status?: PostCustomersCustomersStatus | null | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostCustomersCustomersCustomData;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const PostCustomersStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostCustomersStatus
> = z.nativeEnum(PostCustomersStatus);

/** @internal */
export const PostCustomersStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostCustomersStatus
> = PostCustomersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersStatus$ {
  /** @deprecated use `PostCustomersStatus$inboundSchema` instead. */
  export const inboundSchema = PostCustomersStatus$inboundSchema;
  /** @deprecated use `PostCustomersStatus$outboundSchema` instead. */
  export const outboundSchema = PostCustomersStatus$outboundSchema;
}

/** @internal */
export const PostCustomersCustomData$inboundSchema: z.ZodType<
  PostCustomersCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostCustomersCustomData$Outbound = {};

/** @internal */
export const PostCustomersCustomData$outboundSchema: z.ZodType<
  PostCustomersCustomData$Outbound,
  z.ZodTypeDef,
  PostCustomersCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomData$ {
  /** @deprecated use `PostCustomersCustomData$inboundSchema` instead. */
  export const inboundSchema = PostCustomersCustomData$inboundSchema;
  /** @deprecated use `PostCustomersCustomData$outboundSchema` instead. */
  export const outboundSchema = PostCustomersCustomData$outboundSchema;
  /** @deprecated use `PostCustomersCustomData$Outbound` instead. */
  export type Outbound = PostCustomersCustomData$Outbound;
}

export function postCustomersCustomDataToJSON(
  postCustomersCustomData: PostCustomersCustomData,
): string {
  return JSON.stringify(
    PostCustomersCustomData$outboundSchema.parse(postCustomersCustomData),
  );
}

export function postCustomersCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostCustomersCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostCustomersCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostCustomersCustomData' from JSON`,
  );
}

/** @internal */
export const PostCustomersRequestBody$inboundSchema: z.ZodType<
  PostCustomersRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  name: z.string(),
  status: z.nullable(PostCustomersStatus$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => PostCustomersCustomData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type PostCustomersRequestBody$Outbound = {
  email: string;
  name: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  custom_data?: PostCustomersCustomData$Outbound | undefined;
};

/** @internal */
export const PostCustomersRequestBody$outboundSchema: z.ZodType<
  PostCustomersRequestBody$Outbound,
  z.ZodTypeDef,
  PostCustomersRequestBody
> = z.object({
  email: z.string(),
  name: z.string(),
  status: z.nullable(PostCustomersStatus$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => PostCustomersCustomData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersRequestBody$ {
  /** @deprecated use `PostCustomersRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostCustomersRequestBody$inboundSchema;
  /** @deprecated use `PostCustomersRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostCustomersRequestBody$outboundSchema;
  /** @deprecated use `PostCustomersRequestBody$Outbound` instead. */
  export type Outbound = PostCustomersRequestBody$Outbound;
}

export function postCustomersRequestBodyToJSON(
  postCustomersRequestBody: PostCustomersRequestBody,
): string {
  return JSON.stringify(
    PostCustomersRequestBody$outboundSchema.parse(postCustomersRequestBody),
  );
}

export function postCustomersRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostCustomersRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostCustomersRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostCustomersRequestBody' from JSON`,
  );
}

/** @internal */
export const PostCustomersCustomersStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostCustomersCustomersStatus
> = z.nativeEnum(PostCustomersCustomersStatus);

/** @internal */
export const PostCustomersCustomersStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostCustomersCustomersStatus
> = PostCustomersCustomersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomersStatus$ {
  /** @deprecated use `PostCustomersCustomersStatus$inboundSchema` instead. */
  export const inboundSchema = PostCustomersCustomersStatus$inboundSchema;
  /** @deprecated use `PostCustomersCustomersStatus$outboundSchema` instead. */
  export const outboundSchema = PostCustomersCustomersStatus$outboundSchema;
}

/** @internal */
export const PostCustomersCustomersCustomData$inboundSchema: z.ZodType<
  PostCustomersCustomersCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostCustomersCustomersCustomData$Outbound = {};

/** @internal */
export const PostCustomersCustomersCustomData$outboundSchema: z.ZodType<
  PostCustomersCustomersCustomData$Outbound,
  z.ZodTypeDef,
  PostCustomersCustomersCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersCustomersCustomData$ {
  /** @deprecated use `PostCustomersCustomersCustomData$inboundSchema` instead. */
  export const inboundSchema = PostCustomersCustomersCustomData$inboundSchema;
  /** @deprecated use `PostCustomersCustomersCustomData$outboundSchema` instead. */
  export const outboundSchema = PostCustomersCustomersCustomData$outboundSchema;
  /** @deprecated use `PostCustomersCustomersCustomData$Outbound` instead. */
  export type Outbound = PostCustomersCustomersCustomData$Outbound;
}

export function postCustomersCustomersCustomDataToJSON(
  postCustomersCustomersCustomData: PostCustomersCustomersCustomData,
): string {
  return JSON.stringify(
    PostCustomersCustomersCustomData$outboundSchema.parse(
      postCustomersCustomersCustomData,
    ),
  );
}

export function postCustomersCustomersCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostCustomersCustomersCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostCustomersCustomersCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostCustomersCustomersCustomData' from JSON`,
  );
}

/** @internal */
export const PostCustomersResponseBody$inboundSchema: z.ZodType<
  PostCustomersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(PostCustomersCustomersStatus$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => PostCustomersCustomersCustomData$inboundSchema),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostCustomersResponseBody$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  custom_data: PostCustomersCustomersCustomData$Outbound;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PostCustomersResponseBody$outboundSchema: z.ZodType<
  PostCustomersResponseBody$Outbound,
  z.ZodTypeDef,
  PostCustomersResponseBody
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(PostCustomersCustomersStatus$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => PostCustomersCustomersCustomData$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCustomersResponseBody$ {
  /** @deprecated use `PostCustomersResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostCustomersResponseBody$inboundSchema;
  /** @deprecated use `PostCustomersResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostCustomersResponseBody$outboundSchema;
  /** @deprecated use `PostCustomersResponseBody$Outbound` instead. */
  export type Outbound = PostCustomersResponseBody$Outbound;
}

export function postCustomersResponseBodyToJSON(
  postCustomersResponseBody: PostCustomersResponseBody,
): string {
  return JSON.stringify(
    PostCustomersResponseBody$outboundSchema.parse(postCustomersResponseBody),
  );
}

export function postCustomersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostCustomersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostCustomersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostCustomersResponseBody' from JSON`,
  );
}
