/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTransactionTransactionIdRequest = {
  transactionId: string;
};

export const GetTransactionTransactionIdStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type GetTransactionTransactionIdStatus = ClosedEnum<
  typeof GetTransactionTransactionIdStatus
>;

export const GetTransactionTransactionIdCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type GetTransactionTransactionIdCollectionMode = ClosedEnum<
  typeof GetTransactionTransactionIdCollectionMode
>;

/**
 * Any valid JSON value
 */
export type GetTransactionTransactionIdCustomData = {};

export type GetTransactionTransactionIdCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type GetTransactionTransactionIdTotal = {
  subtotal: number;
  discount: number;
  grandTotal: number;
};

export type GetTransactionTransactionIdDetails = {
  total: GetTransactionTransactionIdTotal;
};

export const GetTransactionTransactionIdTransactionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type GetTransactionTransactionIdTransactionsType = ClosedEnum<
  typeof GetTransactionTransactionIdTransactionsType
>;

export const GetTransactionTransactionIdInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetTransactionTransactionIdInterval = ClosedEnum<
  typeof GetTransactionTransactionIdInterval
>;

export type GetTransactionTransactionIdBillingCycle = {
  interval: GetTransactionTransactionIdInterval;
  frequency: number;
};

export const GetTransactionTransactionIdTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetTransactionTransactionIdTransactionsInterval = ClosedEnum<
  typeof GetTransactionTransactionIdTransactionsInterval
>;

export type GetTransactionTransactionIdTrialPeriod = {
  interval: GetTransactionTransactionIdTransactionsInterval;
  frequency: number;
};

export type GetTransactionTransactionIdUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus
  >;

/**
 * Any valid JSON value
 */
export type GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData =
  {};

export type GetTransactionTransactionIdPrice = {
  productId: string;
  description?: string | null | undefined;
  type: GetTransactionTransactionIdTransactionsType;
  name: string;
  billingCycle: GetTransactionTransactionIdBillingCycle;
  trialPeriod: GetTransactionTransactionIdTrialPeriod;
  unitPrice: GetTransactionTransactionIdUnitPrice;
  status:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus;
  /**
   * Any valid JSON value
   */
  customData?:
    | GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  ClosedEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  >;

/**
 * Any valid JSON value
 */
export type GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData =
  {};

export type GetTransactionTransactionIdProduct = {
  id: string;
  name: string;
  description: string;
  status:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus;
  createdAt: string;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData;
};

export type GetTransactionTransactionIdItems = {
  price: GetTransactionTransactionIdPrice;
  quantity: number;
  product: GetTransactionTransactionIdProduct;
};

export const GetTransactionTransactionIdTransactionsStatus = {
  Pending: "PENDING",
  Processing: "PROCESSING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Refunded: "REFUNDED",
} as const;
export type GetTransactionTransactionIdTransactionsStatus = ClosedEnum<
  typeof GetTransactionTransactionIdTransactionsStatus
>;

export const GetTransactionTransactionIdPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
  Card: "CARD",
  BankTransfer: "BANK_TRANSFER",
} as const;
export type GetTransactionTransactionIdPaymentMethod = ClosedEnum<
  typeof GetTransactionTransactionIdPaymentMethod
>;

export const GetTransactionTransactionIdProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type GetTransactionTransactionIdProvider = ClosedEnum<
  typeof GetTransactionTransactionIdProvider
>;

/**
 * Any valid JSON value
 */
export type GetTransactionTransactionIdProviderMetadata = {};

export const GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod =
  {
    BankTransfer: "BANK_TRANSFER",
  } as const;
export type GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod =
  ClosedEnum<
    typeof GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod
  >;

export type GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails =
  {
    bankName: string;
    bankReference: string;
  };

export type GetTransactionTransactionIdMethodDetails3 = {
  paymentMethod:
    GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod;
  details: GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails;
};

export const GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod =
  {
    Card: "CARD",
  } as const;
export type GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod =
  ClosedEnum<
    typeof GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod
  >;

export type GetTransactionTransactionIdMethodDetailsTransactionsDetails = {
  last4: string;
  brand: string;
  expMonth: number;
  expYear: number;
  cardholderName: string | null;
};

export type GetTransactionTransactionIdMethodDetails2 = {
  paymentMethod:
    GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod;
  details: GetTransactionTransactionIdMethodDetailsTransactionsDetails;
};

export const GetTransactionTransactionIdMethodDetailsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type GetTransactionTransactionIdMethodDetailsPaymentMethod = ClosedEnum<
  typeof GetTransactionTransactionIdMethodDetailsPaymentMethod
>;

export type GetTransactionTransactionIdMethodDetailsDetails = {
  network: string;
  phoneSuffix: string;
};

export type GetTransactionTransactionIdMethodDetails1 = {
  paymentMethod: GetTransactionTransactionIdMethodDetailsPaymentMethod;
  details: GetTransactionTransactionIdMethodDetailsDetails;
};

export type GetTransactionTransactionIdMethodDetails =
  | GetTransactionTransactionIdMethodDetails1
  | GetTransactionTransactionIdMethodDetails2
  | GetTransactionTransactionIdMethodDetails3;

export type GetTransactionTransactionIdPayments = {
  id: string;
  status: GetTransactionTransactionIdTransactionsStatus;
  paymentMethod: GetTransactionTransactionIdPaymentMethod;
  provider: GetTransactionTransactionIdProvider;
  createdAt: string;
  updatedAt?: string | null | undefined;
  providerReference: string | null;
  /**
   * Any valid JSON value
   */
  providerMetadata: GetTransactionTransactionIdProviderMetadata;
  methodDetails:
    | GetTransactionTransactionIdMethodDetails1
    | GetTransactionTransactionIdMethodDetails2
    | GetTransactionTransactionIdMethodDetails3;
};

export const GetTransactionTransactionIdTransactionsResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetTransactionTransactionIdTransactionsResponseStatus = ClosedEnum<
  typeof GetTransactionTransactionIdTransactionsResponseStatus
>;

/**
 * Any valid JSON value
 */
export type GetTransactionTransactionIdTransactionsCustomData = {};

export type GetTransactionTransactionIdCustomer = {
  id: string;
  email: string;
  name: string;
  status?:
    | GetTransactionTransactionIdTransactionsResponseStatus
    | null
    | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetTransactionTransactionIdTransactionsCustomData;
  createdAt: string;
  updatedAt: string;
};

/**
 * Any valid JSON value
 */
export type GetTransactionTransactionIdTransactionsResponseCustomData = {};

export const GetTransactionTransactionIdTransactionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetTransactionTransactionIdTransactionsResponse200Status =
  ClosedEnum<typeof GetTransactionTransactionIdTransactionsResponse200Status>;

export type GetTransactionTransactionIdAddress = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetTransactionTransactionIdTransactionsResponseCustomData;
  city?: string | null | undefined;
  status?:
    | GetTransactionTransactionIdTransactionsResponse200Status
    | null
    | undefined;
  createdAt: string;
  updatedAt: string;
  customerId?: string | null | undefined;
};

export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus
  >;

export const GetTransactionTransactionIdType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type GetTransactionTransactionIdType = ClosedEnum<
  typeof GetTransactionTransactionIdType
>;

/**
 * Any valid JSON value
 */
export type GetTransactionTransactionIdTransactionsResponse200CustomData = {};

export type GetTransactionTransactionIdDiscount = {
  id: string;
  status?:
    | GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: GetTransactionTransactionIdType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetTransactionTransactionIdTransactionsResponse200CustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/**
 * Returns a transaction given its id
 */
export type GetTransactionTransactionIdResponseBody = {
  status: GetTransactionTransactionIdStatus;
  customerId: string;
  addressId: string;
  currencyCode: string;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?: GetTransactionTransactionIdCollectionMode | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: GetTransactionTransactionIdCustomData | undefined;
  currentBillingPeriod?:
    | GetTransactionTransactionIdCurrentBillingPeriod
    | undefined;
  details: GetTransactionTransactionIdDetails;
  items: Array<GetTransactionTransactionIdItems>;
  payments: GetTransactionTransactionIdPayments;
  createdAt: string;
  updatedAt?: string | null | undefined;
  customer: GetTransactionTransactionIdCustomer;
  address: GetTransactionTransactionIdAddress;
  discount?: GetTransactionTransactionIdDiscount | null | undefined;
  invoiceId: string;
};

/** @internal */
export const GetTransactionTransactionIdRequest$inboundSchema: z.ZodType<
  GetTransactionTransactionIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
  });
});

/** @internal */
export type GetTransactionTransactionIdRequest$Outbound = {
  transaction_id: string;
};

/** @internal */
export const GetTransactionTransactionIdRequest$outboundSchema: z.ZodType<
  GetTransactionTransactionIdRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdRequest
> = z.object({
  transactionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdRequest$ {
  /** @deprecated use `GetTransactionTransactionIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdRequest$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdRequest$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdRequest$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdRequest$Outbound;
}

export function getTransactionTransactionIdRequestToJSON(
  getTransactionTransactionIdRequest: GetTransactionTransactionIdRequest,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdRequest$outboundSchema.parse(
      getTransactionTransactionIdRequest,
    ),
  );
}

export function getTransactionTransactionIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdRequest' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionTransactionIdStatus
> = z.nativeEnum(GetTransactionTransactionIdStatus);

/** @internal */
export const GetTransactionTransactionIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionTransactionIdStatus
> = GetTransactionTransactionIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdStatus$ {
  /** @deprecated use `GetTransactionTransactionIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdStatus$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdStatus$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdCollectionMode$inboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdCollectionMode> = z
    .nativeEnum(GetTransactionTransactionIdCollectionMode);

/** @internal */
export const GetTransactionTransactionIdCollectionMode$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdCollectionMode> =
    GetTransactionTransactionIdCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdCollectionMode$ {
  /** @deprecated use `GetTransactionTransactionIdCollectionMode$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdCollectionMode$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdCollectionMode$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdCollectionMode$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdCustomData$inboundSchema: z.ZodType<
  GetTransactionTransactionIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetTransactionTransactionIdCustomData$Outbound = {};

/** @internal */
export const GetTransactionTransactionIdCustomData$outboundSchema: z.ZodType<
  GetTransactionTransactionIdCustomData$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdCustomData$ {
  /** @deprecated use `GetTransactionTransactionIdCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdCustomData$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdCustomData$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdCustomData$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdCustomData$Outbound;
}

export function getTransactionTransactionIdCustomDataToJSON(
  getTransactionTransactionIdCustomData: GetTransactionTransactionIdCustomData,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdCustomData$outboundSchema.parse(
      getTransactionTransactionIdCustomData,
    ),
  );
}

export function getTransactionTransactionIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type GetTransactionTransactionIdCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const GetTransactionTransactionIdCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdCurrentBillingPeriod
  > = z.object({
    startsAt: z.date().transform(v => v.toISOString()),
    endsAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdCurrentBillingPeriod$ {
  /** @deprecated use `GetTransactionTransactionIdCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdCurrentBillingPeriod$Outbound;
}

export function getTransactionTransactionIdCurrentBillingPeriodToJSON(
  getTransactionTransactionIdCurrentBillingPeriod:
    GetTransactionTransactionIdCurrentBillingPeriod,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdCurrentBillingPeriod$outboundSchema.parse(
      getTransactionTransactionIdCurrentBillingPeriod,
    ),
  );
}

export function getTransactionTransactionIdCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTotal$inboundSchema: z.ZodType<
  GetTransactionTransactionIdTotal,
  z.ZodTypeDef,
  unknown
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grand_total: z.number(),
}).transform((v) => {
  return remap$(v, {
    "grand_total": "grandTotal",
  });
});

/** @internal */
export type GetTransactionTransactionIdTotal$Outbound = {
  subtotal: number;
  discount: number;
  grand_total: number;
};

/** @internal */
export const GetTransactionTransactionIdTotal$outboundSchema: z.ZodType<
  GetTransactionTransactionIdTotal$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdTotal
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grandTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    grandTotal: "grand_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTotal$ {
  /** @deprecated use `GetTransactionTransactionIdTotal$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdTotal$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTotal$outboundSchema` instead. */
  export const outboundSchema = GetTransactionTransactionIdTotal$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTotal$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdTotal$Outbound;
}

export function getTransactionTransactionIdTotalToJSON(
  getTransactionTransactionIdTotal: GetTransactionTransactionIdTotal,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdTotal$outboundSchema.parse(
      getTransactionTransactionIdTotal,
    ),
  );
}

export function getTransactionTransactionIdTotalFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdTotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionTransactionIdTotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdTotal' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdDetails$inboundSchema: z.ZodType<
  GetTransactionTransactionIdDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.lazy(() => GetTransactionTransactionIdTotal$inboundSchema),
});

/** @internal */
export type GetTransactionTransactionIdDetails$Outbound = {
  total: GetTransactionTransactionIdTotal$Outbound;
};

/** @internal */
export const GetTransactionTransactionIdDetails$outboundSchema: z.ZodType<
  GetTransactionTransactionIdDetails$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdDetails
> = z.object({
  total: z.lazy(() => GetTransactionTransactionIdTotal$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdDetails$ {
  /** @deprecated use `GetTransactionTransactionIdDetails$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdDetails$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdDetails$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdDetails$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdDetails$Outbound;
}

export function getTransactionTransactionIdDetailsToJSON(
  getTransactionTransactionIdDetails: GetTransactionTransactionIdDetails,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdDetails$outboundSchema.parse(
      getTransactionTransactionIdDetails,
    ),
  );
}

export function getTransactionTransactionIdDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsType$inboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdTransactionsType> = z
    .nativeEnum(GetTransactionTransactionIdTransactionsType);

/** @internal */
export const GetTransactionTransactionIdTransactionsType$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdTransactionsType> =
    GetTransactionTransactionIdTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsType$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsType$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsType$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsType$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsType$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionTransactionIdInterval
> = z.nativeEnum(GetTransactionTransactionIdInterval);

/** @internal */
export const GetTransactionTransactionIdInterval$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdInterval> =
    GetTransactionTransactionIdInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdInterval$ {
  /** @deprecated use `GetTransactionTransactionIdInterval$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdInterval$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdInterval$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdInterval$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdBillingCycle$inboundSchema: z.ZodType<
  GetTransactionTransactionIdBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetTransactionTransactionIdInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetTransactionTransactionIdBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetTransactionTransactionIdBillingCycle$outboundSchema: z.ZodType<
  GetTransactionTransactionIdBillingCycle$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdBillingCycle
> = z.object({
  interval: GetTransactionTransactionIdInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdBillingCycle$ {
  /** @deprecated use `GetTransactionTransactionIdBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdBillingCycle$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdBillingCycle$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdBillingCycle$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdBillingCycle$Outbound;
}

export function getTransactionTransactionIdBillingCycleToJSON(
  getTransactionTransactionIdBillingCycle:
    GetTransactionTransactionIdBillingCycle,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdBillingCycle$outboundSchema.parse(
      getTransactionTransactionIdBillingCycle,
    ),
  );
}

export function getTransactionTransactionIdBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdBillingCycle' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsInterval$inboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdTransactionsInterval> = z
    .nativeEnum(GetTransactionTransactionIdTransactionsInterval);

/** @internal */
export const GetTransactionTransactionIdTransactionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdTransactionsInterval> =
    GetTransactionTransactionIdTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsInterval$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsInterval$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsInterval$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdTrialPeriod$inboundSchema: z.ZodType<
  GetTransactionTransactionIdTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetTransactionTransactionIdTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetTransactionTransactionIdTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetTransactionTransactionIdTrialPeriod$outboundSchema: z.ZodType<
  GetTransactionTransactionIdTrialPeriod$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdTrialPeriod
> = z.object({
  interval: GetTransactionTransactionIdTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTrialPeriod$ {
  /** @deprecated use `GetTransactionTransactionIdTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTrialPeriod$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTrialPeriod$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTrialPeriod$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdTrialPeriod$Outbound;
}

export function getTransactionTransactionIdTrialPeriodToJSON(
  getTransactionTransactionIdTrialPeriod:
    GetTransactionTransactionIdTrialPeriod,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdTrialPeriod$outboundSchema.parse(
      getTransactionTransactionIdTrialPeriod,
    ),
  );
}

export function getTransactionTransactionIdTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdTrialPeriod' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdUnitPrice$inboundSchema: z.ZodType<
  GetTransactionTransactionIdUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type GetTransactionTransactionIdUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const GetTransactionTransactionIdUnitPrice$outboundSchema: z.ZodType<
  GetTransactionTransactionIdUnitPrice$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdUnitPrice$ {
  /** @deprecated use `GetTransactionTransactionIdUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdUnitPrice$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdUnitPrice$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdUnitPrice$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdUnitPrice$Outbound;
}

export function getTransactionTransactionIdUnitPriceToJSON(
  getTransactionTransactionIdUnitPrice: GetTransactionTransactionIdUnitPrice,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdUnitPrice$outboundSchema.parse(
      getTransactionTransactionIdUnitPrice,
    ),
  );
}

export function getTransactionTransactionIdUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus
  > =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound =
  {};

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound;
}

export function getTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomDataToJSON(
  getTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema
      .parse(
        getTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData,
      ),
  );
}

export function getTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdPrice$inboundSchema: z.ZodType<
  GetTransactionTransactionIdPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetTransactionTransactionIdTransactionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    GetTransactionTransactionIdBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    GetTransactionTransactionIdTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() => GetTransactionTransactionIdUnitPrice$inboundSchema),
  status:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema,
  custom_data: z.lazy(() =>
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetTransactionTransactionIdPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: GetTransactionTransactionIdBillingCycle$Outbound;
  trial_period: GetTransactionTransactionIdTrialPeriod$Outbound;
  unit_price: GetTransactionTransactionIdUnitPrice$Outbound;
  status: string;
  custom_data?:
    | GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetTransactionTransactionIdPrice$outboundSchema: z.ZodType<
  GetTransactionTransactionIdPrice$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetTransactionTransactionIdTransactionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    GetTransactionTransactionIdBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    GetTransactionTransactionIdTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() => GetTransactionTransactionIdUnitPrice$outboundSchema),
  status:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema,
  customData: z.lazy(() =>
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdPrice$ {
  /** @deprecated use `GetTransactionTransactionIdPrice$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdPrice$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdPrice$outboundSchema` instead. */
  export const outboundSchema = GetTransactionTransactionIdPrice$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdPrice$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdPrice$Outbound;
}

export function getTransactionTransactionIdPriceToJSON(
  getTransactionTransactionIdPrice: GetTransactionTransactionIdPrice,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdPrice$outboundSchema.parse(
      getTransactionTransactionIdPrice,
    ),
  );
}

export function getTransactionTransactionIdPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionTransactionIdPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdPrice' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > = z.nativeEnum(
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus,
  );

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound =
  {};

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound;
}

export function getTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomDataToJSON(
  getTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema
      .parse(
        getTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData,
      ),
  );
}

export function getTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdProduct$inboundSchema: z.ZodType<
  GetTransactionTransactionIdProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  custom_data: z.lazy(() =>
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type GetTransactionTransactionIdProduct$Outbound = {
  id: string;
  name: string;
  description: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  custom_data:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound;
};

/** @internal */
export const GetTransactionTransactionIdProduct$outboundSchema: z.ZodType<
  GetTransactionTransactionIdProduct$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdProduct
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  customData: z.lazy(() =>
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdProduct$ {
  /** @deprecated use `GetTransactionTransactionIdProduct$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdProduct$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdProduct$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdProduct$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdProduct$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdProduct$Outbound;
}

export function getTransactionTransactionIdProductToJSON(
  getTransactionTransactionIdProduct: GetTransactionTransactionIdProduct,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdProduct$outboundSchema.parse(
      getTransactionTransactionIdProduct,
    ),
  );
}

export function getTransactionTransactionIdProductFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdProduct' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdItems$inboundSchema: z.ZodType<
  GetTransactionTransactionIdItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.lazy(() => GetTransactionTransactionIdPrice$inboundSchema),
  quantity: z.number(),
  product: z.lazy(() => GetTransactionTransactionIdProduct$inboundSchema),
});

/** @internal */
export type GetTransactionTransactionIdItems$Outbound = {
  price: GetTransactionTransactionIdPrice$Outbound;
  quantity: number;
  product: GetTransactionTransactionIdProduct$Outbound;
};

/** @internal */
export const GetTransactionTransactionIdItems$outboundSchema: z.ZodType<
  GetTransactionTransactionIdItems$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdItems
> = z.object({
  price: z.lazy(() => GetTransactionTransactionIdPrice$outboundSchema),
  quantity: z.number(),
  product: z.lazy(() => GetTransactionTransactionIdProduct$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdItems$ {
  /** @deprecated use `GetTransactionTransactionIdItems$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdItems$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdItems$outboundSchema` instead. */
  export const outboundSchema = GetTransactionTransactionIdItems$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdItems$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdItems$Outbound;
}

export function getTransactionTransactionIdItemsToJSON(
  getTransactionTransactionIdItems: GetTransactionTransactionIdItems,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdItems$outboundSchema.parse(
      getTransactionTransactionIdItems,
    ),
  );
}

export function getTransactionTransactionIdItemsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionTransactionIdItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdItems' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdTransactionsStatus> = z
    .nativeEnum(GetTransactionTransactionIdTransactionsStatus);

/** @internal */
export const GetTransactionTransactionIdTransactionsStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdTransactionsStatus> =
    GetTransactionTransactionIdTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsStatus$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsStatus$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsStatus$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdPaymentMethod> = z
    .nativeEnum(GetTransactionTransactionIdPaymentMethod);

/** @internal */
export const GetTransactionTransactionIdPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdPaymentMethod> =
    GetTransactionTransactionIdPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdPaymentMethod$ {
  /** @deprecated use `GetTransactionTransactionIdPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdPaymentMethod$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdPaymentMethod$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionTransactionIdProvider
> = z.nativeEnum(GetTransactionTransactionIdProvider);

/** @internal */
export const GetTransactionTransactionIdProvider$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionTransactionIdProvider> =
    GetTransactionTransactionIdProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdProvider$ {
  /** @deprecated use `GetTransactionTransactionIdProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdProvider$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdProvider$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdProviderMetadata$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdProviderMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionTransactionIdProviderMetadata$Outbound = {};

/** @internal */
export const GetTransactionTransactionIdProviderMetadata$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdProviderMetadata$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdProviderMetadata
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdProviderMetadata$ {
  /** @deprecated use `GetTransactionTransactionIdProviderMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdProviderMetadata$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdProviderMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdProviderMetadata$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdProviderMetadata$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdProviderMetadata$Outbound;
}

export function getTransactionTransactionIdProviderMetadataToJSON(
  getTransactionTransactionIdProviderMetadata:
    GetTransactionTransactionIdProviderMetadata,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdProviderMetadata$outboundSchema.parse(
      getTransactionTransactionIdProviderMetadata,
    ),
  );
}

export function getTransactionTransactionIdProviderMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdProviderMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdProviderMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdProviderMetadata' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod
  > = z.nativeEnum(
    GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod,
  );

/** @internal */
export const GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod
  > =
    GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bank_name: z.string(),
    bank_reference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "bank_name": "bankName",
      "bank_reference": "bankReference",
    });
  });

/** @internal */
export type GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound =
  {
    bank_name: string;
    bank_reference: string;
  };

/** @internal */
export const GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails
  > = z.object({
    bankName: z.string(),
    bankReference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bankName: "bank_name",
      bankReference: "bank_reference",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound;
}

export function getTransactionTransactionIdMethodDetailsTransactionsResponseDetailsToJSON(
  getTransactionTransactionIdMethodDetailsTransactionsResponseDetails:
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema
      .parse(
        getTransactionTransactionIdMethodDetailsTransactionsResponseDetails,
      ),
  );
}

export function getTransactionTransactionIdMethodDetailsTransactionsResponseDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdMethodDetails3$inboundSchema: z.ZodType<
  GetTransactionTransactionIdMethodDetails3,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema,
  details: z.lazy(() =>
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type GetTransactionTransactionIdMethodDetails3$Outbound = {
  payment_method: string;
  details:
    GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound;
};

/** @internal */
export const GetTransactionTransactionIdMethodDetails3$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetails3$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdMethodDetails3
  > = z.object({
    paymentMethod:
      GetTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$outboundSchema,
    details: z.lazy(() =>
      GetTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetails3$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetails3$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetails3$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetails3$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetails3$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetails3$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdMethodDetails3$Outbound;
}

export function getTransactionTransactionIdMethodDetails3ToJSON(
  getTransactionTransactionIdMethodDetails3:
    GetTransactionTransactionIdMethodDetails3,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdMethodDetails3$outboundSchema.parse(
      getTransactionTransactionIdMethodDetails3,
    ),
  );
}

export function getTransactionTransactionIdMethodDetails3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdMethodDetails3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdMethodDetails3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdMethodDetails3' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod
  > = z.nativeEnum(
    GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod,
  );

/** @internal */
export const GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod
  > =
    GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetailsTransactionsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    exp_month: z.number(),
    exp_year: z.number(),
    cardholder_name: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "exp_month": "expMonth",
      "exp_year": "expYear",
      "cardholder_name": "cardholderName",
    });
  });

/** @internal */
export type GetTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound =
  {
    last4: string;
    brand: string;
    exp_month: number;
    exp_year: number;
    cardholder_name: string | null;
  };

/** @internal */
export const GetTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdMethodDetailsTransactionsDetails
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    expMonth: z.number(),
    expYear: z.number(),
    cardholderName: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      expMonth: "exp_month",
      expYear: "exp_year",
      cardholderName: "cardholder_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetailsTransactionsDetails$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound;
}

export function getTransactionTransactionIdMethodDetailsTransactionsDetailsToJSON(
  getTransactionTransactionIdMethodDetailsTransactionsDetails:
    GetTransactionTransactionIdMethodDetailsTransactionsDetails,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema
      .parse(getTransactionTransactionIdMethodDetailsTransactionsDetails),
  );
}

export function getTransactionTransactionIdMethodDetailsTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdMethodDetailsTransactionsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdMethodDetailsTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdMethodDetails2$inboundSchema: z.ZodType<
  GetTransactionTransactionIdMethodDetails2,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema,
  details: z.lazy(() =>
    GetTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type GetTransactionTransactionIdMethodDetails2$Outbound = {
  payment_method: string;
  details: GetTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound;
};

/** @internal */
export const GetTransactionTransactionIdMethodDetails2$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetails2$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdMethodDetails2
  > = z.object({
    paymentMethod:
      GetTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$outboundSchema,
    details: z.lazy(() =>
      GetTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetails2$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetails2$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetails2$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetails2$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetails2$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetails2$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdMethodDetails2$Outbound;
}

export function getTransactionTransactionIdMethodDetails2ToJSON(
  getTransactionTransactionIdMethodDetails2:
    GetTransactionTransactionIdMethodDetails2,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdMethodDetails2$outboundSchema.parse(
      getTransactionTransactionIdMethodDetails2,
    ),
  );
}

export function getTransactionTransactionIdMethodDetails2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdMethodDetails2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdMethodDetails2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdMethodDetails2' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdMethodDetailsPaymentMethod
  > = z.nativeEnum(GetTransactionTransactionIdMethodDetailsPaymentMethod);

/** @internal */
export const GetTransactionTransactionIdMethodDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdMethodDetailsPaymentMethod
  > = GetTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetailsPaymentMethod$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdMethodDetailsDetails$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetailsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    network: z.string(),
    phone_suffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "phone_suffix": "phoneSuffix",
    });
  });

/** @internal */
export type GetTransactionTransactionIdMethodDetailsDetails$Outbound = {
  network: string;
  phone_suffix: string;
};

/** @internal */
export const GetTransactionTransactionIdMethodDetailsDetails$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetailsDetails$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdMethodDetailsDetails
  > = z.object({
    network: z.string(),
    phoneSuffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      phoneSuffix: "phone_suffix",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetailsDetails$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetailsDetails$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetailsDetails$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetailsDetails$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdMethodDetailsDetails$Outbound;
}

export function getTransactionTransactionIdMethodDetailsDetailsToJSON(
  getTransactionTransactionIdMethodDetailsDetails:
    GetTransactionTransactionIdMethodDetailsDetails,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdMethodDetailsDetails$outboundSchema.parse(
      getTransactionTransactionIdMethodDetailsDetails,
    ),
  );
}

export function getTransactionTransactionIdMethodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdMethodDetailsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdMethodDetailsDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdMethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdMethodDetails1$inboundSchema: z.ZodType<
  GetTransactionTransactionIdMethodDetails1,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    GetTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() =>
    GetTransactionTransactionIdMethodDetailsDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type GetTransactionTransactionIdMethodDetails1$Outbound = {
  payment_method: string;
  details: GetTransactionTransactionIdMethodDetailsDetails$Outbound;
};

/** @internal */
export const GetTransactionTransactionIdMethodDetails1$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdMethodDetails1$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdMethodDetails1
  > = z.object({
    paymentMethod:
      GetTransactionTransactionIdMethodDetailsPaymentMethod$outboundSchema,
    details: z.lazy(() =>
      GetTransactionTransactionIdMethodDetailsDetails$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetails1$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetails1$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetails1$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetails1$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetails1$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetails1$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdMethodDetails1$Outbound;
}

export function getTransactionTransactionIdMethodDetails1ToJSON(
  getTransactionTransactionIdMethodDetails1:
    GetTransactionTransactionIdMethodDetails1,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdMethodDetails1$outboundSchema.parse(
      getTransactionTransactionIdMethodDetails1,
    ),
  );
}

export function getTransactionTransactionIdMethodDetails1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdMethodDetails1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdMethodDetails1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdMethodDetails1' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdMethodDetails$inboundSchema: z.ZodType<
  GetTransactionTransactionIdMethodDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetTransactionTransactionIdMethodDetails1$inboundSchema),
  z.lazy(() => GetTransactionTransactionIdMethodDetails2$inboundSchema),
  z.lazy(() => GetTransactionTransactionIdMethodDetails3$inboundSchema),
]);

/** @internal */
export type GetTransactionTransactionIdMethodDetails$Outbound =
  | GetTransactionTransactionIdMethodDetails1$Outbound
  | GetTransactionTransactionIdMethodDetails2$Outbound
  | GetTransactionTransactionIdMethodDetails3$Outbound;

/** @internal */
export const GetTransactionTransactionIdMethodDetails$outboundSchema: z.ZodType<
  GetTransactionTransactionIdMethodDetails$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdMethodDetails
> = z.union([
  z.lazy(() => GetTransactionTransactionIdMethodDetails1$outboundSchema),
  z.lazy(() => GetTransactionTransactionIdMethodDetails2$outboundSchema),
  z.lazy(() => GetTransactionTransactionIdMethodDetails3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdMethodDetails$ {
  /** @deprecated use `GetTransactionTransactionIdMethodDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdMethodDetails$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdMethodDetails$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdMethodDetails$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdMethodDetails$Outbound;
}

export function getTransactionTransactionIdMethodDetailsToJSON(
  getTransactionTransactionIdMethodDetails:
    GetTransactionTransactionIdMethodDetails,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdMethodDetails$outboundSchema.parse(
      getTransactionTransactionIdMethodDetails,
    ),
  );
}

export function getTransactionTransactionIdMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdMethodDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdMethodDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdMethodDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdPayments$inboundSchema: z.ZodType<
  GetTransactionTransactionIdPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: GetTransactionTransactionIdTransactionsStatus$inboundSchema,
  payment_method: GetTransactionTransactionIdPaymentMethod$inboundSchema,
  provider: GetTransactionTransactionIdProvider$inboundSchema,
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  provider_reference: z.nullable(z.string()),
  provider_metadata: z.lazy(() =>
    GetTransactionTransactionIdProviderMetadata$inboundSchema
  ),
  method_details: z.union([
    z.lazy(() => GetTransactionTransactionIdMethodDetails1$inboundSchema),
    z.lazy(() => GetTransactionTransactionIdMethodDetails2$inboundSchema),
    z.lazy(() => GetTransactionTransactionIdMethodDetails3$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "provider_reference": "providerReference",
    "provider_metadata": "providerMetadata",
    "method_details": "methodDetails",
  });
});

/** @internal */
export type GetTransactionTransactionIdPayments$Outbound = {
  id: string;
  status: string;
  payment_method: string;
  provider: string;
  created_at: string;
  updated_at?: string | null | undefined;
  provider_reference: string | null;
  provider_metadata: GetTransactionTransactionIdProviderMetadata$Outbound;
  method_details:
    | GetTransactionTransactionIdMethodDetails1$Outbound
    | GetTransactionTransactionIdMethodDetails2$Outbound
    | GetTransactionTransactionIdMethodDetails3$Outbound;
};

/** @internal */
export const GetTransactionTransactionIdPayments$outboundSchema: z.ZodType<
  GetTransactionTransactionIdPayments$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdPayments
> = z.object({
  id: z.string(),
  status: GetTransactionTransactionIdTransactionsStatus$outboundSchema,
  paymentMethod: GetTransactionTransactionIdPaymentMethod$outboundSchema,
  provider: GetTransactionTransactionIdProvider$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  providerReference: z.nullable(z.string()),
  providerMetadata: z.lazy(() =>
    GetTransactionTransactionIdProviderMetadata$outboundSchema
  ),
  methodDetails: z.union([
    z.lazy(() => GetTransactionTransactionIdMethodDetails1$outboundSchema),
    z.lazy(() => GetTransactionTransactionIdMethodDetails2$outboundSchema),
    z.lazy(() => GetTransactionTransactionIdMethodDetails3$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    createdAt: "created_at",
    updatedAt: "updated_at",
    providerReference: "provider_reference",
    providerMetadata: "provider_metadata",
    methodDetails: "method_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdPayments$ {
  /** @deprecated use `GetTransactionTransactionIdPayments$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdPayments$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdPayments$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdPayments$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdPayments$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdPayments$Outbound;
}

export function getTransactionTransactionIdPaymentsToJSON(
  getTransactionTransactionIdPayments: GetTransactionTransactionIdPayments,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdPayments$outboundSchema.parse(
      getTransactionTransactionIdPayments,
    ),
  );
}

export function getTransactionTransactionIdPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdPayments' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponseStatus
  > = z.nativeEnum(GetTransactionTransactionIdTransactionsResponseStatus);

/** @internal */
export const GetTransactionTransactionIdTransactionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponseStatus
  > = GetTransactionTransactionIdTransactionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponseStatus$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponseStatus$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponseStatus$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdTransactionsCustomData$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionTransactionIdTransactionsCustomData$Outbound = {};

/** @internal */
export const GetTransactionTransactionIdTransactionsCustomData$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsCustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdTransactionsCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsCustomData$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsCustomData$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsCustomData$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsCustomData$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdTransactionsCustomData$Outbound;
}

export function getTransactionTransactionIdTransactionsCustomDataToJSON(
  getTransactionTransactionIdTransactionsCustomData:
    GetTransactionTransactionIdTransactionsCustomData,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdTransactionsCustomData$outboundSchema.parse(
      getTransactionTransactionIdTransactionsCustomData,
    ),
  );
}

export function getTransactionTransactionIdTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdTransactionsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdTransactionsCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdCustomer$inboundSchema: z.ZodType<
  GetTransactionTransactionIdCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(
    GetTransactionTransactionIdTransactionsResponseStatus$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    GetTransactionTransactionIdTransactionsCustomData$inboundSchema
  ),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetTransactionTransactionIdCustomer$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  custom_data: GetTransactionTransactionIdTransactionsCustomData$Outbound;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetTransactionTransactionIdCustomer$outboundSchema: z.ZodType<
  GetTransactionTransactionIdCustomer$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdCustomer
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(
    GetTransactionTransactionIdTransactionsResponseStatus$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    GetTransactionTransactionIdTransactionsCustomData$outboundSchema
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdCustomer$ {
  /** @deprecated use `GetTransactionTransactionIdCustomer$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdCustomer$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdCustomer$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdCustomer$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdCustomer$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdCustomer$Outbound;
}

export function getTransactionTransactionIdCustomerToJSON(
  getTransactionTransactionIdCustomer: GetTransactionTransactionIdCustomer,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdCustomer$outboundSchema.parse(
      getTransactionTransactionIdCustomer,
    ),
  );
}

export function getTransactionTransactionIdCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdCustomer' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponseCustomData$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionTransactionIdTransactionsResponseCustomData$Outbound =
  {};

/** @internal */
export const GetTransactionTransactionIdTransactionsResponseCustomData$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsResponseCustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdTransactionsResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponseCustomData$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponseCustomData$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponseCustomData$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponseCustomData$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdTransactionsResponseCustomData$Outbound;
}

export function getTransactionTransactionIdTransactionsResponseCustomDataToJSON(
  getTransactionTransactionIdTransactionsResponseCustomData:
    GetTransactionTransactionIdTransactionsResponseCustomData,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdTransactionsResponseCustomData$outboundSchema
      .parse(getTransactionTransactionIdTransactionsResponseCustomData),
  );
}

export function getTransactionTransactionIdTransactionsResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdTransactionsResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdTransactionsResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdTransactionsResponseCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200Status
  > = z.nativeEnum(GetTransactionTransactionIdTransactionsResponse200Status);

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200Status
  > = GetTransactionTransactionIdTransactionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponse200Status$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponse200Status$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponse200Status$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdAddress$inboundSchema: z.ZodType<
  GetTransactionTransactionIdAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  first_line: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    GetTransactionTransactionIdTransactionsResponseCustomData$inboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(
    GetTransactionTransactionIdTransactionsResponse200Status$inboundSchema,
  ).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_line": "firstLine",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type GetTransactionTransactionIdAddress$Outbound = {
  id: string;
  description?: string | null | undefined;
  first_line?: string | null | undefined;
  custom_data:
    GetTransactionTransactionIdTransactionsResponseCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | null | undefined;
  created_at: string;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const GetTransactionTransactionIdAddress$outboundSchema: z.ZodType<
  GetTransactionTransactionIdAddress$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdAddress
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    GetTransactionTransactionIdTransactionsResponseCustomData$outboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(
    GetTransactionTransactionIdTransactionsResponse200Status$outboundSchema,
  ).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstLine: "first_line",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdAddress$ {
  /** @deprecated use `GetTransactionTransactionIdAddress$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdAddress$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdAddress$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdAddress$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdAddress$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdAddress$Outbound;
}

export function getTransactionTransactionIdAddressToJSON(
  getTransactionTransactionIdAddress: GetTransactionTransactionIdAddress,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdAddress$outboundSchema.parse(
      getTransactionTransactionIdAddress,
    ),
  );
}

export function getTransactionTransactionIdAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdAddress' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus,
  );

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus
  > =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdType$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionTransactionIdType
> = z.nativeEnum(GetTransactionTransactionIdType);

/** @internal */
export const GetTransactionTransactionIdType$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionTransactionIdType
> = GetTransactionTransactionIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdType$ {
  /** @deprecated use `GetTransactionTransactionIdType$inboundSchema` instead. */
  export const inboundSchema = GetTransactionTransactionIdType$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdType$outboundSchema` instead. */
  export const outboundSchema = GetTransactionTransactionIdType$outboundSchema;
}

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionTransactionIdTransactionsResponse200CustomData$Outbound =
  {};

/** @internal */
export const GetTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema:
  z.ZodType<
    GetTransactionTransactionIdTransactionsResponse200CustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionTransactionIdTransactionsResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdTransactionsResponse200CustomData$ {
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdTransactionsResponse200CustomData$Outbound` instead. */
  export type Outbound =
    GetTransactionTransactionIdTransactionsResponse200CustomData$Outbound;
}

export function getTransactionTransactionIdTransactionsResponse200CustomDataToJSON(
  getTransactionTransactionIdTransactionsResponse200CustomData:
    GetTransactionTransactionIdTransactionsResponse200CustomData,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema
      .parse(getTransactionTransactionIdTransactionsResponse200CustomData),
  );
}

export function getTransactionTransactionIdTransactionsResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdTransactionsResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdTransactionsResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdDiscount$inboundSchema: z.ZodType<
  GetTransactionTransactionIdDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: GetTransactionTransactionIdType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    GetTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type GetTransactionTransactionIdDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    GetTransactionTransactionIdTransactionsResponse200CustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const GetTransactionTransactionIdDiscount$outboundSchema: z.ZodType<
  GetTransactionTransactionIdDiscount$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(
    GetTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: GetTransactionTransactionIdType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    GetTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdDiscount$ {
  /** @deprecated use `GetTransactionTransactionIdDiscount$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdDiscount$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdDiscount$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdDiscount$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdDiscount$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdDiscount$Outbound;
}

export function getTransactionTransactionIdDiscountToJSON(
  getTransactionTransactionIdDiscount: GetTransactionTransactionIdDiscount,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdDiscount$outboundSchema.parse(
      getTransactionTransactionIdDiscount,
    ),
  );
}

export function getTransactionTransactionIdDiscountFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionTransactionIdDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionTransactionIdDiscount' from JSON`,
  );
}

/** @internal */
export const GetTransactionTransactionIdResponseBody$inboundSchema: z.ZodType<
  GetTransactionTransactionIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: GetTransactionTransactionIdStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(
    GetTransactionTransactionIdCollectionMode$inboundSchema,
  ).optional(),
  custom_data: z.lazy(() => GetTransactionTransactionIdCustomData$inboundSchema)
    .optional(),
  current_billing_period: z.lazy(() =>
    GetTransactionTransactionIdCurrentBillingPeriod$inboundSchema
  ).optional(),
  details: z.lazy(() => GetTransactionTransactionIdDetails$inboundSchema),
  items: z.array(z.lazy(() => GetTransactionTransactionIdItems$inboundSchema)),
  payments: z.lazy(() => GetTransactionTransactionIdPayments$inboundSchema),
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  customer: z.lazy(() => GetTransactionTransactionIdCustomer$inboundSchema),
  address: z.lazy(() => GetTransactionTransactionIdAddress$inboundSchema),
  discount: z.nullable(
    z.lazy(() => GetTransactionTransactionIdDiscount$inboundSchema),
  ).optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type GetTransactionTransactionIdResponseBody$Outbound = {
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: GetTransactionTransactionIdCustomData$Outbound | undefined;
  current_billing_period?:
    | GetTransactionTransactionIdCurrentBillingPeriod$Outbound
    | undefined;
  details: GetTransactionTransactionIdDetails$Outbound;
  items: Array<GetTransactionTransactionIdItems$Outbound>;
  payments: GetTransactionTransactionIdPayments$Outbound;
  created_at: string;
  updated_at?: string | null | undefined;
  customer: GetTransactionTransactionIdCustomer$Outbound;
  address: GetTransactionTransactionIdAddress$Outbound;
  discount?: GetTransactionTransactionIdDiscount$Outbound | null | undefined;
  invoice_id: string;
};

/** @internal */
export const GetTransactionTransactionIdResponseBody$outboundSchema: z.ZodType<
  GetTransactionTransactionIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetTransactionTransactionIdResponseBody
> = z.object({
  status: GetTransactionTransactionIdStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(
    GetTransactionTransactionIdCollectionMode$outboundSchema,
  ).optional(),
  customData: z.lazy(() => GetTransactionTransactionIdCustomData$outboundSchema)
    .optional(),
  currentBillingPeriod: z.lazy(() =>
    GetTransactionTransactionIdCurrentBillingPeriod$outboundSchema
  ).optional(),
  details: z.lazy(() => GetTransactionTransactionIdDetails$outboundSchema),
  items: z.array(z.lazy(() => GetTransactionTransactionIdItems$outboundSchema)),
  payments: z.lazy(() => GetTransactionTransactionIdPayments$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  customer: z.lazy(() => GetTransactionTransactionIdCustomer$outboundSchema),
  address: z.lazy(() => GetTransactionTransactionIdAddress$outboundSchema),
  discount: z.nullable(
    z.lazy(() => GetTransactionTransactionIdDiscount$outboundSchema),
  ).optional(),
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
    createdAt: "created_at",
    updatedAt: "updated_at",
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionTransactionIdResponseBody$ {
  /** @deprecated use `GetTransactionTransactionIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionTransactionIdResponseBody$inboundSchema;
  /** @deprecated use `GetTransactionTransactionIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionTransactionIdResponseBody$outboundSchema;
  /** @deprecated use `GetTransactionTransactionIdResponseBody$Outbound` instead. */
  export type Outbound = GetTransactionTransactionIdResponseBody$Outbound;
}

export function getTransactionTransactionIdResponseBodyToJSON(
  getTransactionTransactionIdResponseBody:
    GetTransactionTransactionIdResponseBody,
): string {
  return JSON.stringify(
    GetTransactionTransactionIdResponseBody$outboundSchema.parse(
      getTransactionTransactionIdResponseBody,
    ),
  );
}

export function getTransactionTransactionIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionTransactionIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionTransactionIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionTransactionIdResponseBody' from JSON`,
  );
}
