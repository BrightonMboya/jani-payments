/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCustomersCustomerIdRequest = {
  customerId: string;
};

export const GetCustomersCustomerIdStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetCustomersCustomerIdStatus = ClosedEnum<
  typeof GetCustomersCustomerIdStatus
>;

/**
 * Any valid JSON value
 */
export type GetCustomersCustomerIdCustomData = {};

/**
 * Get a Customer
 */
export type GetCustomersCustomerIdResponseBody = {
  id: string;
  email: string;
  name: string;
  status?: GetCustomersCustomerIdStatus | null | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetCustomersCustomerIdCustomData;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const GetCustomersCustomerIdRequest$inboundSchema: z.ZodType<
  GetCustomersCustomerIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
  });
});

/** @internal */
export type GetCustomersCustomerIdRequest$Outbound = {
  customer_id: string;
};

/** @internal */
export const GetCustomersCustomerIdRequest$outboundSchema: z.ZodType<
  GetCustomersCustomerIdRequest$Outbound,
  z.ZodTypeDef,
  GetCustomersCustomerIdRequest
> = z.object({
  customerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomerIdRequest$ {
  /** @deprecated use `GetCustomersCustomerIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetCustomersCustomerIdRequest$inboundSchema;
  /** @deprecated use `GetCustomersCustomerIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetCustomersCustomerIdRequest$outboundSchema;
  /** @deprecated use `GetCustomersCustomerIdRequest$Outbound` instead. */
  export type Outbound = GetCustomersCustomerIdRequest$Outbound;
}

export function getCustomersCustomerIdRequestToJSON(
  getCustomersCustomerIdRequest: GetCustomersCustomerIdRequest,
): string {
  return JSON.stringify(
    GetCustomersCustomerIdRequest$outboundSchema.parse(
      getCustomersCustomerIdRequest,
    ),
  );
}

export function getCustomersCustomerIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersCustomerIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomersCustomerIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersCustomerIdRequest' from JSON`,
  );
}

/** @internal */
export const GetCustomersCustomerIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetCustomersCustomerIdStatus
> = z.nativeEnum(GetCustomersCustomerIdStatus);

/** @internal */
export const GetCustomersCustomerIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetCustomersCustomerIdStatus
> = GetCustomersCustomerIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomerIdStatus$ {
  /** @deprecated use `GetCustomersCustomerIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetCustomersCustomerIdStatus$inboundSchema;
  /** @deprecated use `GetCustomersCustomerIdStatus$outboundSchema` instead. */
  export const outboundSchema = GetCustomersCustomerIdStatus$outboundSchema;
}

/** @internal */
export const GetCustomersCustomerIdCustomData$inboundSchema: z.ZodType<
  GetCustomersCustomerIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetCustomersCustomerIdCustomData$Outbound = {};

/** @internal */
export const GetCustomersCustomerIdCustomData$outboundSchema: z.ZodType<
  GetCustomersCustomerIdCustomData$Outbound,
  z.ZodTypeDef,
  GetCustomersCustomerIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomerIdCustomData$ {
  /** @deprecated use `GetCustomersCustomerIdCustomData$inboundSchema` instead. */
  export const inboundSchema = GetCustomersCustomerIdCustomData$inboundSchema;
  /** @deprecated use `GetCustomersCustomerIdCustomData$outboundSchema` instead. */
  export const outboundSchema = GetCustomersCustomerIdCustomData$outboundSchema;
  /** @deprecated use `GetCustomersCustomerIdCustomData$Outbound` instead. */
  export type Outbound = GetCustomersCustomerIdCustomData$Outbound;
}

export function getCustomersCustomerIdCustomDataToJSON(
  getCustomersCustomerIdCustomData: GetCustomersCustomerIdCustomData,
): string {
  return JSON.stringify(
    GetCustomersCustomerIdCustomData$outboundSchema.parse(
      getCustomersCustomerIdCustomData,
    ),
  );
}

export function getCustomersCustomerIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersCustomerIdCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomersCustomerIdCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersCustomerIdCustomData' from JSON`,
  );
}

/** @internal */
export const GetCustomersCustomerIdResponseBody$inboundSchema: z.ZodType<
  GetCustomersCustomerIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(GetCustomersCustomerIdStatus$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => GetCustomersCustomerIdCustomData$inboundSchema),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetCustomersCustomerIdResponseBody$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  custom_data: GetCustomersCustomerIdCustomData$Outbound;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetCustomersCustomerIdResponseBody$outboundSchema: z.ZodType<
  GetCustomersCustomerIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetCustomersCustomerIdResponseBody
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(GetCustomersCustomerIdStatus$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => GetCustomersCustomerIdCustomData$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomerIdResponseBody$ {
  /** @deprecated use `GetCustomersCustomerIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetCustomersCustomerIdResponseBody$inboundSchema;
  /** @deprecated use `GetCustomersCustomerIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomersCustomerIdResponseBody$outboundSchema;
  /** @deprecated use `GetCustomersCustomerIdResponseBody$Outbound` instead. */
  export type Outbound = GetCustomersCustomerIdResponseBody$Outbound;
}

export function getCustomersCustomerIdResponseBodyToJSON(
  getCustomersCustomerIdResponseBody: GetCustomersCustomerIdResponseBody,
): string {
  return JSON.stringify(
    GetCustomersCustomerIdResponseBody$outboundSchema.parse(
      getCustomersCustomerIdResponseBody,
    ),
  );
}

export function getCustomersCustomerIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersCustomerIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomersCustomerIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersCustomerIdResponseBody' from JSON`,
  );
}
