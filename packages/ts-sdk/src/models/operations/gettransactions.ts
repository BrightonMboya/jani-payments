/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Operator = {
  Lt: "LT",
  Lte: "LTE",
  Gt: "GT",
  Gte: "GTE",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

export type BilledAtQueryParam2 = {
  operator: Operator;
  value: Date;
};

export type BilledAt = BilledAtQueryParam2 | Date;

export const QueryParamOperator = {
  Lt: "LT",
  Lte: "LTE",
  Gt: "GT",
  Gte: "GTE",
} as const;
export type QueryParamOperator = ClosedEnum<typeof QueryParamOperator>;

export type QueryParam2 = {
  operator: QueryParamOperator;
  value: Date;
};

export type CreatedAt = QueryParam2 | Date;

export const UpdatedAtQueryParamOperator = {
  Lt: "LT",
  Lte: "LTE",
  Gt: "GT",
  Gte: "GTE",
} as const;
export type UpdatedAtQueryParamOperator = ClosedEnum<
  typeof UpdatedAtQueryParamOperator
>;

export type UpdatedAtQueryParam2 = {
  operator: UpdatedAtQueryParamOperator;
  value: Date;
};

export type UpdatedAt = UpdatedAtQueryParam2 | Date;

export const SubscriptionIdQueryParam2 = {
  Null: "null",
} as const;
export type SubscriptionIdQueryParam2 = ClosedEnum<
  typeof SubscriptionIdQueryParam2
>;

export type SubscriptionId = Array<string> | SubscriptionIdQueryParam2;

export const QueryParamCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type QueryParamCollectionMode = ClosedEnum<
  typeof QueryParamCollectionMode
>;

export const QueryParamStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type QueryParamStatus = ClosedEnum<typeof QueryParamStatus>;

export const Field = {
  BilledAt: "billed_at",
  CreatedAt: "created_at",
  Id: "id",
  UpdatedAt: "updated_at",
} as const;
export type Field = ClosedEnum<typeof Field>;

export const Direction = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
export type Direction = ClosedEnum<typeof Direction>;

export type OrderBy = {
  field: Field;
  direction: Direction;
};

export const Include = {
  Customer: "customer",
  Subscription: "subscription",
  Items: "items",
  Discount: "discount",
} as const;
export type Include = ClosedEnum<typeof Include>;

export type GetTransactionsRequest = {
  after?: string | undefined;
  perPage?: number | undefined;
  billedAt?: BilledAtQueryParam2 | Date | undefined;
  createdAt?: QueryParam2 | Date | undefined;
  updatedAt?: UpdatedAtQueryParam2 | Date | undefined;
  customerId?: Array<string> | undefined;
  id?: Array<string> | undefined;
  invoiceNumber?: Array<string> | undefined;
  subscriptionId?: Array<string> | SubscriptionIdQueryParam2 | undefined;
  collectionMode?: QueryParamCollectionMode | undefined;
  status?: Array<QueryParamStatus> | undefined;
  orderBy?: OrderBy | undefined;
  include?: Array<Include> | undefined;
};

export const GetTransactionsStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type GetTransactionsStatus = ClosedEnum<typeof GetTransactionsStatus>;

export const GetTransactionsCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type GetTransactionsCollectionMode = ClosedEnum<
  typeof GetTransactionsCollectionMode
>;

/**
 * Any valid JSON value
 */
export type GetTransactionsCustomData = {};

export type GetTransactionsCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type GetTransactionsTotal = {
  subtotal: number;
  discount: number;
  grandTotal: number;
};

export type GetTransactionsDetails = {
  total: GetTransactionsTotal;
};

export const GetTransactionsTransactionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type GetTransactionsTransactionsType = ClosedEnum<
  typeof GetTransactionsTransactionsType
>;

export const GetTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetTransactionsInterval = ClosedEnum<
  typeof GetTransactionsInterval
>;

export type GetTransactionsBillingCycle = {
  interval: GetTransactionsInterval;
  frequency: number;
};

export const GetTransactionsTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetTransactionsTransactionsInterval = ClosedEnum<
  typeof GetTransactionsTransactionsInterval
>;

export type GetTransactionsTrialPeriod = {
  interval: GetTransactionsTransactionsInterval;
  frequency: number;
};

export type GetTransactionsUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus
  >;

/**
 * Any valid JSON value
 */
export type GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData =
  {};

export type GetTransactionsPrice = {
  productId: string;
  description?: string | null | undefined;
  type: GetTransactionsTransactionsType;
  name: string;
  billingCycle: GetTransactionsBillingCycle;
  trialPeriod: GetTransactionsTrialPeriod;
  unitPrice: GetTransactionsUnitPrice;
  status:
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus;
  /**
   * Any valid JSON value
   */
  customData?:
    | GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export const GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus =
  ClosedEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus
  >;

/**
 * Any valid JSON value
 */
export type GetTransactionsTransactionsResponse200ApplicationJSONCustomData =
  {};

export type GetTransactionsProduct = {
  id: string;
  name: string;
  description: string;
  status:
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus;
  createdAt: string;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData: GetTransactionsTransactionsResponse200ApplicationJSONCustomData;
};

export type GetTransactionsItems = {
  price: GetTransactionsPrice;
  quantity: number;
  product: GetTransactionsProduct;
};

export const GetTransactionsTransactionsStatus = {
  Pending: "PENDING",
  Processing: "PROCESSING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Refunded: "REFUNDED",
} as const;
export type GetTransactionsTransactionsStatus = ClosedEnum<
  typeof GetTransactionsTransactionsStatus
>;

export const GetTransactionsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
  Card: "CARD",
  BankTransfer: "BANK_TRANSFER",
} as const;
export type GetTransactionsPaymentMethod = ClosedEnum<
  typeof GetTransactionsPaymentMethod
>;

export const GetTransactionsProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type GetTransactionsProvider = ClosedEnum<
  typeof GetTransactionsProvider
>;

/**
 * Any valid JSON value
 */
export type GetTransactionsProviderMetadata = {};

export const GetTransactionsMethodDetailsTransactionsPaymentMethod = {
  BankTransfer: "BANK_TRANSFER",
} as const;
export type GetTransactionsMethodDetailsTransactionsPaymentMethod = ClosedEnum<
  typeof GetTransactionsMethodDetailsTransactionsPaymentMethod
>;

export type GetTransactionsMethodDetailsTransactionsDetails = {
  bankName: string;
  bankReference: string;
};

export type GetTransactionsMethodDetails3 = {
  paymentMethod: GetTransactionsMethodDetailsTransactionsPaymentMethod;
  details: GetTransactionsMethodDetailsTransactionsDetails;
};

export const GetTransactionsMethodDetailsPaymentMethod = {
  Card: "CARD",
} as const;
export type GetTransactionsMethodDetailsPaymentMethod = ClosedEnum<
  typeof GetTransactionsMethodDetailsPaymentMethod
>;

export type GetTransactionsMethodDetailsDetails = {
  last4: string;
  brand: string;
  expMonth: number;
  expYear: number;
  cardholderName: string | null;
};

export type GetTransactionsMethodDetails2 = {
  paymentMethod: GetTransactionsMethodDetailsPaymentMethod;
  details: GetTransactionsMethodDetailsDetails;
};

export const GetTransactionsMethodDetailsTransactionsResponsePaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type GetTransactionsMethodDetailsTransactionsResponsePaymentMethod =
  ClosedEnum<
    typeof GetTransactionsMethodDetailsTransactionsResponsePaymentMethod
  >;

export type GetTransactionsMethodDetailsTransactionsResponseDetails = {
  network: string;
  phoneSuffix: string;
};

export type GetTransactionsMethodDetails1 = {
  paymentMethod: GetTransactionsMethodDetailsTransactionsResponsePaymentMethod;
  details: GetTransactionsMethodDetailsTransactionsResponseDetails;
};

export type GetTransactionsMethodDetails =
  | GetTransactionsMethodDetails1
  | GetTransactionsMethodDetails2
  | GetTransactionsMethodDetails3;

export type GetTransactionsPayments = {
  id: string;
  status: GetTransactionsTransactionsStatus;
  paymentMethod: GetTransactionsPaymentMethod;
  provider: GetTransactionsProvider;
  createdAt: string;
  updatedAt?: string | null | undefined;
  providerReference: string | null;
  /**
   * Any valid JSON value
   */
  providerMetadata: GetTransactionsProviderMetadata;
  methodDetails:
    | GetTransactionsMethodDetails1
    | GetTransactionsMethodDetails2
    | GetTransactionsMethodDetails3;
};

export const GetTransactionsTransactionsResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetTransactionsTransactionsResponseStatus = ClosedEnum<
  typeof GetTransactionsTransactionsResponseStatus
>;

/**
 * Any valid JSON value
 */
export type GetTransactionsTransactionsCustomData = {};

export type GetTransactionsCustomer = {
  id: string;
  email: string;
  name: string;
  status?: GetTransactionsTransactionsResponseStatus | null | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetTransactionsTransactionsCustomData;
  createdAt: string;
  updatedAt: string;
};

/**
 * Any valid JSON value
 */
export type GetTransactionsTransactionsResponseCustomData = {};

export const GetTransactionsTransactionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetTransactionsTransactionsResponse200Status = ClosedEnum<
  typeof GetTransactionsTransactionsResponse200Status
>;

export type GetTransactionsAddress = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetTransactionsTransactionsResponseCustomData;
  city?: string | null | undefined;
  status?: GetTransactionsTransactionsResponse200Status | null | undefined;
  createdAt: string;
  updatedAt: string;
  customerId?: string | null | undefined;
};

export const GetTransactionsTransactionsResponse200ApplicationJSONStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetTransactionsTransactionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONStatus
  >;

export const GetTransactionsType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type GetTransactionsType = ClosedEnum<typeof GetTransactionsType>;

/**
 * Any valid JSON value
 */
export type GetTransactionsTransactionsResponse200CustomData = {};

export type GetTransactionsDiscount = {
  id: string;
  status?:
    | GetTransactionsTransactionsResponse200ApplicationJSONStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: GetTransactionsType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetTransactionsTransactionsResponse200CustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type GetTransactionsData = {
  status: GetTransactionsStatus;
  customerId: string;
  addressId: string;
  currencyCode: string;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?: GetTransactionsCollectionMode | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: GetTransactionsCustomData | undefined;
  currentBillingPeriod?: GetTransactionsCurrentBillingPeriod | undefined;
  details: GetTransactionsDetails;
  items: Array<GetTransactionsItems>;
  payments: GetTransactionsPayments;
  createdAt: string;
  updatedAt?: string | null | undefined;
  customer: GetTransactionsCustomer;
  address: GetTransactionsAddress;
  discount?: GetTransactionsDiscount | null | undefined;
  invoiceId: string;
};

export type Meta = {
  total: number;
  perPage: number;
  nextCursor: string;
};

/**
 * Returns the list of all Transactions
 */
export type GetTransactionsResponseBody = {
  data: Array<GetTransactionsData>;
  meta: Meta;
};

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const BilledAtQueryParam2$inboundSchema: z.ZodType<
  BilledAtQueryParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: Operator$inboundSchema,
  value: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type BilledAtQueryParam2$Outbound = {
  operator: string;
  value: string;
};

/** @internal */
export const BilledAtQueryParam2$outboundSchema: z.ZodType<
  BilledAtQueryParam2$Outbound,
  z.ZodTypeDef,
  BilledAtQueryParam2
> = z.object({
  operator: Operator$outboundSchema,
  value: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BilledAtQueryParam2$ {
  /** @deprecated use `BilledAtQueryParam2$inboundSchema` instead. */
  export const inboundSchema = BilledAtQueryParam2$inboundSchema;
  /** @deprecated use `BilledAtQueryParam2$outboundSchema` instead. */
  export const outboundSchema = BilledAtQueryParam2$outboundSchema;
  /** @deprecated use `BilledAtQueryParam2$Outbound` instead. */
  export type Outbound = BilledAtQueryParam2$Outbound;
}

export function billedAtQueryParam2ToJSON(
  billedAtQueryParam2: BilledAtQueryParam2,
): string {
  return JSON.stringify(
    BilledAtQueryParam2$outboundSchema.parse(billedAtQueryParam2),
  );
}

export function billedAtQueryParam2FromJSON(
  jsonString: string,
): SafeParseResult<BilledAtQueryParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BilledAtQueryParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BilledAtQueryParam2' from JSON`,
  );
}

/** @internal */
export const BilledAt$inboundSchema: z.ZodType<
  BilledAt,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BilledAtQueryParam2$inboundSchema),
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);

/** @internal */
export type BilledAt$Outbound = BilledAtQueryParam2$Outbound | string;

/** @internal */
export const BilledAt$outboundSchema: z.ZodType<
  BilledAt$Outbound,
  z.ZodTypeDef,
  BilledAt
> = z.union([
  z.lazy(() => BilledAtQueryParam2$outboundSchema),
  z.date().transform(v => v.toISOString()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BilledAt$ {
  /** @deprecated use `BilledAt$inboundSchema` instead. */
  export const inboundSchema = BilledAt$inboundSchema;
  /** @deprecated use `BilledAt$outboundSchema` instead. */
  export const outboundSchema = BilledAt$outboundSchema;
  /** @deprecated use `BilledAt$Outbound` instead. */
  export type Outbound = BilledAt$Outbound;
}

export function billedAtToJSON(billedAt: BilledAt): string {
  return JSON.stringify(BilledAt$outboundSchema.parse(billedAt));
}

export function billedAtFromJSON(
  jsonString: string,
): SafeParseResult<BilledAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BilledAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BilledAt' from JSON`,
  );
}

/** @internal */
export const QueryParamOperator$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamOperator
> = z.nativeEnum(QueryParamOperator);

/** @internal */
export const QueryParamOperator$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamOperator
> = QueryParamOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamOperator$ {
  /** @deprecated use `QueryParamOperator$inboundSchema` instead. */
  export const inboundSchema = QueryParamOperator$inboundSchema;
  /** @deprecated use `QueryParamOperator$outboundSchema` instead. */
  export const outboundSchema = QueryParamOperator$outboundSchema;
}

/** @internal */
export const QueryParam2$inboundSchema: z.ZodType<
  QueryParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: QueryParamOperator$inboundSchema,
  value: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type QueryParam2$Outbound = {
  operator: string;
  value: string;
};

/** @internal */
export const QueryParam2$outboundSchema: z.ZodType<
  QueryParam2$Outbound,
  z.ZodTypeDef,
  QueryParam2
> = z.object({
  operator: QueryParamOperator$outboundSchema,
  value: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParam2$ {
  /** @deprecated use `QueryParam2$inboundSchema` instead. */
  export const inboundSchema = QueryParam2$inboundSchema;
  /** @deprecated use `QueryParam2$outboundSchema` instead. */
  export const outboundSchema = QueryParam2$outboundSchema;
  /** @deprecated use `QueryParam2$Outbound` instead. */
  export type Outbound = QueryParam2$Outbound;
}

export function queryParam2ToJSON(queryParam2: QueryParam2): string {
  return JSON.stringify(QueryParam2$outboundSchema.parse(queryParam2));
}

export function queryParam2FromJSON(
  jsonString: string,
): SafeParseResult<QueryParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParam2' from JSON`,
  );
}

/** @internal */
export const CreatedAt$inboundSchema: z.ZodType<
  CreatedAt,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => QueryParam2$inboundSchema),
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);

/** @internal */
export type CreatedAt$Outbound = QueryParam2$Outbound | string;

/** @internal */
export const CreatedAt$outboundSchema: z.ZodType<
  CreatedAt$Outbound,
  z.ZodTypeDef,
  CreatedAt
> = z.union([
  z.lazy(() => QueryParam2$outboundSchema),
  z.date().transform(v => v.toISOString()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedAt$ {
  /** @deprecated use `CreatedAt$inboundSchema` instead. */
  export const inboundSchema = CreatedAt$inboundSchema;
  /** @deprecated use `CreatedAt$outboundSchema` instead. */
  export const outboundSchema = CreatedAt$outboundSchema;
  /** @deprecated use `CreatedAt$Outbound` instead. */
  export type Outbound = CreatedAt$Outbound;
}

export function createdAtToJSON(createdAt: CreatedAt): string {
  return JSON.stringify(CreatedAt$outboundSchema.parse(createdAt));
}

export function createdAtFromJSON(
  jsonString: string,
): SafeParseResult<CreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatedAt' from JSON`,
  );
}

/** @internal */
export const UpdatedAtQueryParamOperator$inboundSchema: z.ZodNativeEnum<
  typeof UpdatedAtQueryParamOperator
> = z.nativeEnum(UpdatedAtQueryParamOperator);

/** @internal */
export const UpdatedAtQueryParamOperator$outboundSchema: z.ZodNativeEnum<
  typeof UpdatedAtQueryParamOperator
> = UpdatedAtQueryParamOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatedAtQueryParamOperator$ {
  /** @deprecated use `UpdatedAtQueryParamOperator$inboundSchema` instead. */
  export const inboundSchema = UpdatedAtQueryParamOperator$inboundSchema;
  /** @deprecated use `UpdatedAtQueryParamOperator$outboundSchema` instead. */
  export const outboundSchema = UpdatedAtQueryParamOperator$outboundSchema;
}

/** @internal */
export const UpdatedAtQueryParam2$inboundSchema: z.ZodType<
  UpdatedAtQueryParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: UpdatedAtQueryParamOperator$inboundSchema,
  value: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type UpdatedAtQueryParam2$Outbound = {
  operator: string;
  value: string;
};

/** @internal */
export const UpdatedAtQueryParam2$outboundSchema: z.ZodType<
  UpdatedAtQueryParam2$Outbound,
  z.ZodTypeDef,
  UpdatedAtQueryParam2
> = z.object({
  operator: UpdatedAtQueryParamOperator$outboundSchema,
  value: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatedAtQueryParam2$ {
  /** @deprecated use `UpdatedAtQueryParam2$inboundSchema` instead. */
  export const inboundSchema = UpdatedAtQueryParam2$inboundSchema;
  /** @deprecated use `UpdatedAtQueryParam2$outboundSchema` instead. */
  export const outboundSchema = UpdatedAtQueryParam2$outboundSchema;
  /** @deprecated use `UpdatedAtQueryParam2$Outbound` instead. */
  export type Outbound = UpdatedAtQueryParam2$Outbound;
}

export function updatedAtQueryParam2ToJSON(
  updatedAtQueryParam2: UpdatedAtQueryParam2,
): string {
  return JSON.stringify(
    UpdatedAtQueryParam2$outboundSchema.parse(updatedAtQueryParam2),
  );
}

export function updatedAtQueryParam2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatedAtQueryParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatedAtQueryParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatedAtQueryParam2' from JSON`,
  );
}

/** @internal */
export const UpdatedAt$inboundSchema: z.ZodType<
  UpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdatedAtQueryParam2$inboundSchema),
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);

/** @internal */
export type UpdatedAt$Outbound = UpdatedAtQueryParam2$Outbound | string;

/** @internal */
export const UpdatedAt$outboundSchema: z.ZodType<
  UpdatedAt$Outbound,
  z.ZodTypeDef,
  UpdatedAt
> = z.union([
  z.lazy(() => UpdatedAtQueryParam2$outboundSchema),
  z.date().transform(v => v.toISOString()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatedAt$ {
  /** @deprecated use `UpdatedAt$inboundSchema` instead. */
  export const inboundSchema = UpdatedAt$inboundSchema;
  /** @deprecated use `UpdatedAt$outboundSchema` instead. */
  export const outboundSchema = UpdatedAt$outboundSchema;
  /** @deprecated use `UpdatedAt$Outbound` instead. */
  export type Outbound = UpdatedAt$Outbound;
}

export function updatedAtToJSON(updatedAt: UpdatedAt): string {
  return JSON.stringify(UpdatedAt$outboundSchema.parse(updatedAt));
}

export function updatedAtFromJSON(
  jsonString: string,
): SafeParseResult<UpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatedAt' from JSON`,
  );
}

/** @internal */
export const SubscriptionIdQueryParam2$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionIdQueryParam2
> = z.nativeEnum(SubscriptionIdQueryParam2);

/** @internal */
export const SubscriptionIdQueryParam2$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionIdQueryParam2
> = SubscriptionIdQueryParam2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionIdQueryParam2$ {
  /** @deprecated use `SubscriptionIdQueryParam2$inboundSchema` instead. */
  export const inboundSchema = SubscriptionIdQueryParam2$inboundSchema;
  /** @deprecated use `SubscriptionIdQueryParam2$outboundSchema` instead. */
  export const outboundSchema = SubscriptionIdQueryParam2$outboundSchema;
}

/** @internal */
export const SubscriptionId$inboundSchema: z.ZodType<
  SubscriptionId,
  z.ZodTypeDef,
  unknown
> = z.union([z.array(z.string()), SubscriptionIdQueryParam2$inboundSchema]);

/** @internal */
export type SubscriptionId$Outbound = Array<string> | string;

/** @internal */
export const SubscriptionId$outboundSchema: z.ZodType<
  SubscriptionId$Outbound,
  z.ZodTypeDef,
  SubscriptionId
> = z.union([z.array(z.string()), SubscriptionIdQueryParam2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionId$ {
  /** @deprecated use `SubscriptionId$inboundSchema` instead. */
  export const inboundSchema = SubscriptionId$inboundSchema;
  /** @deprecated use `SubscriptionId$outboundSchema` instead. */
  export const outboundSchema = SubscriptionId$outboundSchema;
  /** @deprecated use `SubscriptionId$Outbound` instead. */
  export type Outbound = SubscriptionId$Outbound;
}

export function subscriptionIdToJSON(subscriptionId: SubscriptionId): string {
  return JSON.stringify(SubscriptionId$outboundSchema.parse(subscriptionId));
}

export function subscriptionIdFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionId' from JSON`,
  );
}

/** @internal */
export const QueryParamCollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamCollectionMode
> = z.nativeEnum(QueryParamCollectionMode);

/** @internal */
export const QueryParamCollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamCollectionMode
> = QueryParamCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamCollectionMode$ {
  /** @deprecated use `QueryParamCollectionMode$inboundSchema` instead. */
  export const inboundSchema = QueryParamCollectionMode$inboundSchema;
  /** @deprecated use `QueryParamCollectionMode$outboundSchema` instead. */
  export const outboundSchema = QueryParamCollectionMode$outboundSchema;
}

/** @internal */
export const QueryParamStatus$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = z.nativeEnum(QueryParamStatus);

/** @internal */
export const QueryParamStatus$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = QueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatus$ {
  /** @deprecated use `QueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = QueryParamStatus$inboundSchema;
  /** @deprecated use `QueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = QueryParamStatus$outboundSchema;
}

/** @internal */
export const Field$inboundSchema: z.ZodNativeEnum<typeof Field> = z.nativeEnum(
  Field,
);

/** @internal */
export const Field$outboundSchema: z.ZodNativeEnum<typeof Field> =
  Field$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field$ {
  /** @deprecated use `Field$inboundSchema` instead. */
  export const inboundSchema = Field$inboundSchema;
  /** @deprecated use `Field$outboundSchema` instead. */
  export const outboundSchema = Field$outboundSchema;
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const OrderBy$inboundSchema: z.ZodType<OrderBy, z.ZodTypeDef, unknown> =
  z.object({
    field: Field$inboundSchema,
    direction: Direction$inboundSchema,
  });

/** @internal */
export type OrderBy$Outbound = {
  field: string;
  direction: string;
};

/** @internal */
export const OrderBy$outboundSchema: z.ZodType<
  OrderBy$Outbound,
  z.ZodTypeDef,
  OrderBy
> = z.object({
  field: Field$outboundSchema,
  direction: Direction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderBy$ {
  /** @deprecated use `OrderBy$inboundSchema` instead. */
  export const inboundSchema = OrderBy$inboundSchema;
  /** @deprecated use `OrderBy$outboundSchema` instead. */
  export const outboundSchema = OrderBy$outboundSchema;
  /** @deprecated use `OrderBy$Outbound` instead. */
  export type Outbound = OrderBy$Outbound;
}

export function orderByToJSON(orderBy: OrderBy): string {
  return JSON.stringify(OrderBy$outboundSchema.parse(orderBy));
}

export function orderByFromJSON(
  jsonString: string,
): SafeParseResult<OrderBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderBy' from JSON`,
  );
}

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const GetTransactionsRequest$inboundSchema: z.ZodType<
  GetTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.string().optional(),
  per_page: z.number().int().default(30),
  billed_at: z.union([
    z.lazy(() => BilledAtQueryParam2$inboundSchema),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ]).optional(),
  created_at: z.union([
    z.lazy(() => QueryParam2$inboundSchema),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ]).optional(),
  updated_at: z.union([
    z.lazy(() => UpdatedAtQueryParam2$inboundSchema),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ]).optional(),
  customer_id: z.array(z.string()).optional(),
  id: z.array(z.string()).optional(),
  invoice_number: z.array(z.string()).optional(),
  subscription_id: z.union([
    z.array(z.string()),
    SubscriptionIdQueryParam2$inboundSchema,
  ]).optional(),
  collection_mode: QueryParamCollectionMode$inboundSchema.optional(),
  status: z.array(QueryParamStatus$inboundSchema).optional(),
  order_by: z.lazy(() => OrderBy$inboundSchema).optional(),
  include: z.array(Include$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "billed_at": "billedAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
    "invoice_number": "invoiceNumber",
    "subscription_id": "subscriptionId",
    "collection_mode": "collectionMode",
    "order_by": "orderBy",
  });
});

/** @internal */
export type GetTransactionsRequest$Outbound = {
  after?: string | undefined;
  per_page: number;
  billed_at?: BilledAtQueryParam2$Outbound | string | undefined;
  created_at?: QueryParam2$Outbound | string | undefined;
  updated_at?: UpdatedAtQueryParam2$Outbound | string | undefined;
  customer_id?: Array<string> | undefined;
  id?: Array<string> | undefined;
  invoice_number?: Array<string> | undefined;
  subscription_id?: Array<string> | string | undefined;
  collection_mode?: string | undefined;
  status?: Array<string> | undefined;
  order_by?: OrderBy$Outbound | undefined;
  include?: Array<string> | undefined;
};

/** @internal */
export const GetTransactionsRequest$outboundSchema: z.ZodType<
  GetTransactionsRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionsRequest
> = z.object({
  after: z.string().optional(),
  perPage: z.number().int().default(30),
  billedAt: z.union([
    z.lazy(() => BilledAtQueryParam2$outboundSchema),
    z.date().transform(v => v.toISOString()),
  ]).optional(),
  createdAt: z.union([
    z.lazy(() => QueryParam2$outboundSchema),
    z.date().transform(v => v.toISOString()),
  ]).optional(),
  updatedAt: z.union([
    z.lazy(() => UpdatedAtQueryParam2$outboundSchema),
    z.date().transform(v => v.toISOString()),
  ]).optional(),
  customerId: z.array(z.string()).optional(),
  id: z.array(z.string()).optional(),
  invoiceNumber: z.array(z.string()).optional(),
  subscriptionId: z.union([
    z.array(z.string()),
    SubscriptionIdQueryParam2$outboundSchema,
  ]).optional(),
  collectionMode: QueryParamCollectionMode$outboundSchema.optional(),
  status: z.array(QueryParamStatus$outboundSchema).optional(),
  orderBy: z.lazy(() => OrderBy$outboundSchema).optional(),
  include: z.array(Include$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    billedAt: "billed_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
    customerId: "customer_id",
    invoiceNumber: "invoice_number",
    subscriptionId: "subscription_id",
    collectionMode: "collection_mode",
    orderBy: "order_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsRequest$ {
  /** @deprecated use `GetTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsRequest$inboundSchema;
  /** @deprecated use `GetTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsRequest$outboundSchema;
  /** @deprecated use `GetTransactionsRequest$Outbound` instead. */
  export type Outbound = GetTransactionsRequest$Outbound;
}

export function getTransactionsRequestToJSON(
  getTransactionsRequest: GetTransactionsRequest,
): string {
  return JSON.stringify(
    GetTransactionsRequest$outboundSchema.parse(getTransactionsRequest),
  );
}

export function getTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const GetTransactionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsStatus
> = z.nativeEnum(GetTransactionsStatus);

/** @internal */
export const GetTransactionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsStatus
> = GetTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsStatus$ {
  /** @deprecated use `GetTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsStatus$inboundSchema;
  /** @deprecated use `GetTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsStatus$outboundSchema;
}

/** @internal */
export const GetTransactionsCollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsCollectionMode
> = z.nativeEnum(GetTransactionsCollectionMode);

/** @internal */
export const GetTransactionsCollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsCollectionMode
> = GetTransactionsCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsCollectionMode$ {
  /** @deprecated use `GetTransactionsCollectionMode$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsCollectionMode$inboundSchema;
  /** @deprecated use `GetTransactionsCollectionMode$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsCollectionMode$outboundSchema;
}

/** @internal */
export const GetTransactionsCustomData$inboundSchema: z.ZodType<
  GetTransactionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetTransactionsCustomData$Outbound = {};

/** @internal */
export const GetTransactionsCustomData$outboundSchema: z.ZodType<
  GetTransactionsCustomData$Outbound,
  z.ZodTypeDef,
  GetTransactionsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsCustomData$ {
  /** @deprecated use `GetTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsCustomData$inboundSchema;
  /** @deprecated use `GetTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsCustomData$outboundSchema;
  /** @deprecated use `GetTransactionsCustomData$Outbound` instead. */
  export type Outbound = GetTransactionsCustomData$Outbound;
}

export function getTransactionsCustomDataToJSON(
  getTransactionsCustomData: GetTransactionsCustomData,
): string {
  return JSON.stringify(
    GetTransactionsCustomData$outboundSchema.parse(getTransactionsCustomData),
  );
}

export function getTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionsCurrentBillingPeriod$inboundSchema: z.ZodType<
  GetTransactionsCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type GetTransactionsCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const GetTransactionsCurrentBillingPeriod$outboundSchema: z.ZodType<
  GetTransactionsCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  GetTransactionsCurrentBillingPeriod
> = z.object({
  startsAt: z.date().transform(v => v.toISOString()),
  endsAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsCurrentBillingPeriod$ {
  /** @deprecated use `GetTransactionsCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `GetTransactionsCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `GetTransactionsCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = GetTransactionsCurrentBillingPeriod$Outbound;
}

export function getTransactionsCurrentBillingPeriodToJSON(
  getTransactionsCurrentBillingPeriod: GetTransactionsCurrentBillingPeriod,
): string {
  return JSON.stringify(
    GetTransactionsCurrentBillingPeriod$outboundSchema.parse(
      getTransactionsCurrentBillingPeriod,
    ),
  );
}

export function getTransactionsCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTotal$inboundSchema: z.ZodType<
  GetTransactionsTotal,
  z.ZodTypeDef,
  unknown
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grand_total: z.number(),
}).transform((v) => {
  return remap$(v, {
    "grand_total": "grandTotal",
  });
});

/** @internal */
export type GetTransactionsTotal$Outbound = {
  subtotal: number;
  discount: number;
  grand_total: number;
};

/** @internal */
export const GetTransactionsTotal$outboundSchema: z.ZodType<
  GetTransactionsTotal$Outbound,
  z.ZodTypeDef,
  GetTransactionsTotal
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grandTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    grandTotal: "grand_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTotal$ {
  /** @deprecated use `GetTransactionsTotal$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsTotal$inboundSchema;
  /** @deprecated use `GetTransactionsTotal$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsTotal$outboundSchema;
  /** @deprecated use `GetTransactionsTotal$Outbound` instead. */
  export type Outbound = GetTransactionsTotal$Outbound;
}

export function getTransactionsTotalToJSON(
  getTransactionsTotal: GetTransactionsTotal,
): string {
  return JSON.stringify(
    GetTransactionsTotal$outboundSchema.parse(getTransactionsTotal),
  );
}

export function getTransactionsTotalFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsTotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsTotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsTotal' from JSON`,
  );
}

/** @internal */
export const GetTransactionsDetails$inboundSchema: z.ZodType<
  GetTransactionsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.lazy(() => GetTransactionsTotal$inboundSchema),
});

/** @internal */
export type GetTransactionsDetails$Outbound = {
  total: GetTransactionsTotal$Outbound;
};

/** @internal */
export const GetTransactionsDetails$outboundSchema: z.ZodType<
  GetTransactionsDetails$Outbound,
  z.ZodTypeDef,
  GetTransactionsDetails
> = z.object({
  total: z.lazy(() => GetTransactionsTotal$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsDetails$ {
  /** @deprecated use `GetTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsDetails$inboundSchema;
  /** @deprecated use `GetTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsDetails$outboundSchema;
  /** @deprecated use `GetTransactionsDetails$Outbound` instead. */
  export type Outbound = GetTransactionsDetails$Outbound;
}

export function getTransactionsDetailsToJSON(
  getTransactionsDetails: GetTransactionsDetails,
): string {
  return JSON.stringify(
    GetTransactionsDetails$outboundSchema.parse(getTransactionsDetails),
  );
}

export function getTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsTransactionsType
> = z.nativeEnum(GetTransactionsTransactionsType);

/** @internal */
export const GetTransactionsTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsTransactionsType
> = GetTransactionsTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsType$ {
  /** @deprecated use `GetTransactionsTransactionsType$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsTransactionsType$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsType$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsTransactionsType$outboundSchema;
}

/** @internal */
export const GetTransactionsInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsInterval
> = z.nativeEnum(GetTransactionsInterval);

/** @internal */
export const GetTransactionsInterval$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsInterval
> = GetTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsInterval$ {
  /** @deprecated use `GetTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsInterval$inboundSchema;
  /** @deprecated use `GetTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsInterval$outboundSchema;
}

/** @internal */
export const GetTransactionsBillingCycle$inboundSchema: z.ZodType<
  GetTransactionsBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetTransactionsBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetTransactionsBillingCycle$outboundSchema: z.ZodType<
  GetTransactionsBillingCycle$Outbound,
  z.ZodTypeDef,
  GetTransactionsBillingCycle
> = z.object({
  interval: GetTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsBillingCycle$ {
  /** @deprecated use `GetTransactionsBillingCycle$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsBillingCycle$inboundSchema;
  /** @deprecated use `GetTransactionsBillingCycle$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsBillingCycle$outboundSchema;
  /** @deprecated use `GetTransactionsBillingCycle$Outbound` instead. */
  export type Outbound = GetTransactionsBillingCycle$Outbound;
}

export function getTransactionsBillingCycleToJSON(
  getTransactionsBillingCycle: GetTransactionsBillingCycle,
): string {
  return JSON.stringify(
    GetTransactionsBillingCycle$outboundSchema.parse(
      getTransactionsBillingCycle,
    ),
  );
}

export function getTransactionsBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsBillingCycle' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsTransactionsInterval
> = z.nativeEnum(GetTransactionsTransactionsInterval);

/** @internal */
export const GetTransactionsTransactionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionsTransactionsInterval> =
    GetTransactionsTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsInterval$ {
  /** @deprecated use `GetTransactionsTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsInterval$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsInterval$outboundSchema;
}

/** @internal */
export const GetTransactionsTrialPeriod$inboundSchema: z.ZodType<
  GetTransactionsTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetTransactionsTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetTransactionsTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetTransactionsTrialPeriod$outboundSchema: z.ZodType<
  GetTransactionsTrialPeriod$Outbound,
  z.ZodTypeDef,
  GetTransactionsTrialPeriod
> = z.object({
  interval: GetTransactionsTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTrialPeriod$ {
  /** @deprecated use `GetTransactionsTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsTrialPeriod$inboundSchema;
  /** @deprecated use `GetTransactionsTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsTrialPeriod$outboundSchema;
  /** @deprecated use `GetTransactionsTrialPeriod$Outbound` instead. */
  export type Outbound = GetTransactionsTrialPeriod$Outbound;
}

export function getTransactionsTrialPeriodToJSON(
  getTransactionsTrialPeriod: GetTransactionsTrialPeriod,
): string {
  return JSON.stringify(
    GetTransactionsTrialPeriod$outboundSchema.parse(getTransactionsTrialPeriod),
  );
}

export function getTransactionsTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsTrialPeriod' from JSON`,
  );
}

/** @internal */
export const GetTransactionsUnitPrice$inboundSchema: z.ZodType<
  GetTransactionsUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type GetTransactionsUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const GetTransactionsUnitPrice$outboundSchema: z.ZodType<
  GetTransactionsUnitPrice$Outbound,
  z.ZodTypeDef,
  GetTransactionsUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsUnitPrice$ {
  /** @deprecated use `GetTransactionsUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsUnitPrice$inboundSchema;
  /** @deprecated use `GetTransactionsUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsUnitPrice$outboundSchema;
  /** @deprecated use `GetTransactionsUnitPrice$Outbound` instead. */
  export type Outbound = GetTransactionsUnitPrice$Outbound;
}

export function getTransactionsUnitPriceToJSON(
  getTransactionsUnitPrice: GetTransactionsUnitPrice,
): string {
  return JSON.stringify(
    GetTransactionsUnitPrice$outboundSchema.parse(getTransactionsUnitPrice),
  );
}

export function getTransactionsUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus
  > =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema:
  z.ZodType<
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound =
  {};

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema:
  z.ZodType<
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$ {
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound` instead. */
  export type Outbound =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound;
}

export function getTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomDataToJSON(
  getTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData:
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData,
): string {
  return JSON.stringify(
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema
      .parse(
        getTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData,
      ),
  );
}

export function getTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionsPrice$inboundSchema: z.ZodType<
  GetTransactionsPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetTransactionsTransactionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => GetTransactionsBillingCycle$inboundSchema),
  trial_period: z.lazy(() => GetTransactionsTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => GetTransactionsUnitPrice$inboundSchema),
  status:
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema,
  custom_data: z.lazy(() =>
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetTransactionsPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: GetTransactionsBillingCycle$Outbound;
  trial_period: GetTransactionsTrialPeriod$Outbound;
  unit_price: GetTransactionsUnitPrice$Outbound;
  status: string;
  custom_data?:
    | GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetTransactionsPrice$outboundSchema: z.ZodType<
  GetTransactionsPrice$Outbound,
  z.ZodTypeDef,
  GetTransactionsPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetTransactionsTransactionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => GetTransactionsBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => GetTransactionsTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => GetTransactionsUnitPrice$outboundSchema),
  status:
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema,
  customData: z.lazy(() =>
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsPrice$ {
  /** @deprecated use `GetTransactionsPrice$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsPrice$inboundSchema;
  /** @deprecated use `GetTransactionsPrice$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsPrice$outboundSchema;
  /** @deprecated use `GetTransactionsPrice$Outbound` instead. */
  export type Outbound = GetTransactionsPrice$Outbound;
}

export function getTransactionsPriceToJSON(
  getTransactionsPrice: GetTransactionsPrice,
): string {
  return JSON.stringify(
    GetTransactionsPrice$outboundSchema.parse(getTransactionsPrice),
  );
}

export function getTransactionsPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsPrice' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus
  > = z.nativeEnum(
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus,
  );

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus
  > =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$ {
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$outboundSchema;
}

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema:
  z.ZodType<
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound =
  {};

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema:
  z.ZodType<
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponse200ApplicationJSONCustomData$ {
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound` instead. */
  export type Outbound =
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound;
}

export function getTransactionsTransactionsResponse200ApplicationJSONCustomDataToJSON(
  getTransactionsTransactionsResponse200ApplicationJSONCustomData:
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData,
): string {
  return JSON.stringify(
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema
      .parse(getTransactionsTransactionsResponse200ApplicationJSONCustomData),
  );
}

export function getTransactionsTransactionsResponse200ApplicationJSONCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsTransactionsResponse200ApplicationJSONCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsTransactionsResponse200ApplicationJSONCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionsProduct$inboundSchema: z.ZodType<
  GetTransactionsProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  custom_data: z.lazy(() =>
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type GetTransactionsProduct$Outbound = {
  id: string;
  name: string;
  description: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  custom_data:
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound;
};

/** @internal */
export const GetTransactionsProduct$outboundSchema: z.ZodType<
  GetTransactionsProduct$Outbound,
  z.ZodTypeDef,
  GetTransactionsProduct
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    GetTransactionsTransactionsResponse200ApplicationJSONResponseBodyDataStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  customData: z.lazy(() =>
    GetTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsProduct$ {
  /** @deprecated use `GetTransactionsProduct$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsProduct$inboundSchema;
  /** @deprecated use `GetTransactionsProduct$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsProduct$outboundSchema;
  /** @deprecated use `GetTransactionsProduct$Outbound` instead. */
  export type Outbound = GetTransactionsProduct$Outbound;
}

export function getTransactionsProductToJSON(
  getTransactionsProduct: GetTransactionsProduct,
): string {
  return JSON.stringify(
    GetTransactionsProduct$outboundSchema.parse(getTransactionsProduct),
  );
}

export function getTransactionsProductFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsProduct' from JSON`,
  );
}

/** @internal */
export const GetTransactionsItems$inboundSchema: z.ZodType<
  GetTransactionsItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.lazy(() => GetTransactionsPrice$inboundSchema),
  quantity: z.number(),
  product: z.lazy(() => GetTransactionsProduct$inboundSchema),
});

/** @internal */
export type GetTransactionsItems$Outbound = {
  price: GetTransactionsPrice$Outbound;
  quantity: number;
  product: GetTransactionsProduct$Outbound;
};

/** @internal */
export const GetTransactionsItems$outboundSchema: z.ZodType<
  GetTransactionsItems$Outbound,
  z.ZodTypeDef,
  GetTransactionsItems
> = z.object({
  price: z.lazy(() => GetTransactionsPrice$outboundSchema),
  quantity: z.number(),
  product: z.lazy(() => GetTransactionsProduct$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsItems$ {
  /** @deprecated use `GetTransactionsItems$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsItems$inboundSchema;
  /** @deprecated use `GetTransactionsItems$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsItems$outboundSchema;
  /** @deprecated use `GetTransactionsItems$Outbound` instead. */
  export type Outbound = GetTransactionsItems$Outbound;
}

export function getTransactionsItemsToJSON(
  getTransactionsItems: GetTransactionsItems,
): string {
  return JSON.stringify(
    GetTransactionsItems$outboundSchema.parse(getTransactionsItems),
  );
}

export function getTransactionsItemsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsItems' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsTransactionsStatus
> = z.nativeEnum(GetTransactionsTransactionsStatus);

/** @internal */
export const GetTransactionsTransactionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsTransactionsStatus
> = GetTransactionsTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsStatus$ {
  /** @deprecated use `GetTransactionsTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsTransactionsStatus$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsStatus$outboundSchema;
}

/** @internal */
export const GetTransactionsPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsPaymentMethod
> = z.nativeEnum(GetTransactionsPaymentMethod);

/** @internal */
export const GetTransactionsPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsPaymentMethod
> = GetTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsPaymentMethod$ {
  /** @deprecated use `GetTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `GetTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const GetTransactionsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsProvider
> = z.nativeEnum(GetTransactionsProvider);

/** @internal */
export const GetTransactionsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsProvider
> = GetTransactionsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsProvider$ {
  /** @deprecated use `GetTransactionsProvider$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsProvider$inboundSchema;
  /** @deprecated use `GetTransactionsProvider$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsProvider$outboundSchema;
}

/** @internal */
export const GetTransactionsProviderMetadata$inboundSchema: z.ZodType<
  GetTransactionsProviderMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetTransactionsProviderMetadata$Outbound = {};

/** @internal */
export const GetTransactionsProviderMetadata$outboundSchema: z.ZodType<
  GetTransactionsProviderMetadata$Outbound,
  z.ZodTypeDef,
  GetTransactionsProviderMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsProviderMetadata$ {
  /** @deprecated use `GetTransactionsProviderMetadata$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsProviderMetadata$inboundSchema;
  /** @deprecated use `GetTransactionsProviderMetadata$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsProviderMetadata$outboundSchema;
  /** @deprecated use `GetTransactionsProviderMetadata$Outbound` instead. */
  export type Outbound = GetTransactionsProviderMetadata$Outbound;
}

export function getTransactionsProviderMetadataToJSON(
  getTransactionsProviderMetadata: GetTransactionsProviderMetadata,
): string {
  return JSON.stringify(
    GetTransactionsProviderMetadata$outboundSchema.parse(
      getTransactionsProviderMetadata,
    ),
  );
}

export function getTransactionsProviderMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsProviderMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsProviderMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsProviderMetadata' from JSON`,
  );
}

/** @internal */
export const GetTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsMethodDetailsTransactionsPaymentMethod
  > = z.nativeEnum(GetTransactionsMethodDetailsTransactionsPaymentMethod);

/** @internal */
export const GetTransactionsMethodDetailsTransactionsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsMethodDetailsTransactionsPaymentMethod
  > = GetTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetailsTransactionsPaymentMethod$ {
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsMethodDetailsTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const GetTransactionsMethodDetailsTransactionsDetails$inboundSchema:
  z.ZodType<
    GetTransactionsMethodDetailsTransactionsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bank_name: z.string(),
    bank_reference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "bank_name": "bankName",
      "bank_reference": "bankReference",
    });
  });

/** @internal */
export type GetTransactionsMethodDetailsTransactionsDetails$Outbound = {
  bank_name: string;
  bank_reference: string;
};

/** @internal */
export const GetTransactionsMethodDetailsTransactionsDetails$outboundSchema:
  z.ZodType<
    GetTransactionsMethodDetailsTransactionsDetails$Outbound,
    z.ZodTypeDef,
    GetTransactionsMethodDetailsTransactionsDetails
  > = z.object({
    bankName: z.string(),
    bankReference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bankName: "bank_name",
      bankReference: "bank_reference",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetailsTransactionsDetails$ {
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsMethodDetailsTransactionsDetails$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsMethodDetailsTransactionsDetails$outboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsDetails$Outbound` instead. */
  export type Outbound =
    GetTransactionsMethodDetailsTransactionsDetails$Outbound;
}

export function getTransactionsMethodDetailsTransactionsDetailsToJSON(
  getTransactionsMethodDetailsTransactionsDetails:
    GetTransactionsMethodDetailsTransactionsDetails,
): string {
  return JSON.stringify(
    GetTransactionsMethodDetailsTransactionsDetails$outboundSchema.parse(
      getTransactionsMethodDetailsTransactionsDetails,
    ),
  );
}

export function getTransactionsMethodDetailsTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsMethodDetailsTransactionsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsMethodDetailsTransactionsDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionsMethodDetailsTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionsMethodDetails3$inboundSchema: z.ZodType<
  GetTransactionsMethodDetails3,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    GetTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema,
  details: z.lazy(() =>
    GetTransactionsMethodDetailsTransactionsDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type GetTransactionsMethodDetails3$Outbound = {
  payment_method: string;
  details: GetTransactionsMethodDetailsTransactionsDetails$Outbound;
};

/** @internal */
export const GetTransactionsMethodDetails3$outboundSchema: z.ZodType<
  GetTransactionsMethodDetails3$Outbound,
  z.ZodTypeDef,
  GetTransactionsMethodDetails3
> = z.object({
  paymentMethod:
    GetTransactionsMethodDetailsTransactionsPaymentMethod$outboundSchema,
  details: z.lazy(() =>
    GetTransactionsMethodDetailsTransactionsDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetails3$ {
  /** @deprecated use `GetTransactionsMethodDetails3$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsMethodDetails3$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetails3$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsMethodDetails3$outboundSchema;
  /** @deprecated use `GetTransactionsMethodDetails3$Outbound` instead. */
  export type Outbound = GetTransactionsMethodDetails3$Outbound;
}

export function getTransactionsMethodDetails3ToJSON(
  getTransactionsMethodDetails3: GetTransactionsMethodDetails3,
): string {
  return JSON.stringify(
    GetTransactionsMethodDetails3$outboundSchema.parse(
      getTransactionsMethodDetails3,
    ),
  );
}

export function getTransactionsMethodDetails3FromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsMethodDetails3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsMethodDetails3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsMethodDetails3' from JSON`,
  );
}

/** @internal */
export const GetTransactionsMethodDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof GetTransactionsMethodDetailsPaymentMethod> = z
    .nativeEnum(GetTransactionsMethodDetailsPaymentMethod);

/** @internal */
export const GetTransactionsMethodDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionsMethodDetailsPaymentMethod> =
    GetTransactionsMethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetailsPaymentMethod$ {
  /** @deprecated use `GetTransactionsMethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsMethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsMethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const GetTransactionsMethodDetailsDetails$inboundSchema: z.ZodType<
  GetTransactionsMethodDetailsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  last4: z.string(),
  brand: z.string(),
  exp_month: z.number(),
  exp_year: z.number(),
  cardholder_name: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "exp_month": "expMonth",
    "exp_year": "expYear",
    "cardholder_name": "cardholderName",
  });
});

/** @internal */
export type GetTransactionsMethodDetailsDetails$Outbound = {
  last4: string;
  brand: string;
  exp_month: number;
  exp_year: number;
  cardholder_name: string | null;
};

/** @internal */
export const GetTransactionsMethodDetailsDetails$outboundSchema: z.ZodType<
  GetTransactionsMethodDetailsDetails$Outbound,
  z.ZodTypeDef,
  GetTransactionsMethodDetailsDetails
> = z.object({
  last4: z.string(),
  brand: z.string(),
  expMonth: z.number(),
  expYear: z.number(),
  cardholderName: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    expMonth: "exp_month",
    expYear: "exp_year",
    cardholderName: "cardholder_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetailsDetails$ {
  /** @deprecated use `GetTransactionsMethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsMethodDetailsDetails$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsMethodDetailsDetails$outboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsDetails$Outbound` instead. */
  export type Outbound = GetTransactionsMethodDetailsDetails$Outbound;
}

export function getTransactionsMethodDetailsDetailsToJSON(
  getTransactionsMethodDetailsDetails: GetTransactionsMethodDetailsDetails,
): string {
  return JSON.stringify(
    GetTransactionsMethodDetailsDetails$outboundSchema.parse(
      getTransactionsMethodDetailsDetails,
    ),
  );
}

export function getTransactionsMethodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsMethodDetailsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsMethodDetailsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsMethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionsMethodDetails2$inboundSchema: z.ZodType<
  GetTransactionsMethodDetails2,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method: GetTransactionsMethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() => GetTransactionsMethodDetailsDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type GetTransactionsMethodDetails2$Outbound = {
  payment_method: string;
  details: GetTransactionsMethodDetailsDetails$Outbound;
};

/** @internal */
export const GetTransactionsMethodDetails2$outboundSchema: z.ZodType<
  GetTransactionsMethodDetails2$Outbound,
  z.ZodTypeDef,
  GetTransactionsMethodDetails2
> = z.object({
  paymentMethod: GetTransactionsMethodDetailsPaymentMethod$outboundSchema,
  details: z.lazy(() => GetTransactionsMethodDetailsDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetails2$ {
  /** @deprecated use `GetTransactionsMethodDetails2$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsMethodDetails2$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetails2$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsMethodDetails2$outboundSchema;
  /** @deprecated use `GetTransactionsMethodDetails2$Outbound` instead. */
  export type Outbound = GetTransactionsMethodDetails2$Outbound;
}

export function getTransactionsMethodDetails2ToJSON(
  getTransactionsMethodDetails2: GetTransactionsMethodDetails2,
): string {
  return JSON.stringify(
    GetTransactionsMethodDetails2$outboundSchema.parse(
      getTransactionsMethodDetails2,
    ),
  );
}

export function getTransactionsMethodDetails2FromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsMethodDetails2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsMethodDetails2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsMethodDetails2' from JSON`,
  );
}

/** @internal */
export const GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsMethodDetailsTransactionsResponsePaymentMethod
  > = z.nativeEnum(
    GetTransactionsMethodDetailsTransactionsResponsePaymentMethod,
  );

/** @internal */
export const GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsMethodDetailsTransactionsResponsePaymentMethod
  > =
    GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$ {
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$outboundSchema;
}

/** @internal */
export const GetTransactionsMethodDetailsTransactionsResponseDetails$inboundSchema:
  z.ZodType<
    GetTransactionsMethodDetailsTransactionsResponseDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    network: z.string(),
    phone_suffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "phone_suffix": "phoneSuffix",
    });
  });

/** @internal */
export type GetTransactionsMethodDetailsTransactionsResponseDetails$Outbound = {
  network: string;
  phone_suffix: string;
};

/** @internal */
export const GetTransactionsMethodDetailsTransactionsResponseDetails$outboundSchema:
  z.ZodType<
    GetTransactionsMethodDetailsTransactionsResponseDetails$Outbound,
    z.ZodTypeDef,
    GetTransactionsMethodDetailsTransactionsResponseDetails
  > = z.object({
    network: z.string(),
    phoneSuffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      phoneSuffix: "phone_suffix",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetailsTransactionsResponseDetails$ {
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsResponseDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsMethodDetailsTransactionsResponseDetails$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsResponseDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsMethodDetailsTransactionsResponseDetails$outboundSchema;
  /** @deprecated use `GetTransactionsMethodDetailsTransactionsResponseDetails$Outbound` instead. */
  export type Outbound =
    GetTransactionsMethodDetailsTransactionsResponseDetails$Outbound;
}

export function getTransactionsMethodDetailsTransactionsResponseDetailsToJSON(
  getTransactionsMethodDetailsTransactionsResponseDetails:
    GetTransactionsMethodDetailsTransactionsResponseDetails,
): string {
  return JSON.stringify(
    GetTransactionsMethodDetailsTransactionsResponseDetails$outboundSchema
      .parse(getTransactionsMethodDetailsTransactionsResponseDetails),
  );
}

export function getTransactionsMethodDetailsTransactionsResponseDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsMethodDetailsTransactionsResponseDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsMethodDetailsTransactionsResponseDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsMethodDetailsTransactionsResponseDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionsMethodDetails1$inboundSchema: z.ZodType<
  GetTransactionsMethodDetails1,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$inboundSchema,
  details: z.lazy(() =>
    GetTransactionsMethodDetailsTransactionsResponseDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type GetTransactionsMethodDetails1$Outbound = {
  payment_method: string;
  details: GetTransactionsMethodDetailsTransactionsResponseDetails$Outbound;
};

/** @internal */
export const GetTransactionsMethodDetails1$outboundSchema: z.ZodType<
  GetTransactionsMethodDetails1$Outbound,
  z.ZodTypeDef,
  GetTransactionsMethodDetails1
> = z.object({
  paymentMethod:
    GetTransactionsMethodDetailsTransactionsResponsePaymentMethod$outboundSchema,
  details: z.lazy(() =>
    GetTransactionsMethodDetailsTransactionsResponseDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetails1$ {
  /** @deprecated use `GetTransactionsMethodDetails1$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsMethodDetails1$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetails1$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsMethodDetails1$outboundSchema;
  /** @deprecated use `GetTransactionsMethodDetails1$Outbound` instead. */
  export type Outbound = GetTransactionsMethodDetails1$Outbound;
}

export function getTransactionsMethodDetails1ToJSON(
  getTransactionsMethodDetails1: GetTransactionsMethodDetails1,
): string {
  return JSON.stringify(
    GetTransactionsMethodDetails1$outboundSchema.parse(
      getTransactionsMethodDetails1,
    ),
  );
}

export function getTransactionsMethodDetails1FromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsMethodDetails1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsMethodDetails1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsMethodDetails1' from JSON`,
  );
}

/** @internal */
export const GetTransactionsMethodDetails$inboundSchema: z.ZodType<
  GetTransactionsMethodDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetTransactionsMethodDetails1$inboundSchema),
  z.lazy(() => GetTransactionsMethodDetails2$inboundSchema),
  z.lazy(() => GetTransactionsMethodDetails3$inboundSchema),
]);

/** @internal */
export type GetTransactionsMethodDetails$Outbound =
  | GetTransactionsMethodDetails1$Outbound
  | GetTransactionsMethodDetails2$Outbound
  | GetTransactionsMethodDetails3$Outbound;

/** @internal */
export const GetTransactionsMethodDetails$outboundSchema: z.ZodType<
  GetTransactionsMethodDetails$Outbound,
  z.ZodTypeDef,
  GetTransactionsMethodDetails
> = z.union([
  z.lazy(() => GetTransactionsMethodDetails1$outboundSchema),
  z.lazy(() => GetTransactionsMethodDetails2$outboundSchema),
  z.lazy(() => GetTransactionsMethodDetails3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsMethodDetails$ {
  /** @deprecated use `GetTransactionsMethodDetails$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsMethodDetails$inboundSchema;
  /** @deprecated use `GetTransactionsMethodDetails$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsMethodDetails$outboundSchema;
  /** @deprecated use `GetTransactionsMethodDetails$Outbound` instead. */
  export type Outbound = GetTransactionsMethodDetails$Outbound;
}

export function getTransactionsMethodDetailsToJSON(
  getTransactionsMethodDetails: GetTransactionsMethodDetails,
): string {
  return JSON.stringify(
    GetTransactionsMethodDetails$outboundSchema.parse(
      getTransactionsMethodDetails,
    ),
  );
}

export function getTransactionsMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsMethodDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsMethodDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsMethodDetails' from JSON`,
  );
}

/** @internal */
export const GetTransactionsPayments$inboundSchema: z.ZodType<
  GetTransactionsPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: GetTransactionsTransactionsStatus$inboundSchema,
  payment_method: GetTransactionsPaymentMethod$inboundSchema,
  provider: GetTransactionsProvider$inboundSchema,
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  provider_reference: z.nullable(z.string()),
  provider_metadata: z.lazy(() =>
    GetTransactionsProviderMetadata$inboundSchema
  ),
  method_details: z.union([
    z.lazy(() => GetTransactionsMethodDetails1$inboundSchema),
    z.lazy(() => GetTransactionsMethodDetails2$inboundSchema),
    z.lazy(() => GetTransactionsMethodDetails3$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "provider_reference": "providerReference",
    "provider_metadata": "providerMetadata",
    "method_details": "methodDetails",
  });
});

/** @internal */
export type GetTransactionsPayments$Outbound = {
  id: string;
  status: string;
  payment_method: string;
  provider: string;
  created_at: string;
  updated_at?: string | null | undefined;
  provider_reference: string | null;
  provider_metadata: GetTransactionsProviderMetadata$Outbound;
  method_details:
    | GetTransactionsMethodDetails1$Outbound
    | GetTransactionsMethodDetails2$Outbound
    | GetTransactionsMethodDetails3$Outbound;
};

/** @internal */
export const GetTransactionsPayments$outboundSchema: z.ZodType<
  GetTransactionsPayments$Outbound,
  z.ZodTypeDef,
  GetTransactionsPayments
> = z.object({
  id: z.string(),
  status: GetTransactionsTransactionsStatus$outboundSchema,
  paymentMethod: GetTransactionsPaymentMethod$outboundSchema,
  provider: GetTransactionsProvider$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  providerReference: z.nullable(z.string()),
  providerMetadata: z.lazy(() =>
    GetTransactionsProviderMetadata$outboundSchema
  ),
  methodDetails: z.union([
    z.lazy(() => GetTransactionsMethodDetails1$outboundSchema),
    z.lazy(() => GetTransactionsMethodDetails2$outboundSchema),
    z.lazy(() => GetTransactionsMethodDetails3$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    createdAt: "created_at",
    updatedAt: "updated_at",
    providerReference: "provider_reference",
    providerMetadata: "provider_metadata",
    methodDetails: "method_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsPayments$ {
  /** @deprecated use `GetTransactionsPayments$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsPayments$inboundSchema;
  /** @deprecated use `GetTransactionsPayments$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsPayments$outboundSchema;
  /** @deprecated use `GetTransactionsPayments$Outbound` instead. */
  export type Outbound = GetTransactionsPayments$Outbound;
}

export function getTransactionsPaymentsToJSON(
  getTransactionsPayments: GetTransactionsPayments,
): string {
  return JSON.stringify(
    GetTransactionsPayments$outboundSchema.parse(getTransactionsPayments),
  );
}

export function getTransactionsPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsPayments' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetTransactionsTransactionsResponseStatus> = z
    .nativeEnum(GetTransactionsTransactionsResponseStatus);

/** @internal */
export const GetTransactionsTransactionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionsTransactionsResponseStatus> =
    GetTransactionsTransactionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponseStatus$ {
  /** @deprecated use `GetTransactionsTransactionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponseStatus$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponseStatus$outboundSchema;
}

/** @internal */
export const GetTransactionsTransactionsCustomData$inboundSchema: z.ZodType<
  GetTransactionsTransactionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetTransactionsTransactionsCustomData$Outbound = {};

/** @internal */
export const GetTransactionsTransactionsCustomData$outboundSchema: z.ZodType<
  GetTransactionsTransactionsCustomData$Outbound,
  z.ZodTypeDef,
  GetTransactionsTransactionsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsCustomData$ {
  /** @deprecated use `GetTransactionsTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsCustomData$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsCustomData$outboundSchema;
  /** @deprecated use `GetTransactionsTransactionsCustomData$Outbound` instead. */
  export type Outbound = GetTransactionsTransactionsCustomData$Outbound;
}

export function getTransactionsTransactionsCustomDataToJSON(
  getTransactionsTransactionsCustomData: GetTransactionsTransactionsCustomData,
): string {
  return JSON.stringify(
    GetTransactionsTransactionsCustomData$outboundSchema.parse(
      getTransactionsTransactionsCustomData,
    ),
  );
}

export function getTransactionsTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsTransactionsCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsTransactionsCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionsCustomer$inboundSchema: z.ZodType<
  GetTransactionsCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(GetTransactionsTransactionsResponseStatus$inboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    GetTransactionsTransactionsCustomData$inboundSchema
  ),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetTransactionsCustomer$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  custom_data: GetTransactionsTransactionsCustomData$Outbound;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetTransactionsCustomer$outboundSchema: z.ZodType<
  GetTransactionsCustomer$Outbound,
  z.ZodTypeDef,
  GetTransactionsCustomer
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(GetTransactionsTransactionsResponseStatus$outboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    GetTransactionsTransactionsCustomData$outboundSchema
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsCustomer$ {
  /** @deprecated use `GetTransactionsCustomer$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsCustomer$inboundSchema;
  /** @deprecated use `GetTransactionsCustomer$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsCustomer$outboundSchema;
  /** @deprecated use `GetTransactionsCustomer$Outbound` instead. */
  export type Outbound = GetTransactionsCustomer$Outbound;
}

export function getTransactionsCustomerToJSON(
  getTransactionsCustomer: GetTransactionsCustomer,
): string {
  return JSON.stringify(
    GetTransactionsCustomer$outboundSchema.parse(getTransactionsCustomer),
  );
}

export function getTransactionsCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsCustomer' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsResponseCustomData$inboundSchema:
  z.ZodType<
    GetTransactionsTransactionsResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionsTransactionsResponseCustomData$Outbound = {};

/** @internal */
export const GetTransactionsTransactionsResponseCustomData$outboundSchema:
  z.ZodType<
    GetTransactionsTransactionsResponseCustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionsTransactionsResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponseCustomData$ {
  /** @deprecated use `GetTransactionsTransactionsResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponseCustomData$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponseCustomData$outboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponseCustomData$Outbound` instead. */
  export type Outbound = GetTransactionsTransactionsResponseCustomData$Outbound;
}

export function getTransactionsTransactionsResponseCustomDataToJSON(
  getTransactionsTransactionsResponseCustomData:
    GetTransactionsTransactionsResponseCustomData,
): string {
  return JSON.stringify(
    GetTransactionsTransactionsResponseCustomData$outboundSchema.parse(
      getTransactionsTransactionsResponseCustomData,
    ),
  );
}

export function getTransactionsTransactionsResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsTransactionsResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsTransactionsResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionsTransactionsResponseCustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof GetTransactionsTransactionsResponse200Status> = z
    .nativeEnum(GetTransactionsTransactionsResponse200Status);

/** @internal */
export const GetTransactionsTransactionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof GetTransactionsTransactionsResponse200Status> =
    GetTransactionsTransactionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponse200Status$ {
  /** @deprecated use `GetTransactionsTransactionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponse200Status$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponse200Status$outboundSchema;
}

/** @internal */
export const GetTransactionsAddress$inboundSchema: z.ZodType<
  GetTransactionsAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  first_line: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    GetTransactionsTransactionsResponseCustomData$inboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(GetTransactionsTransactionsResponse200Status$inboundSchema)
    .optional(),
  created_at: z.string(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_line": "firstLine",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type GetTransactionsAddress$Outbound = {
  id: string;
  description?: string | null | undefined;
  first_line?: string | null | undefined;
  custom_data: GetTransactionsTransactionsResponseCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | null | undefined;
  created_at: string;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const GetTransactionsAddress$outboundSchema: z.ZodType<
  GetTransactionsAddress$Outbound,
  z.ZodTypeDef,
  GetTransactionsAddress
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    GetTransactionsTransactionsResponseCustomData$outboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(
    GetTransactionsTransactionsResponse200Status$outboundSchema,
  ).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstLine: "first_line",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsAddress$ {
  /** @deprecated use `GetTransactionsAddress$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsAddress$inboundSchema;
  /** @deprecated use `GetTransactionsAddress$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsAddress$outboundSchema;
  /** @deprecated use `GetTransactionsAddress$Outbound` instead. */
  export type Outbound = GetTransactionsAddress$Outbound;
}

export function getTransactionsAddressToJSON(
  getTransactionsAddress: GetTransactionsAddress,
): string {
  return JSON.stringify(
    GetTransactionsAddress$outboundSchema.parse(getTransactionsAddress),
  );
}

export function getTransactionsAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsAddress' from JSON`,
  );
}

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(GetTransactionsTransactionsResponse200ApplicationJSONStatus);

/** @internal */
export const GetTransactionsTransactionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetTransactionsTransactionsResponse200ApplicationJSONStatus
  > = GetTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const GetTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsType
> = z.nativeEnum(GetTransactionsType);

/** @internal */
export const GetTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsType
> = GetTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsType$ {
  /** @deprecated use `GetTransactionsType$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsType$inboundSchema;
  /** @deprecated use `GetTransactionsType$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsType$outboundSchema;
}

/** @internal */
export const GetTransactionsTransactionsResponse200CustomData$inboundSchema:
  z.ZodType<
    GetTransactionsTransactionsResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetTransactionsTransactionsResponse200CustomData$Outbound = {};

/** @internal */
export const GetTransactionsTransactionsResponse200CustomData$outboundSchema:
  z.ZodType<
    GetTransactionsTransactionsResponse200CustomData$Outbound,
    z.ZodTypeDef,
    GetTransactionsTransactionsResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsTransactionsResponse200CustomData$ {
  /** @deprecated use `GetTransactionsTransactionsResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsTransactionsResponse200CustomData$inboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsTransactionsResponse200CustomData$outboundSchema;
  /** @deprecated use `GetTransactionsTransactionsResponse200CustomData$Outbound` instead. */
  export type Outbound =
    GetTransactionsTransactionsResponse200CustomData$Outbound;
}

export function getTransactionsTransactionsResponse200CustomDataToJSON(
  getTransactionsTransactionsResponse200CustomData:
    GetTransactionsTransactionsResponse200CustomData,
): string {
  return JSON.stringify(
    GetTransactionsTransactionsResponse200CustomData$outboundSchema.parse(
      getTransactionsTransactionsResponse200CustomData,
    ),
  );
}

export function getTransactionsTransactionsResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsTransactionsResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsTransactionsResponse200CustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionsTransactionsResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const GetTransactionsDiscount$inboundSchema: z.ZodType<
  GetTransactionsDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(
    GetTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: GetTransactionsType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    GetTransactionsTransactionsResponse200CustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type GetTransactionsDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data: GetTransactionsTransactionsResponse200CustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const GetTransactionsDiscount$outboundSchema: z.ZodType<
  GetTransactionsDiscount$Outbound,
  z.ZodTypeDef,
  GetTransactionsDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(
    GetTransactionsTransactionsResponse200ApplicationJSONStatus$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: GetTransactionsType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    GetTransactionsTransactionsResponse200CustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsDiscount$ {
  /** @deprecated use `GetTransactionsDiscount$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsDiscount$inboundSchema;
  /** @deprecated use `GetTransactionsDiscount$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsDiscount$outboundSchema;
  /** @deprecated use `GetTransactionsDiscount$Outbound` instead. */
  export type Outbound = GetTransactionsDiscount$Outbound;
}

export function getTransactionsDiscountToJSON(
  getTransactionsDiscount: GetTransactionsDiscount,
): string {
  return JSON.stringify(
    GetTransactionsDiscount$outboundSchema.parse(getTransactionsDiscount),
  );
}

export function getTransactionsDiscountFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsDiscount' from JSON`,
  );
}

/** @internal */
export const GetTransactionsData$inboundSchema: z.ZodType<
  GetTransactionsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: GetTransactionsStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(GetTransactionsCollectionMode$inboundSchema)
    .optional(),
  custom_data: z.lazy(() => GetTransactionsCustomData$inboundSchema).optional(),
  current_billing_period: z.lazy(() =>
    GetTransactionsCurrentBillingPeriod$inboundSchema
  ).optional(),
  details: z.lazy(() => GetTransactionsDetails$inboundSchema),
  items: z.array(z.lazy(() => GetTransactionsItems$inboundSchema)),
  payments: z.lazy(() => GetTransactionsPayments$inboundSchema),
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  customer: z.lazy(() => GetTransactionsCustomer$inboundSchema),
  address: z.lazy(() => GetTransactionsAddress$inboundSchema),
  discount: z.nullable(z.lazy(() => GetTransactionsDiscount$inboundSchema))
    .optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type GetTransactionsData$Outbound = {
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: GetTransactionsCustomData$Outbound | undefined;
  current_billing_period?:
    | GetTransactionsCurrentBillingPeriod$Outbound
    | undefined;
  details: GetTransactionsDetails$Outbound;
  items: Array<GetTransactionsItems$Outbound>;
  payments: GetTransactionsPayments$Outbound;
  created_at: string;
  updated_at?: string | null | undefined;
  customer: GetTransactionsCustomer$Outbound;
  address: GetTransactionsAddress$Outbound;
  discount?: GetTransactionsDiscount$Outbound | null | undefined;
  invoice_id: string;
};

/** @internal */
export const GetTransactionsData$outboundSchema: z.ZodType<
  GetTransactionsData$Outbound,
  z.ZodTypeDef,
  GetTransactionsData
> = z.object({
  status: GetTransactionsStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(GetTransactionsCollectionMode$outboundSchema)
    .optional(),
  customData: z.lazy(() => GetTransactionsCustomData$outboundSchema).optional(),
  currentBillingPeriod: z.lazy(() =>
    GetTransactionsCurrentBillingPeriod$outboundSchema
  ).optional(),
  details: z.lazy(() => GetTransactionsDetails$outboundSchema),
  items: z.array(z.lazy(() => GetTransactionsItems$outboundSchema)),
  payments: z.lazy(() => GetTransactionsPayments$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  customer: z.lazy(() => GetTransactionsCustomer$outboundSchema),
  address: z.lazy(() => GetTransactionsAddress$outboundSchema),
  discount: z.nullable(z.lazy(() => GetTransactionsDiscount$outboundSchema))
    .optional(),
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
    createdAt: "created_at",
    updatedAt: "updated_at",
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsData$ {
  /** @deprecated use `GetTransactionsData$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsData$inboundSchema;
  /** @deprecated use `GetTransactionsData$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsData$outboundSchema;
  /** @deprecated use `GetTransactionsData$Outbound` instead. */
  export type Outbound = GetTransactionsData$Outbound;
}

export function getTransactionsDataToJSON(
  getTransactionsData: GetTransactionsData,
): string {
  return JSON.stringify(
    GetTransactionsData$outboundSchema.parse(getTransactionsData),
  );
}

export function getTransactionsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsData' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    total: z.number(),
    per_page: z.number(),
    next_cursor: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "per_page": "perPage",
      "next_cursor": "nextCursor",
    });
  });

/** @internal */
export type Meta$Outbound = {
  total: number;
  per_page: number;
  next_cursor: string;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    total: z.number(),
    perPage: z.number(),
    nextCursor: z.string(),
  }).transform((v) => {
    return remap$(v, {
      perPage: "per_page",
      nextCursor: "next_cursor",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const GetTransactionsResponseBody$inboundSchema: z.ZodType<
  GetTransactionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetTransactionsData$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema),
});

/** @internal */
export type GetTransactionsResponseBody$Outbound = {
  data: Array<GetTransactionsData$Outbound>;
  meta: Meta$Outbound;
};

/** @internal */
export const GetTransactionsResponseBody$outboundSchema: z.ZodType<
  GetTransactionsResponseBody$Outbound,
  z.ZodTypeDef,
  GetTransactionsResponseBody
> = z.object({
  data: z.array(z.lazy(() => GetTransactionsData$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsResponseBody$ {
  /** @deprecated use `GetTransactionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsResponseBody$inboundSchema;
  /** @deprecated use `GetTransactionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsResponseBody$outboundSchema;
  /** @deprecated use `GetTransactionsResponseBody$Outbound` instead. */
  export type Outbound = GetTransactionsResponseBody$Outbound;
}

export function getTransactionsResponseBodyToJSON(
  getTransactionsResponseBody: GetTransactionsResponseBody,
): string {
  return JSON.stringify(
    GetTransactionsResponseBody$outboundSchema.parse(
      getTransactionsResponseBody,
    ),
  );
}

export function getTransactionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsResponseBody' from JSON`,
  );
}
