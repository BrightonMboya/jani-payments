/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type CollectionMode = ClosedEnum<typeof CollectionMode>;

export const SubscriptionUpdateSubscriptionEffectiveFrom = {
  Immediately: "immediately",
  NextBillingPeriod: "next_billing_period",
} as const;
export type SubscriptionUpdateSubscriptionEffectiveFrom = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionEffectiveFrom
>;

export type Discount = {
  id: string;
  effectiveFrom?: SubscriptionUpdateSubscriptionEffectiveFrom | undefined;
};

export const SubscriptionUpdateSubscriptionPaymentInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionUpdateSubscriptionPaymentInterval = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionPaymentInterval
>;

export type SubscriptionUpdateSubscriptionPaymentTerms = {
  paymentInterval: SubscriptionUpdateSubscriptionPaymentInterval;
  paymentFrequency: number;
};

export type SubscriptionUpdateSubscriptionBillingDetails = {
  paymentTerms?: SubscriptionUpdateSubscriptionPaymentTerms | null | undefined;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type CurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type SubscriptionUpdateSubscriptionItems = {
  priceId: string;
  quantity?: number | null | undefined;
};

/**
 * Any valid JSON value
 */
export type SubscriptionUpdateSubscriptionCustomData = {};

export type ManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export type SubscriptionUpdateSubscriptionRequestBody = {
  customerId?: string | null | undefined;
  addressId?: string | null | undefined;
  currencyCode?: string | null | undefined;
  nextBilledAt?: RFCDate | null | undefined;
  collectionMode?: CollectionMode | null | undefined;
  discount?: Discount | null | undefined;
  billingDetails: SubscriptionUpdateSubscriptionBillingDetails;
  currentBillingPeriod?: CurrentBillingPeriod | null | undefined;
  items: Array<SubscriptionUpdateSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionUpdateSubscriptionCustomData | undefined;
  managementUrls?: ManagementUrls | null | undefined;
};

export type SubscriptionUpdateSubscriptionRequest = {
  subscriptionId: string;
  requestBody: SubscriptionUpdateSubscriptionRequestBody;
};

export const SubscriptionUpdateSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionUpdateSubscriptionInterval = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionInterval
>;

export type SubscriptionUpdateSubscriptionSubscriptionPaymentTerms = {
  interval?: SubscriptionUpdateSubscriptionInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type SubscriptionUpdateSubscriptionSubscriptionBillingDetails = {
  paymentTerms: SubscriptionUpdateSubscriptionSubscriptionPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type SubscriptionUpdateSubscriptionCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type SubscriptionUpdateSubscriptionBillingCycle = {
  frequency: number;
  interval: string;
};

export const SubscriptionUpdateSubscriptionAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type SubscriptionUpdateSubscriptionAction = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionAction
>;

export const SubscriptionUpdateSubscriptionStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type SubscriptionUpdateSubscriptionStatus = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionStatus
>;

export type SubscriptionUpdateSubscriptionScheduledChange = {
  id: string;
  subscriptionId: string;
  action: SubscriptionUpdateSubscriptionAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: SubscriptionUpdateSubscriptionStatus;
};

export const SubscriptionUpdateSubscriptionSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type SubscriptionUpdateSubscriptionSubscriptionStatus = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionSubscriptionStatus
>;

export const SubscriptionUpdateSubscriptionSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type SubscriptionUpdateSubscriptionSubscriptionType = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionSubscriptionType
>;

export const SubscriptionUpdateSubscriptionSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionUpdateSubscriptionSubscriptionInterval = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionSubscriptionInterval
>;

export type SubscriptionUpdateSubscriptionSubscriptionBillingCycle = {
  interval: SubscriptionUpdateSubscriptionSubscriptionInterval;
  frequency: number;
};

export const SubscriptionUpdateSubscriptionSubscriptionResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionUpdateSubscriptionSubscriptionResponseInterval =
  ClosedEnum<typeof SubscriptionUpdateSubscriptionSubscriptionResponseInterval>;

export type SubscriptionUpdateSubscriptionTrialPeriod = {
  interval: SubscriptionUpdateSubscriptionSubscriptionResponseInterval;
  frequency: number;
};

export type SubscriptionUpdateSubscriptionUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const SubscriptionUpdateSubscriptionSubscriptionResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionUpdateSubscriptionSubscriptionResponse200Status =
  ClosedEnum<
    typeof SubscriptionUpdateSubscriptionSubscriptionResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData =
  {};

export type SubscriptionUpdateSubscriptionPrice = {
  productId: string;
  description?: string | null | undefined;
  type: SubscriptionUpdateSubscriptionSubscriptionType;
  name: string;
  billingCycle: SubscriptionUpdateSubscriptionSubscriptionBillingCycle;
  trialPeriod: SubscriptionUpdateSubscriptionTrialPeriod;
  unitPrice: SubscriptionUpdateSubscriptionUnitPrice;
  status: SubscriptionUpdateSubscriptionSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type SubscriptionUpdateSubscriptionSubscriptionItems = {
  status: SubscriptionUpdateSubscriptionSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: SubscriptionUpdateSubscriptionPrice;
};

/**
 * Any valid JSON value
 */
export type SubscriptionUpdateSubscriptionSubscriptionCustomData = {};

export type SubscriptionUpdateSubscriptionManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const SubscriptionUpdateSubscriptionSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionUpdateSubscriptionSubscriptionResponseStatus =
  ClosedEnum<typeof SubscriptionUpdateSubscriptionSubscriptionResponseStatus>;

export const SubscriptionUpdateSubscriptionType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type SubscriptionUpdateSubscriptionType = ClosedEnum<
  typeof SubscriptionUpdateSubscriptionType
>;

/**
 * Any valid JSON value
 */
export type SubscriptionUpdateSubscriptionSubscriptionResponseCustomData = {};

export type SubscriptionUpdateSubscriptionDiscount = {
  id: string;
  status: SubscriptionUpdateSubscriptionSubscriptionResponseStatus;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: SubscriptionUpdateSubscriptionType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: SubscriptionUpdateSubscriptionSubscriptionResponseCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type SubscriptionUpdateSubscriptionData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: SubscriptionUpdateSubscriptionSubscriptionBillingDetails;
  currentBillingPeriod: SubscriptionUpdateSubscriptionCurrentBillingPeriod;
  billingCycle: SubscriptionUpdateSubscriptionBillingCycle;
  scheduledChange: Array<SubscriptionUpdateSubscriptionScheduledChange>;
  items: Array<SubscriptionUpdateSubscriptionSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionUpdateSubscriptionSubscriptionCustomData | undefined;
  managementUrls: SubscriptionUpdateSubscriptionManagementUrls;
  discount?: SubscriptionUpdateSubscriptionDiscount | null | undefined;
};

/**
 * Updates a Subscription given its Id
 */
export type SubscriptionUpdateSubscriptionResponseBody = {
  data: SubscriptionUpdateSubscriptionData;
};

/** @internal */
export const CollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof CollectionMode
> = z.nativeEnum(CollectionMode);

/** @internal */
export const CollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof CollectionMode
> = CollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionMode$ {
  /** @deprecated use `CollectionMode$inboundSchema` instead. */
  export const inboundSchema = CollectionMode$inboundSchema;
  /** @deprecated use `CollectionMode$outboundSchema` instead. */
  export const outboundSchema = CollectionMode$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionEffectiveFrom$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionEffectiveFrom> = z
    .nativeEnum(SubscriptionUpdateSubscriptionEffectiveFrom);

/** @internal */
export const SubscriptionUpdateSubscriptionEffectiveFrom$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionEffectiveFrom> =
    SubscriptionUpdateSubscriptionEffectiveFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionEffectiveFrom$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionEffectiveFrom$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionEffectiveFrom$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionEffectiveFrom$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionEffectiveFrom$outboundSchema;
}

/** @internal */
export const Discount$inboundSchema: z.ZodType<
  Discount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  effective_from: SubscriptionUpdateSubscriptionEffectiveFrom$inboundSchema
    .default("next_billing_period"),
}).transform((v) => {
  return remap$(v, {
    "effective_from": "effectiveFrom",
  });
});

/** @internal */
export type Discount$Outbound = {
  id: string;
  effective_from: string;
};

/** @internal */
export const Discount$outboundSchema: z.ZodType<
  Discount$Outbound,
  z.ZodTypeDef,
  Discount
> = z.object({
  id: z.string(),
  effectiveFrom: SubscriptionUpdateSubscriptionEffectiveFrom$outboundSchema
    .default("next_billing_period"),
}).transform((v) => {
  return remap$(v, {
    effectiveFrom: "effective_from",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Discount$ {
  /** @deprecated use `Discount$inboundSchema` instead. */
  export const inboundSchema = Discount$inboundSchema;
  /** @deprecated use `Discount$outboundSchema` instead. */
  export const outboundSchema = Discount$outboundSchema;
  /** @deprecated use `Discount$Outbound` instead. */
  export type Outbound = Discount$Outbound;
}

export function discountToJSON(discount: Discount): string {
  return JSON.stringify(Discount$outboundSchema.parse(discount));
}

export function discountFromJSON(
  jsonString: string,
): SafeParseResult<Discount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Discount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Discount' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionPaymentInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionPaymentInterval> = z
    .nativeEnum(SubscriptionUpdateSubscriptionPaymentInterval);

/** @internal */
export const SubscriptionUpdateSubscriptionPaymentInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionPaymentInterval> =
    SubscriptionUpdateSubscriptionPaymentInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionPaymentInterval$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionPaymentInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionPaymentInterval$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionPaymentInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionPaymentInterval$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionPaymentTerms$inboundSchema:
  z.ZodType<SubscriptionUpdateSubscriptionPaymentTerms, z.ZodTypeDef, unknown> =
    z.object({
      payment_interval:
        SubscriptionUpdateSubscriptionPaymentInterval$inboundSchema,
      payment_frequency: z.number(),
    }).transform((v) => {
      return remap$(v, {
        "payment_interval": "paymentInterval",
        "payment_frequency": "paymentFrequency",
      });
    });

/** @internal */
export type SubscriptionUpdateSubscriptionPaymentTerms$Outbound = {
  payment_interval: string;
  payment_frequency: number;
};

/** @internal */
export const SubscriptionUpdateSubscriptionPaymentTerms$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionPaymentTerms$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionPaymentTerms
  > = z.object({
    paymentInterval:
      SubscriptionUpdateSubscriptionPaymentInterval$outboundSchema,
    paymentFrequency: z.number(),
  }).transform((v) => {
    return remap$(v, {
      paymentInterval: "payment_interval",
      paymentFrequency: "payment_frequency",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionPaymentTerms$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionPaymentTerms$Outbound;
}

export function subscriptionUpdateSubscriptionPaymentTermsToJSON(
  subscriptionUpdateSubscriptionPaymentTerms:
    SubscriptionUpdateSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionPaymentTerms$outboundSchema.parse(
      subscriptionUpdateSubscriptionPaymentTerms,
    ),
  );
}

export function subscriptionUpdateSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionPaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionBillingDetails$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.nullable(
      z.lazy(() => SubscriptionUpdateSubscriptionPaymentTerms$inboundSchema),
    ).optional(),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type SubscriptionUpdateSubscriptionBillingDetails$Outbound = {
  payment_terms?:
    | SubscriptionUpdateSubscriptionPaymentTerms$Outbound
    | null
    | undefined;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const SubscriptionUpdateSubscriptionBillingDetails$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionBillingDetails$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionBillingDetails
  > = z.object({
    paymentTerms: z.nullable(
      z.lazy(() => SubscriptionUpdateSubscriptionPaymentTerms$outboundSchema),
    ).optional(),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionBillingDetails$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionBillingDetails$Outbound;
}

export function subscriptionUpdateSubscriptionBillingDetailsToJSON(
  subscriptionUpdateSubscriptionBillingDetails:
    SubscriptionUpdateSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionBillingDetails$outboundSchema.parse(
      subscriptionUpdateSubscriptionBillingDetails,
    ),
  );
}

export function subscriptionUpdateSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const CurrentBillingPeriod$inboundSchema: z.ZodType<
  CurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.nullable(z.string()),
  ends_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type CurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const CurrentBillingPeriod$outboundSchema: z.ZodType<
  CurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  CurrentBillingPeriod
> = z.object({
  startsAt: z.nullable(z.string()),
  endsAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentBillingPeriod$ {
  /** @deprecated use `CurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema = CurrentBillingPeriod$inboundSchema;
  /** @deprecated use `CurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema = CurrentBillingPeriod$outboundSchema;
  /** @deprecated use `CurrentBillingPeriod$Outbound` instead. */
  export type Outbound = CurrentBillingPeriod$Outbound;
}

export function currentBillingPeriodToJSON(
  currentBillingPeriod: CurrentBillingPeriod,
): string {
  return JSON.stringify(
    CurrentBillingPeriod$outboundSchema.parse(currentBillingPeriod),
  );
}

export function currentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<CurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionItems$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_id: z.string(),
  quantity: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
  });
});

/** @internal */
export type SubscriptionUpdateSubscriptionItems$Outbound = {
  price_id: string;
  quantity?: number | null | undefined;
};

/** @internal */
export const SubscriptionUpdateSubscriptionItems$outboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionItems$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateSubscriptionItems
> = z.object({
  priceId: z.string(),
  quantity: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionItems$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionItems$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionItems$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionItems$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionItems$Outbound;
}

export function subscriptionUpdateSubscriptionItemsToJSON(
  subscriptionUpdateSubscriptionItems: SubscriptionUpdateSubscriptionItems,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionItems$outboundSchema.parse(
      subscriptionUpdateSubscriptionItems,
    ),
  );
}

export function subscriptionUpdateSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUpdateSubscriptionItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionCustomData$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubscriptionUpdateSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionUpdateSubscriptionCustomData$outboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionCustomData$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionCustomData$Outbound;
}

export function subscriptionUpdateSubscriptionCustomDataToJSON(
  subscriptionUpdateSubscriptionCustomData:
    SubscriptionUpdateSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionCustomData$outboundSchema.parse(
      subscriptionUpdateSubscriptionCustomData,
    ),
  );
}

export function subscriptionUpdateSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const ManagementUrls$inboundSchema: z.ZodType<
  ManagementUrls,
  z.ZodTypeDef,
  unknown
> = z.object({
  update_payment_method: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "update_payment_method": "updatePaymentMethod",
  });
});

/** @internal */
export type ManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const ManagementUrls$outboundSchema: z.ZodType<
  ManagementUrls$Outbound,
  z.ZodTypeDef,
  ManagementUrls
> = z.object({
  updatePaymentMethod: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    updatePaymentMethod: "update_payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManagementUrls$ {
  /** @deprecated use `ManagementUrls$inboundSchema` instead. */
  export const inboundSchema = ManagementUrls$inboundSchema;
  /** @deprecated use `ManagementUrls$outboundSchema` instead. */
  export const outboundSchema = ManagementUrls$outboundSchema;
  /** @deprecated use `ManagementUrls$Outbound` instead. */
  export type Outbound = ManagementUrls$Outbound;
}

export function managementUrlsToJSON(managementUrls: ManagementUrls): string {
  return JSON.stringify(ManagementUrls$outboundSchema.parse(managementUrls));
}

export function managementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<ManagementUrls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ManagementUrls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ManagementUrls' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionRequestBody$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.nullable(z.string()).optional(),
  address_id: z.nullable(z.string()).optional(),
  currency_code: z.nullable(z.string()).optional(),
  next_billed_at: z.nullable(z.string().transform(v => new RFCDate(v)))
    .optional(),
  collection_mode: z.nullable(CollectionMode$inboundSchema).optional(),
  discount: z.nullable(z.lazy(() => Discount$inboundSchema)).optional(),
  billing_details: z.lazy(() =>
    SubscriptionUpdateSubscriptionBillingDetails$inboundSchema
  ),
  current_billing_period: z.nullable(
    z.lazy(() => CurrentBillingPeriod$inboundSchema),
  ).optional(),
  items: z.array(
    z.lazy(() => SubscriptionUpdateSubscriptionItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    SubscriptionUpdateSubscriptionCustomData$inboundSchema
  ).optional(),
  management_urls: z.nullable(z.lazy(() => ManagementUrls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "next_billed_at": "nextBilledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type SubscriptionUpdateSubscriptionRequestBody$Outbound = {
  customer_id?: string | null | undefined;
  address_id?: string | null | undefined;
  currency_code?: string | null | undefined;
  next_billed_at?: string | null | undefined;
  collection_mode?: string | null | undefined;
  discount?: Discount$Outbound | null | undefined;
  billing_details: SubscriptionUpdateSubscriptionBillingDetails$Outbound;
  current_billing_period?: CurrentBillingPeriod$Outbound | null | undefined;
  items: Array<SubscriptionUpdateSubscriptionItems$Outbound>;
  custom_data?: SubscriptionUpdateSubscriptionCustomData$Outbound | undefined;
  management_urls?: ManagementUrls$Outbound | null | undefined;
};

/** @internal */
export const SubscriptionUpdateSubscriptionRequestBody$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionRequestBody$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionRequestBody
  > = z.object({
    customerId: z.nullable(z.string()).optional(),
    addressId: z.nullable(z.string()).optional(),
    currencyCode: z.nullable(z.string()).optional(),
    nextBilledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    collectionMode: z.nullable(CollectionMode$outboundSchema).optional(),
    discount: z.nullable(z.lazy(() => Discount$outboundSchema)).optional(),
    billingDetails: z.lazy(() =>
      SubscriptionUpdateSubscriptionBillingDetails$outboundSchema
    ),
    currentBillingPeriod: z.nullable(
      z.lazy(() => CurrentBillingPeriod$outboundSchema),
    ).optional(),
    items: z.array(
      z.lazy(() => SubscriptionUpdateSubscriptionItems$outboundSchema),
    ),
    customData: z.lazy(() =>
      SubscriptionUpdateSubscriptionCustomData$outboundSchema
    ).optional(),
    managementUrls: z.nullable(z.lazy(() => ManagementUrls$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      customerId: "customer_id",
      addressId: "address_id",
      currencyCode: "currency_code",
      nextBilledAt: "next_billed_at",
      collectionMode: "collection_mode",
      billingDetails: "billing_details",
      currentBillingPeriod: "current_billing_period",
      customData: "custom_data",
      managementUrls: "management_urls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionRequestBody$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionRequestBody$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionRequestBody$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionRequestBody$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionRequestBody$Outbound;
}

export function subscriptionUpdateSubscriptionRequestBodyToJSON(
  subscriptionUpdateSubscriptionRequestBody:
    SubscriptionUpdateSubscriptionRequestBody,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionRequestBody$outboundSchema.parse(
      subscriptionUpdateSubscriptionRequestBody,
    ),
  );
}

export function subscriptionUpdateSubscriptionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionRequestBody' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionRequest$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
  RequestBody: z.lazy(() =>
    SubscriptionUpdateSubscriptionRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SubscriptionUpdateSubscriptionRequest$Outbound = {
  subscription_id: string;
  RequestBody: SubscriptionUpdateSubscriptionRequestBody$Outbound;
};

/** @internal */
export const SubscriptionUpdateSubscriptionRequest$outboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateSubscriptionRequest
> = z.object({
  subscriptionId: z.string(),
  requestBody: z.lazy(() =>
    SubscriptionUpdateSubscriptionRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionRequest$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionRequest$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionRequest$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionRequest$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionRequest$Outbound;
}

export function subscriptionUpdateSubscriptionRequestToJSON(
  subscriptionUpdateSubscriptionRequest: SubscriptionUpdateSubscriptionRequest,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionRequest$outboundSchema.parse(
      subscriptionUpdateSubscriptionRequest,
    ),
  );
}

export function subscriptionUpdateSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUpdateSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionRequest' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionInterval> = z.nativeEnum(
    SubscriptionUpdateSubscriptionInterval,
  );

/** @internal */
export const SubscriptionUpdateSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionInterval> =
    SubscriptionUpdateSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionInterval$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionPaymentTerms,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: z.nullable(SubscriptionUpdateSubscriptionInterval$inboundSchema)
      .optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/** @internal */
export type SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionSubscriptionPaymentTerms
  > = z.object({
    interval: z.nullable(SubscriptionUpdateSubscriptionInterval$outboundSchema)
      .optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$Outbound;
}

export function subscriptionUpdateSubscriptionSubscriptionPaymentTermsToJSON(
  subscriptionUpdateSubscriptionSubscriptionPaymentTerms:
    SubscriptionUpdateSubscriptionSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$outboundSchema.parse(
      subscriptionUpdateSubscriptionSubscriptionPaymentTerms,
    ),
  );
}

export function subscriptionUpdateSubscriptionSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionSubscriptionPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionBillingDetails$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type SubscriptionUpdateSubscriptionSubscriptionBillingDetails$Outbound =
  {
    payment_terms:
      SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$Outbound;
    enable_checkout?: boolean | null | undefined;
    additional_information?: string | null | undefined;
    purchase_order_number?: string | null | undefined;
  };

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionBillingDetails$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      SubscriptionUpdateSubscriptionSubscriptionPaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionBillingDetails$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails$Outbound;
}

export function subscriptionUpdateSubscriptionSubscriptionBillingDetailsToJSON(
  subscriptionUpdateSubscriptionSubscriptionBillingDetails:
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails$outboundSchema
      .parse(subscriptionUpdateSubscriptionSubscriptionBillingDetails),
  );
}

export function subscriptionUpdateSubscriptionSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionSubscriptionBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionSubscriptionBillingDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string()),
    ends_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type SubscriptionUpdateSubscriptionCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const SubscriptionUpdateSubscriptionCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.string()),
    endsAt: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionCurrentBillingPeriod$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionCurrentBillingPeriod$Outbound;
}

export function subscriptionUpdateSubscriptionCurrentBillingPeriodToJSON(
  subscriptionUpdateSubscriptionCurrentBillingPeriod:
    SubscriptionUpdateSubscriptionCurrentBillingPeriod,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionCurrentBillingPeriod$outboundSchema.parse(
      subscriptionUpdateSubscriptionCurrentBillingPeriod,
    ),
  );
}

export function subscriptionUpdateSubscriptionCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionBillingCycle$inboundSchema:
  z.ZodType<SubscriptionUpdateSubscriptionBillingCycle, z.ZodTypeDef, unknown> =
    z.object({
      frequency: z.number().int(),
      interval: z.string(),
    });

/** @internal */
export type SubscriptionUpdateSubscriptionBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const SubscriptionUpdateSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionBillingCycle$Outbound;
}

export function subscriptionUpdateSubscriptionBillingCycleToJSON(
  subscriptionUpdateSubscriptionBillingCycle:
    SubscriptionUpdateSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionUpdateSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionUpdateSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionAction$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionAction> = z.nativeEnum(
    SubscriptionUpdateSubscriptionAction,
  );

/** @internal */
export const SubscriptionUpdateSubscriptionAction$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionAction> =
    SubscriptionUpdateSubscriptionAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionAction$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionAction$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionAction$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionAction$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionAction$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionStatus> = z.nativeEnum(
    SubscriptionUpdateSubscriptionStatus,
  );

/** @internal */
export const SubscriptionUpdateSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionStatus> =
    SubscriptionUpdateSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionStatus$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionScheduledChange$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: SubscriptionUpdateSubscriptionAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()).optional(),
    status: SubscriptionUpdateSubscriptionStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type SubscriptionUpdateSubscriptionScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const SubscriptionUpdateSubscriptionScheduledChange$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionScheduledChange$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: SubscriptionUpdateSubscriptionAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()).optional(),
    status: SubscriptionUpdateSubscriptionStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionScheduledChange$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionScheduledChange$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionScheduledChange$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionScheduledChange$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionScheduledChange$Outbound;
}

export function subscriptionUpdateSubscriptionScheduledChangeToJSON(
  subscriptionUpdateSubscriptionScheduledChange:
    SubscriptionUpdateSubscriptionScheduledChange,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionScheduledChange$outboundSchema.parse(
      subscriptionUpdateSubscriptionScheduledChange,
    ),
  );
}

export function subscriptionUpdateSubscriptionScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionScheduledChange' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionSubscriptionStatus> = z
    .nativeEnum(SubscriptionUpdateSubscriptionSubscriptionStatus);

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionSubscriptionStatus> =
    SubscriptionUpdateSubscriptionSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionStatus$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionType$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionSubscriptionType> = z
    .nativeEnum(SubscriptionUpdateSubscriptionSubscriptionType);

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionType$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionSubscriptionType> =
    SubscriptionUpdateSubscriptionSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionType$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionSubscriptionInterval> = z
    .nativeEnum(SubscriptionUpdateSubscriptionSubscriptionInterval);

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionUpdateSubscriptionSubscriptionInterval> =
    SubscriptionUpdateSubscriptionSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionInterval$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: SubscriptionUpdateSubscriptionSubscriptionInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type SubscriptionUpdateSubscriptionSubscriptionBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle
  > = z.object({
    interval: SubscriptionUpdateSubscriptionSubscriptionInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle$Outbound;
}

export function subscriptionUpdateSubscriptionSubscriptionBillingCycleToJSON(
  subscriptionUpdateSubscriptionSubscriptionBillingCycle:
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionUpdateSubscriptionSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionUpdateSubscriptionSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionSubscriptionBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionUpdateSubscriptionSubscriptionResponseInterval
  > = z.nativeEnum(SubscriptionUpdateSubscriptionSubscriptionResponseInterval);

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionUpdateSubscriptionSubscriptionResponseInterval
  > = SubscriptionUpdateSubscriptionSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionResponseInterval$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionTrialPeriod$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval:
    SubscriptionUpdateSubscriptionSubscriptionResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type SubscriptionUpdateSubscriptionTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionUpdateSubscriptionTrialPeriod$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionTrialPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionTrialPeriod
  > = z.object({
    interval:
      SubscriptionUpdateSubscriptionSubscriptionResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionTrialPeriod$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionTrialPeriod$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionTrialPeriod$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionTrialPeriod$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionTrialPeriod$Outbound;
}

export function subscriptionUpdateSubscriptionTrialPeriodToJSON(
  subscriptionUpdateSubscriptionTrialPeriod:
    SubscriptionUpdateSubscriptionTrialPeriod,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionTrialPeriod$outboundSchema.parse(
      subscriptionUpdateSubscriptionTrialPeriod,
    ),
  );
}

export function subscriptionUpdateSubscriptionTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionTrialPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionUnitPrice$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type SubscriptionUpdateSubscriptionUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const SubscriptionUpdateSubscriptionUnitPrice$outboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionUnitPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateSubscriptionUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionUnitPrice$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionUnitPrice$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionUnitPrice$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionUnitPrice$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionUnitPrice$Outbound;
}

export function subscriptionUpdateSubscriptionUnitPriceToJSON(
  subscriptionUpdateSubscriptionUnitPrice:
    SubscriptionUpdateSubscriptionUnitPrice,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionUnitPrice$outboundSchema.parse(
      subscriptionUpdateSubscriptionUnitPrice,
    ),
  );
}

export function subscriptionUpdateSubscriptionUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionUnitPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionUpdateSubscriptionSubscriptionResponse200Status
  > = z.nativeEnum(SubscriptionUpdateSubscriptionSubscriptionResponse200Status);

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionUpdateSubscriptionSubscriptionResponse200Status
  > = SubscriptionUpdateSubscriptionSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionResponse200Status$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$Outbound =
  {};

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$Outbound;
}

export function subscriptionUpdateSubscriptionSubscriptionResponse200CustomDataToJSON(
  subscriptionUpdateSubscriptionSubscriptionResponse200CustomData:
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$outboundSchema
      .parse(subscriptionUpdateSubscriptionSubscriptionResponse200CustomData),
  );
}

export function subscriptionUpdateSubscriptionSubscriptionResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionPrice$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionUpdateSubscriptionSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    SubscriptionUpdateSubscriptionTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    SubscriptionUpdateSubscriptionUnitPrice$inboundSchema
  ),
  status:
    SubscriptionUpdateSubscriptionSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SubscriptionUpdateSubscriptionPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle$Outbound;
  trial_period: SubscriptionUpdateSubscriptionTrialPeriod$Outbound;
  unit_price: SubscriptionUpdateSubscriptionUnitPrice$Outbound;
  status: string;
  custom_data?:
    | SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const SubscriptionUpdateSubscriptionPrice$outboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateSubscriptionPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionUpdateSubscriptionSubscriptionType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    SubscriptionUpdateSubscriptionTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() =>
    SubscriptionUpdateSubscriptionUnitPrice$outboundSchema
  ),
  status:
    SubscriptionUpdateSubscriptionSubscriptionResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionResponse200CustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionPrice$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionPrice$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionPrice$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionPrice$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionPrice$Outbound;
}

export function subscriptionUpdateSubscriptionPriceToJSON(
  subscriptionUpdateSubscriptionPrice: SubscriptionUpdateSubscriptionPrice,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionPrice$outboundSchema.parse(
      subscriptionUpdateSubscriptionPrice,
    ),
  );
}

export function subscriptionUpdateSubscriptionPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUpdateSubscriptionPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionItems$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionItems,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status: SubscriptionUpdateSubscriptionSubscriptionStatus$inboundSchema,
    price_id: z.string(),
    quantity: z.number().int(),
    id: z.string(),
    subscription_id: z.string(),
    recurring: z.boolean(),
    created_at: z.string(),
    updated_at: z.string(),
    previously_billed_at: z.nullable(z.string()),
    next_billed_at: z.nullable(z.string()),
    trial_started_at: z.nullable(z.string()),
    trial_ended_at: z.nullable(z.string()),
    custom_data: z.nullable(z.any()).optional(),
    price: z.lazy(() => SubscriptionUpdateSubscriptionPrice$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "price_id": "priceId",
      "subscription_id": "subscriptionId",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "previously_billed_at": "previouslyBilledAt",
      "next_billed_at": "nextBilledAt",
      "trial_started_at": "trialStartedAt",
      "trial_ended_at": "trialEndedAt",
      "custom_data": "customData",
    });
  });

/** @internal */
export type SubscriptionUpdateSubscriptionSubscriptionItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: SubscriptionUpdateSubscriptionPrice$Outbound;
};

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionItems$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionItems$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionSubscriptionItems
  > = z.object({
    status: SubscriptionUpdateSubscriptionSubscriptionStatus$outboundSchema,
    priceId: z.string(),
    quantity: z.number().int(),
    id: z.string(),
    subscriptionId: z.string(),
    recurring: z.boolean(),
    createdAt: z.string(),
    updatedAt: z.string(),
    previouslyBilledAt: z.nullable(z.string()),
    nextBilledAt: z.nullable(z.string()),
    trialStartedAt: z.nullable(z.string()),
    trialEndedAt: z.nullable(z.string()),
    customData: z.nullable(z.any()).optional(),
    price: z.lazy(() => SubscriptionUpdateSubscriptionPrice$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      priceId: "price_id",
      subscriptionId: "subscription_id",
      createdAt: "created_at",
      updatedAt: "updated_at",
      previouslyBilledAt: "previously_billed_at",
      nextBilledAt: "next_billed_at",
      trialStartedAt: "trial_started_at",
      trialEndedAt: "trial_ended_at",
      customData: "custom_data",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionItems$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionItems$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionItems$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionItems$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionSubscriptionItems$Outbound;
}

export function subscriptionUpdateSubscriptionSubscriptionItemsToJSON(
  subscriptionUpdateSubscriptionSubscriptionItems:
    SubscriptionUpdateSubscriptionSubscriptionItems,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionSubscriptionItems$outboundSchema.parse(
      subscriptionUpdateSubscriptionSubscriptionItems,
    ),
  );
}

export function subscriptionUpdateSubscriptionSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionSubscriptionItems,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionSubscriptionItems$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionCustomData$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionUpdateSubscriptionSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionCustomData$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionSubscriptionCustomData$Outbound;
}

export function subscriptionUpdateSubscriptionSubscriptionCustomDataToJSON(
  subscriptionUpdateSubscriptionSubscriptionCustomData:
    SubscriptionUpdateSubscriptionSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionSubscriptionCustomData$outboundSchema.parse(
      subscriptionUpdateSubscriptionSubscriptionCustomData,
    ),
  );
}

export function subscriptionUpdateSubscriptionSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionManagementUrls$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type SubscriptionUpdateSubscriptionManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const SubscriptionUpdateSubscriptionManagementUrls$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionManagementUrls$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionManagementUrls$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionManagementUrls$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionManagementUrls$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionManagementUrls$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionManagementUrls$Outbound;
}

export function subscriptionUpdateSubscriptionManagementUrlsToJSON(
  subscriptionUpdateSubscriptionManagementUrls:
    SubscriptionUpdateSubscriptionManagementUrls,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionManagementUrls$outboundSchema.parse(
      subscriptionUpdateSubscriptionManagementUrls,
    ),
  );
}

export function subscriptionUpdateSubscriptionManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionManagementUrls' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionUpdateSubscriptionSubscriptionResponseStatus
  > = z.nativeEnum(SubscriptionUpdateSubscriptionSubscriptionResponseStatus);

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionUpdateSubscriptionSubscriptionResponseStatus
  > = SubscriptionUpdateSubscriptionSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionResponseStatus$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionUpdateSubscriptionType
> = z.nativeEnum(SubscriptionUpdateSubscriptionType);

/** @internal */
export const SubscriptionUpdateSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionUpdateSubscriptionType
> = SubscriptionUpdateSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionType$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = SubscriptionUpdateSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$Outbound =
  {};

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$Outbound;
}

export function subscriptionUpdateSubscriptionSubscriptionResponseCustomDataToJSON(
  subscriptionUpdateSubscriptionSubscriptionResponseCustomData:
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$outboundSchema
      .parse(subscriptionUpdateSubscriptionSubscriptionResponseCustomData),
  );
}

export function subscriptionUpdateSubscriptionSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionDiscount$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status:
    SubscriptionUpdateSubscriptionSubscriptionResponseStatus$inboundSchema,
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: SubscriptionUpdateSubscriptionType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type SubscriptionUpdateSubscriptionDiscount$Outbound = {
  id: string;
  status: string;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const SubscriptionUpdateSubscriptionDiscount$outboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateSubscriptionDiscount
> = z.object({
  id: z.string(),
  status:
    SubscriptionUpdateSubscriptionSubscriptionResponseStatus$outboundSchema,
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: SubscriptionUpdateSubscriptionType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionResponseCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionDiscount$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionDiscount$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionDiscount$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionDiscount$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionDiscount$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionDiscount$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionDiscount$Outbound;
}

export function subscriptionUpdateSubscriptionDiscountToJSON(
  subscriptionUpdateSubscriptionDiscount:
    SubscriptionUpdateSubscriptionDiscount,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionDiscount$outboundSchema.parse(
      subscriptionUpdateSubscriptionDiscount,
    ),
  );
}

export function subscriptionUpdateSubscriptionDiscountFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUpdateSubscriptionDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionDiscount' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionData$inboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  started_at: z.nullable(z.string()),
  first_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  paused_at: z.nullable(z.string()),
  canceled_at: z.nullable(z.string()),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    SubscriptionUpdateSubscriptionCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    SubscriptionUpdateSubscriptionBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.lazy(() => SubscriptionUpdateSubscriptionScheduledChange$inboundSchema),
  ),
  items: z.array(
    z.lazy(() => SubscriptionUpdateSubscriptionSubscriptionItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    SubscriptionUpdateSubscriptionManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionUpdateSubscriptionDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type SubscriptionUpdateSubscriptionData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details:
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails$Outbound;
  current_billing_period:
    SubscriptionUpdateSubscriptionCurrentBillingPeriod$Outbound;
  billing_cycle: SubscriptionUpdateSubscriptionBillingCycle$Outbound;
  scheduled_change: Array<
    SubscriptionUpdateSubscriptionScheduledChange$Outbound
  >;
  items: Array<SubscriptionUpdateSubscriptionSubscriptionItems$Outbound>;
  custom_data?:
    | SubscriptionUpdateSubscriptionSubscriptionCustomData$Outbound
    | undefined;
  management_urls: SubscriptionUpdateSubscriptionManagementUrls$Outbound;
  discount?: SubscriptionUpdateSubscriptionDiscount$Outbound | null | undefined;
};

/** @internal */
export const SubscriptionUpdateSubscriptionData$outboundSchema: z.ZodType<
  SubscriptionUpdateSubscriptionData$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateSubscriptionData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startedAt: z.nullable(z.string()),
  firstBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  pausedAt: z.nullable(z.string()),
  canceledAt: z.nullable(z.string()),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    SubscriptionUpdateSubscriptionCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    SubscriptionUpdateSubscriptionBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.lazy(() => SubscriptionUpdateSubscriptionScheduledChange$outboundSchema),
  ),
  items: z.array(
    z.lazy(() =>
      SubscriptionUpdateSubscriptionSubscriptionItems$outboundSchema
    ),
  ),
  customData: z.lazy(() =>
    SubscriptionUpdateSubscriptionSubscriptionCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    SubscriptionUpdateSubscriptionManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionUpdateSubscriptionDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionData$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionData$inboundSchema` instead. */
  export const inboundSchema = SubscriptionUpdateSubscriptionData$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionData$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionData$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionData$Outbound;
}

export function subscriptionUpdateSubscriptionDataToJSON(
  subscriptionUpdateSubscriptionData: SubscriptionUpdateSubscriptionData,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionData$outboundSchema.parse(
      subscriptionUpdateSubscriptionData,
    ),
  );
}

export function subscriptionUpdateSubscriptionDataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUpdateSubscriptionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSubscriptionData' from JSON`,
  );
}

/** @internal */
export const SubscriptionUpdateSubscriptionResponseBody$inboundSchema:
  z.ZodType<SubscriptionUpdateSubscriptionResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      data: z.lazy(() => SubscriptionUpdateSubscriptionData$inboundSchema),
    });

/** @internal */
export type SubscriptionUpdateSubscriptionResponseBody$Outbound = {
  data: SubscriptionUpdateSubscriptionData$Outbound;
};

/** @internal */
export const SubscriptionUpdateSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionResponseBody
  > = z.object({
    data: z.lazy(() => SubscriptionUpdateSubscriptionData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionResponseBody$Outbound;
}

export function subscriptionUpdateSubscriptionResponseBodyToJSON(
  subscriptionUpdateSubscriptionResponseBody:
    SubscriptionUpdateSubscriptionResponseBody,
): string {
  return JSON.stringify(
    SubscriptionUpdateSubscriptionResponseBody$outboundSchema.parse(
      subscriptionUpdateSubscriptionResponseBody,
    ),
  );
}

export function subscriptionUpdateSubscriptionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionUpdateSubscriptionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionUpdateSubscriptionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionUpdateSubscriptionResponseBody' from JSON`,
  );
}
