/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostTransactionsItems = {
  priceId: string;
  quantity: number;
};

export const PostTransactionsStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type PostTransactionsStatus = ClosedEnum<typeof PostTransactionsStatus>;

export const PostTransactionsPaymentDetailsPaymentMethod = {
  BankTransfer: "BANK_TRANSFER",
} as const;
export type PostTransactionsPaymentDetailsPaymentMethod = ClosedEnum<
  typeof PostTransactionsPaymentDetailsPaymentMethod
>;

export const PostTransactionsPaymentDetailsPaymentProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type PostTransactionsPaymentDetailsPaymentProvider = ClosedEnum<
  typeof PostTransactionsPaymentDetailsPaymentProvider
>;

export type Three = {
  paymentMethod: PostTransactionsPaymentDetailsPaymentMethod;
  paymentProvider: PostTransactionsPaymentDetailsPaymentProvider;
  amount: number;
  currencyCode: string;
  bankReference: string;
  bankName: string;
};

export const PaymentDetailsPaymentMethod = {
  Card: "CARD",
} as const;
export type PaymentDetailsPaymentMethod = ClosedEnum<
  typeof PaymentDetailsPaymentMethod
>;

export const PaymentDetailsPaymentProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type PaymentDetailsPaymentProvider = ClosedEnum<
  typeof PaymentDetailsPaymentProvider
>;

export type Two = {
  paymentMethod: PaymentDetailsPaymentMethod;
  paymentProvider: PaymentDetailsPaymentProvider;
  amount: number;
  currencyCode: string;
  cardLast4: string;
  cardBrand: string;
  cardExpMonth: number;
  cardExpYear: number;
  cardHolderName: string;
};

export const PaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type PaymentMethod = ClosedEnum<typeof PaymentMethod>;

export const PaymentProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type PaymentProvider = ClosedEnum<typeof PaymentProvider>;

export type One = {
  paymentMethod: PaymentMethod;
  paymentProvider: PaymentProvider;
  amount: number;
  currencyCode: string;
  mobileNetwork: string;
  phoneSuffix: string;
};

export type PaymentDetails = One | Three | Two;

export const PostTransactionsCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type PostTransactionsCollectionMode = ClosedEnum<
  typeof PostTransactionsCollectionMode
>;

/**
 * Any valid JSON value
 */
export type PostTransactionsCustomData = {};

export type PostTransactionsCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type PostTransactionsRequestBody = {
  items: Array<PostTransactionsItems>;
  status: PostTransactionsStatus;
  customerId: string;
  addressId: string;
  currencyCode: string;
  paymentDetails: One | Three | Two;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?: PostTransactionsCollectionMode | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PostTransactionsCustomData | undefined;
  currentBillingPeriod?: PostTransactionsCurrentBillingPeriod | undefined;
};

export const PostTransactionsTransactionsStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type PostTransactionsTransactionsStatus = ClosedEnum<
  typeof PostTransactionsTransactionsStatus
>;

export const PostTransactionsTransactionsCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type PostTransactionsTransactionsCollectionMode = ClosedEnum<
  typeof PostTransactionsTransactionsCollectionMode
>;

/**
 * Any valid JSON value
 */
export type PostTransactionsTransactionsCustomData = {};

export type PostTransactionsTransactionsCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type Total = {
  subtotal: number;
  discount: number;
  grandTotal: number;
};

export type Details = {
  total: Total;
};

export const PostTransactionsTransactionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PostTransactionsTransactionsType = ClosedEnum<
  typeof PostTransactionsTransactionsType
>;

export const PostTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostTransactionsInterval = ClosedEnum<
  typeof PostTransactionsInterval
>;

export type PostTransactionsBillingCycle = {
  interval: PostTransactionsInterval;
  frequency: number;
};

export const PostTransactionsTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostTransactionsTransactionsInterval = ClosedEnum<
  typeof PostTransactionsTransactionsInterval
>;

export type PostTransactionsTrialPeriod = {
  interval: PostTransactionsTransactionsInterval;
  frequency: number;
};

export type PostTransactionsUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  ClosedEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  >;

/**
 * Any valid JSON value
 */
export type PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData =
  {};

export type Price = {
  productId: string;
  description?: string | null | undefined;
  type: PostTransactionsTransactionsType;
  name: string;
  billingCycle: PostTransactionsBillingCycle;
  trialPeriod: PostTransactionsTrialPeriod;
  unitPrice: PostTransactionsUnitPrice;
  status:
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus;
  /**
   * Any valid JSON value
   */
  customData?:
    | PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus =
  ClosedEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  >;

/**
 * Any valid JSON value
 */
export type PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData =
  {};

export type Product = {
  id: string;
  name: string;
  description: string;
  status:
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus;
  createdAt: string;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData:
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData;
};

export type PostTransactionsTransactionsItems = {
  price: Price;
  quantity: number;
  product: Product;
};

export const PostTransactionsTransactionsResponseStatus = {
  Pending: "PENDING",
  Processing: "PROCESSING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Refunded: "REFUNDED",
} as const;
export type PostTransactionsTransactionsResponseStatus = ClosedEnum<
  typeof PostTransactionsTransactionsResponseStatus
>;

export const PostTransactionsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
  Card: "CARD",
  BankTransfer: "BANK_TRANSFER",
} as const;
export type PostTransactionsPaymentMethod = ClosedEnum<
  typeof PostTransactionsPaymentMethod
>;

export const Provider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type Provider = ClosedEnum<typeof Provider>;

/**
 * Any valid JSON value
 */
export type ProviderMetadata = {};

export const PostTransactionsMethodDetailsTransactionsPaymentMethod = {
  BankTransfer: "BANK_TRANSFER",
} as const;
export type PostTransactionsMethodDetailsTransactionsPaymentMethod = ClosedEnum<
  typeof PostTransactionsMethodDetailsTransactionsPaymentMethod
>;

export type PostTransactionsMethodDetailsTransactionsDetails = {
  bankName: string;
  bankReference: string;
};

export type MethodDetails3 = {
  paymentMethod: PostTransactionsMethodDetailsTransactionsPaymentMethod;
  details: PostTransactionsMethodDetailsTransactionsDetails;
};

export const PostTransactionsMethodDetailsPaymentMethod = {
  Card: "CARD",
} as const;
export type PostTransactionsMethodDetailsPaymentMethod = ClosedEnum<
  typeof PostTransactionsMethodDetailsPaymentMethod
>;

export type PostTransactionsMethodDetailsDetails = {
  last4: string;
  brand: string;
  expMonth: number;
  expYear: number;
  cardholderName: string | null;
};

export type MethodDetails2 = {
  paymentMethod: PostTransactionsMethodDetailsPaymentMethod;
  details: PostTransactionsMethodDetailsDetails;
};

export const MethodDetailsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type MethodDetailsPaymentMethod = ClosedEnum<
  typeof MethodDetailsPaymentMethod
>;

export type MethodDetailsDetails = {
  network: string;
  phoneSuffix: string;
};

export type MethodDetails1 = {
  paymentMethod: MethodDetailsPaymentMethod;
  details: MethodDetailsDetails;
};

export type MethodDetails = MethodDetails1 | MethodDetails2 | MethodDetails3;

export type Payments = {
  id: string;
  status: PostTransactionsTransactionsResponseStatus;
  paymentMethod: PostTransactionsPaymentMethod;
  provider: Provider;
  createdAt: string;
  updatedAt?: string | null | undefined;
  providerReference: string | null;
  /**
   * Any valid JSON value
   */
  providerMetadata: ProviderMetadata;
  methodDetails: MethodDetails1 | MethodDetails2 | MethodDetails3;
};

export const PostTransactionsTransactionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostTransactionsTransactionsResponse200Status = ClosedEnum<
  typeof PostTransactionsTransactionsResponse200Status
>;

/**
 * Any valid JSON value
 */
export type PostTransactionsTransactionsResponseCustomData = {};

export type Customer = {
  id: string;
  email: string;
  name: string;
  status?: PostTransactionsTransactionsResponse200Status | null | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostTransactionsTransactionsResponseCustomData;
  createdAt: string;
  updatedAt: string;
};

/**
 * Any valid JSON value
 */
export type PostTransactionsTransactionsResponse200CustomData = {};

export const PostTransactionsTransactionsResponse200ApplicationJSONStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostTransactionsTransactionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONStatus
  >;

export type Address = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostTransactionsTransactionsResponse200CustomData;
  city?: string | null | undefined;
  status?:
    | PostTransactionsTransactionsResponse200ApplicationJSONStatus
    | null
    | undefined;
  createdAt: string;
  updatedAt: string;
  customerId?: string | null | undefined;
};

export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus
  >;

export const PostTransactionsType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PostTransactionsType = ClosedEnum<typeof PostTransactionsType>;

/**
 * Any valid JSON value
 */
export type PostTransactionsTransactionsResponse200ApplicationJSONCustomData =
  {};

export type PostTransactionsDiscount = {
  id: string;
  status?:
    | PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PostTransactionsType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostTransactionsTransactionsResponse200ApplicationJSONCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/**
 * Creates a Transaction and returns an Id
 */
export type PostTransactionsResponseBody = {
  status: PostTransactionsTransactionsStatus;
  customerId: string;
  addressId: string;
  currencyCode: string;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?:
    | PostTransactionsTransactionsCollectionMode
    | null
    | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PostTransactionsTransactionsCustomData | undefined;
  currentBillingPeriod?:
    | PostTransactionsTransactionsCurrentBillingPeriod
    | undefined;
  details: Details;
  items: Array<PostTransactionsTransactionsItems>;
  payments: Payments;
  createdAt: string;
  updatedAt?: string | null | undefined;
  customer: Customer;
  address: Address;
  discount?: PostTransactionsDiscount | null | undefined;
  invoiceId: string;
};

/** @internal */
export const PostTransactionsItems$inboundSchema: z.ZodType<
  PostTransactionsItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_id: z.string(),
  quantity: z.number(),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
  });
});

/** @internal */
export type PostTransactionsItems$Outbound = {
  price_id: string;
  quantity: number;
};

/** @internal */
export const PostTransactionsItems$outboundSchema: z.ZodType<
  PostTransactionsItems$Outbound,
  z.ZodTypeDef,
  PostTransactionsItems
> = z.object({
  priceId: z.string(),
  quantity: z.number(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsItems$ {
  /** @deprecated use `PostTransactionsItems$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsItems$inboundSchema;
  /** @deprecated use `PostTransactionsItems$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsItems$outboundSchema;
  /** @deprecated use `PostTransactionsItems$Outbound` instead. */
  export type Outbound = PostTransactionsItems$Outbound;
}

export function postTransactionsItemsToJSON(
  postTransactionsItems: PostTransactionsItems,
): string {
  return JSON.stringify(
    PostTransactionsItems$outboundSchema.parse(postTransactionsItems),
  );
}

export function postTransactionsItemsFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsItems' from JSON`,
  );
}

/** @internal */
export const PostTransactionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsStatus
> = z.nativeEnum(PostTransactionsStatus);

/** @internal */
export const PostTransactionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsStatus
> = PostTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsStatus$ {
  /** @deprecated use `PostTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsStatus$inboundSchema;
  /** @deprecated use `PostTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsStatus$outboundSchema;
}

/** @internal */
export const PostTransactionsPaymentDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsPaymentDetailsPaymentMethod> = z
    .nativeEnum(PostTransactionsPaymentDetailsPaymentMethod);

/** @internal */
export const PostTransactionsPaymentDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsPaymentDetailsPaymentMethod> =
    PostTransactionsPaymentDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsPaymentDetailsPaymentMethod$ {
  /** @deprecated use `PostTransactionsPaymentDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsPaymentDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `PostTransactionsPaymentDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsPaymentDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const PostTransactionsPaymentDetailsPaymentProvider$inboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsPaymentDetailsPaymentProvider> = z
    .nativeEnum(PostTransactionsPaymentDetailsPaymentProvider);

/** @internal */
export const PostTransactionsPaymentDetailsPaymentProvider$outboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsPaymentDetailsPaymentProvider> =
    PostTransactionsPaymentDetailsPaymentProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsPaymentDetailsPaymentProvider$ {
  /** @deprecated use `PostTransactionsPaymentDetailsPaymentProvider$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsPaymentDetailsPaymentProvider$inboundSchema;
  /** @deprecated use `PostTransactionsPaymentDetailsPaymentProvider$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsPaymentDetailsPaymentProvider$outboundSchema;
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    payment_method: PostTransactionsPaymentDetailsPaymentMethod$inboundSchema,
    payment_provider:
      PostTransactionsPaymentDetailsPaymentProvider$inboundSchema,
    amount: z.number(),
    currency_code: z.string(),
    bank_reference: z.string(),
    bank_name: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
      "payment_provider": "paymentProvider",
      "currency_code": "currencyCode",
      "bank_reference": "bankReference",
      "bank_name": "bankName",
    });
  });

/** @internal */
export type Three$Outbound = {
  payment_method: string;
  payment_provider: string;
  amount: number;
  currency_code: string;
  bank_reference: string;
  bank_name: string;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  paymentMethod: PostTransactionsPaymentDetailsPaymentMethod$outboundSchema,
  paymentProvider: PostTransactionsPaymentDetailsPaymentProvider$outboundSchema,
  amount: z.number(),
  currencyCode: z.string(),
  bankReference: z.string(),
  bankName: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    paymentProvider: "payment_provider",
    currencyCode: "currency_code",
    bankReference: "bank_reference",
    bankName: "bank_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const PaymentDetailsPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof PaymentDetailsPaymentMethod
> = z.nativeEnum(PaymentDetailsPaymentMethod);

/** @internal */
export const PaymentDetailsPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof PaymentDetailsPaymentMethod
> = PaymentDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentDetailsPaymentMethod$ {
  /** @deprecated use `PaymentDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `PaymentDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const PaymentDetailsPaymentProvider$inboundSchema: z.ZodNativeEnum<
  typeof PaymentDetailsPaymentProvider
> = z.nativeEnum(PaymentDetailsPaymentProvider);

/** @internal */
export const PaymentDetailsPaymentProvider$outboundSchema: z.ZodNativeEnum<
  typeof PaymentDetailsPaymentProvider
> = PaymentDetailsPaymentProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentDetailsPaymentProvider$ {
  /** @deprecated use `PaymentDetailsPaymentProvider$inboundSchema` instead. */
  export const inboundSchema = PaymentDetailsPaymentProvider$inboundSchema;
  /** @deprecated use `PaymentDetailsPaymentProvider$outboundSchema` instead. */
  export const outboundSchema = PaymentDetailsPaymentProvider$outboundSchema;
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
  .object({
    payment_method: PaymentDetailsPaymentMethod$inboundSchema,
    payment_provider: PaymentDetailsPaymentProvider$inboundSchema,
    amount: z.number(),
    currency_code: z.string(),
    card_last4: z.string(),
    card_brand: z.string(),
    card_exp_month: z.number().int(),
    card_exp_year: z.number().int(),
    card_holder_name: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
      "payment_provider": "paymentProvider",
      "currency_code": "currencyCode",
      "card_last4": "cardLast4",
      "card_brand": "cardBrand",
      "card_exp_month": "cardExpMonth",
      "card_exp_year": "cardExpYear",
      "card_holder_name": "cardHolderName",
    });
  });

/** @internal */
export type Two$Outbound = {
  payment_method: string;
  payment_provider: string;
  amount: number;
  currency_code: string;
  card_last4: string;
  card_brand: string;
  card_exp_month: number;
  card_exp_year: number;
  card_holder_name: string;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .object({
    paymentMethod: PaymentDetailsPaymentMethod$outboundSchema,
    paymentProvider: PaymentDetailsPaymentProvider$outboundSchema,
    amount: z.number(),
    currencyCode: z.string(),
    cardLast4: z.string(),
    cardBrand: z.string(),
    cardExpMonth: z.number().int(),
    cardExpYear: z.number().int(),
    cardHolderName: z.string(),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
      paymentProvider: "payment_provider",
      currencyCode: "currency_code",
      cardLast4: "card_last4",
      cardBrand: "card_brand",
      cardExpMonth: "card_exp_month",
      cardExpYear: "card_exp_year",
      cardHolderName: "card_holder_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const PaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethod
> = z.nativeEnum(PaymentMethod);

/** @internal */
export const PaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethod
> = PaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethod$ {
  /** @deprecated use `PaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentMethod$inboundSchema;
  /** @deprecated use `PaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentMethod$outboundSchema;
}

/** @internal */
export const PaymentProvider$inboundSchema: z.ZodNativeEnum<
  typeof PaymentProvider
> = z.nativeEnum(PaymentProvider);

/** @internal */
export const PaymentProvider$outboundSchema: z.ZodNativeEnum<
  typeof PaymentProvider
> = PaymentProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentProvider$ {
  /** @deprecated use `PaymentProvider$inboundSchema` instead. */
  export const inboundSchema = PaymentProvider$inboundSchema;
  /** @deprecated use `PaymentProvider$outboundSchema` instead. */
  export const outboundSchema = PaymentProvider$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    payment_method: PaymentMethod$inboundSchema,
    payment_provider: PaymentProvider$inboundSchema,
    amount: z.number(),
    currency_code: z.string(),
    mobile_network: z.string(),
    phone_suffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
      "payment_provider": "paymentProvider",
      "currency_code": "currencyCode",
      "mobile_network": "mobileNetwork",
      "phone_suffix": "phoneSuffix",
    });
  });

/** @internal */
export type One$Outbound = {
  payment_method: string;
  payment_provider: string;
  amount: number;
  currency_code: string;
  mobile_network: string;
  phone_suffix: string;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    paymentMethod: PaymentMethod$outboundSchema,
    paymentProvider: PaymentProvider$outboundSchema,
    amount: z.number(),
    currencyCode: z.string(),
    mobileNetwork: z.string(),
    phoneSuffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
      paymentProvider: "payment_provider",
      currencyCode: "currency_code",
      mobileNetwork: "mobile_network",
      phoneSuffix: "phone_suffix",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const PaymentDetails$inboundSchema: z.ZodType<
  PaymentDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => One$inboundSchema),
  z.lazy(() => Three$inboundSchema),
  z.lazy(() => Two$inboundSchema),
]);

/** @internal */
export type PaymentDetails$Outbound =
  | One$Outbound
  | Three$Outbound
  | Two$Outbound;

/** @internal */
export const PaymentDetails$outboundSchema: z.ZodType<
  PaymentDetails$Outbound,
  z.ZodTypeDef,
  PaymentDetails
> = z.union([
  z.lazy(() => One$outboundSchema),
  z.lazy(() => Three$outboundSchema),
  z.lazy(() => Two$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentDetails$ {
  /** @deprecated use `PaymentDetails$inboundSchema` instead. */
  export const inboundSchema = PaymentDetails$inboundSchema;
  /** @deprecated use `PaymentDetails$outboundSchema` instead. */
  export const outboundSchema = PaymentDetails$outboundSchema;
  /** @deprecated use `PaymentDetails$Outbound` instead. */
  export type Outbound = PaymentDetails$Outbound;
}

export function paymentDetailsToJSON(paymentDetails: PaymentDetails): string {
  return JSON.stringify(PaymentDetails$outboundSchema.parse(paymentDetails));
}

export function paymentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PaymentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentDetails' from JSON`,
  );
}

/** @internal */
export const PostTransactionsCollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsCollectionMode
> = z.nativeEnum(PostTransactionsCollectionMode);

/** @internal */
export const PostTransactionsCollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsCollectionMode
> = PostTransactionsCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsCollectionMode$ {
  /** @deprecated use `PostTransactionsCollectionMode$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsCollectionMode$inboundSchema;
  /** @deprecated use `PostTransactionsCollectionMode$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsCollectionMode$outboundSchema;
}

/** @internal */
export const PostTransactionsCustomData$inboundSchema: z.ZodType<
  PostTransactionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostTransactionsCustomData$Outbound = {};

/** @internal */
export const PostTransactionsCustomData$outboundSchema: z.ZodType<
  PostTransactionsCustomData$Outbound,
  z.ZodTypeDef,
  PostTransactionsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsCustomData$ {
  /** @deprecated use `PostTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsCustomData$inboundSchema;
  /** @deprecated use `PostTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsCustomData$outboundSchema;
  /** @deprecated use `PostTransactionsCustomData$Outbound` instead. */
  export type Outbound = PostTransactionsCustomData$Outbound;
}

export function postTransactionsCustomDataToJSON(
  postTransactionsCustomData: PostTransactionsCustomData,
): string {
  return JSON.stringify(
    PostTransactionsCustomData$outboundSchema.parse(postTransactionsCustomData),
  );
}

export function postTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const PostTransactionsCurrentBillingPeriod$inboundSchema: z.ZodType<
  PostTransactionsCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type PostTransactionsCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const PostTransactionsCurrentBillingPeriod$outboundSchema: z.ZodType<
  PostTransactionsCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  PostTransactionsCurrentBillingPeriod
> = z.object({
  startsAt: z.date().transform(v => v.toISOString()),
  endsAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsCurrentBillingPeriod$ {
  /** @deprecated use `PostTransactionsCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PostTransactionsCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PostTransactionsCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = PostTransactionsCurrentBillingPeriod$Outbound;
}

export function postTransactionsCurrentBillingPeriodToJSON(
  postTransactionsCurrentBillingPeriod: PostTransactionsCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PostTransactionsCurrentBillingPeriod$outboundSchema.parse(
      postTransactionsCurrentBillingPeriod,
    ),
  );
}

export function postTransactionsCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PostTransactionsRequestBody$inboundSchema: z.ZodType<
  PostTransactionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => PostTransactionsItems$inboundSchema)),
  status: PostTransactionsStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  payment_details: z.union([
    z.lazy(() => One$inboundSchema),
    z.lazy(() => Three$inboundSchema),
    z.lazy(() => Two$inboundSchema),
  ]),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(PostTransactionsCollectionMode$inboundSchema)
    .optional(),
  custom_data: z.lazy(() => PostTransactionsCustomData$inboundSchema)
    .optional(),
  current_billing_period: z.lazy(() =>
    PostTransactionsCurrentBillingPeriod$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "payment_details": "paymentDetails",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
  });
});

/** @internal */
export type PostTransactionsRequestBody$Outbound = {
  items: Array<PostTransactionsItems$Outbound>;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  payment_details: One$Outbound | Three$Outbound | Two$Outbound;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: PostTransactionsCustomData$Outbound | undefined;
  current_billing_period?:
    | PostTransactionsCurrentBillingPeriod$Outbound
    | undefined;
};

/** @internal */
export const PostTransactionsRequestBody$outboundSchema: z.ZodType<
  PostTransactionsRequestBody$Outbound,
  z.ZodTypeDef,
  PostTransactionsRequestBody
> = z.object({
  items: z.array(z.lazy(() => PostTransactionsItems$outboundSchema)),
  status: PostTransactionsStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  paymentDetails: z.union([
    z.lazy(() => One$outboundSchema),
    z.lazy(() => Three$outboundSchema),
    z.lazy(() => Two$outboundSchema),
  ]),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(PostTransactionsCollectionMode$outboundSchema)
    .optional(),
  customData: z.lazy(() => PostTransactionsCustomData$outboundSchema)
    .optional(),
  currentBillingPeriod: z.lazy(() =>
    PostTransactionsCurrentBillingPeriod$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    paymentDetails: "payment_details",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsRequestBody$ {
  /** @deprecated use `PostTransactionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsRequestBody$inboundSchema;
  /** @deprecated use `PostTransactionsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsRequestBody$outboundSchema;
  /** @deprecated use `PostTransactionsRequestBody$Outbound` instead. */
  export type Outbound = PostTransactionsRequestBody$Outbound;
}

export function postTransactionsRequestBodyToJSON(
  postTransactionsRequestBody: PostTransactionsRequestBody,
): string {
  return JSON.stringify(
    PostTransactionsRequestBody$outboundSchema.parse(
      postTransactionsRequestBody,
    ),
  );
}

export function postTransactionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsTransactionsStatus
> = z.nativeEnum(PostTransactionsTransactionsStatus);

/** @internal */
export const PostTransactionsTransactionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsTransactionsStatus
> = PostTransactionsTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsStatus$ {
  /** @deprecated use `PostTransactionsTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsTransactionsStatus$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsStatus$outboundSchema;
}

/** @internal */
export const PostTransactionsTransactionsCollectionMode$inboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsTransactionsCollectionMode> = z
    .nativeEnum(PostTransactionsTransactionsCollectionMode);

/** @internal */
export const PostTransactionsTransactionsCollectionMode$outboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsTransactionsCollectionMode> =
    PostTransactionsTransactionsCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsCollectionMode$ {
  /** @deprecated use `PostTransactionsTransactionsCollectionMode$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsCollectionMode$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsCollectionMode$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsCollectionMode$outboundSchema;
}

/** @internal */
export const PostTransactionsTransactionsCustomData$inboundSchema: z.ZodType<
  PostTransactionsTransactionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostTransactionsTransactionsCustomData$Outbound = {};

/** @internal */
export const PostTransactionsTransactionsCustomData$outboundSchema: z.ZodType<
  PostTransactionsTransactionsCustomData$Outbound,
  z.ZodTypeDef,
  PostTransactionsTransactionsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsCustomData$ {
  /** @deprecated use `PostTransactionsTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsCustomData$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsCustomData$outboundSchema;
  /** @deprecated use `PostTransactionsTransactionsCustomData$Outbound` instead. */
  export type Outbound = PostTransactionsTransactionsCustomData$Outbound;
}

export function postTransactionsTransactionsCustomDataToJSON(
  postTransactionsTransactionsCustomData:
    PostTransactionsTransactionsCustomData,
): string {
  return JSON.stringify(
    PostTransactionsTransactionsCustomData$outboundSchema.parse(
      postTransactionsTransactionsCustomData,
    ),
  );
}

export function postTransactionsTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsTransactionsCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsTransactionsCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    PostTransactionsTransactionsCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type PostTransactionsTransactionsCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const PostTransactionsTransactionsCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    PostTransactionsTransactionsCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    PostTransactionsTransactionsCurrentBillingPeriod
  > = z.object({
    startsAt: z.date().transform(v => v.toISOString()),
    endsAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsCurrentBillingPeriod$ {
  /** @deprecated use `PostTransactionsTransactionsCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PostTransactionsTransactionsCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    PostTransactionsTransactionsCurrentBillingPeriod$Outbound;
}

export function postTransactionsTransactionsCurrentBillingPeriodToJSON(
  postTransactionsTransactionsCurrentBillingPeriod:
    PostTransactionsTransactionsCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PostTransactionsTransactionsCurrentBillingPeriod$outboundSchema.parse(
      postTransactionsTransactionsCurrentBillingPeriod,
    ),
  );
}

export function postTransactionsTransactionsCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostTransactionsTransactionsCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsTransactionsCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostTransactionsTransactionsCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const Total$inboundSchema: z.ZodType<Total, z.ZodTypeDef, unknown> = z
  .object({
    subtotal: z.number(),
    discount: z.number(),
    grand_total: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "grand_total": "grandTotal",
    });
  });

/** @internal */
export type Total$Outbound = {
  subtotal: number;
  discount: number;
  grand_total: number;
};

/** @internal */
export const Total$outboundSchema: z.ZodType<
  Total$Outbound,
  z.ZodTypeDef,
  Total
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grandTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    grandTotal: "grand_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Total$ {
  /** @deprecated use `Total$inboundSchema` instead. */
  export const inboundSchema = Total$inboundSchema;
  /** @deprecated use `Total$outboundSchema` instead. */
  export const outboundSchema = Total$outboundSchema;
  /** @deprecated use `Total$Outbound` instead. */
  export type Outbound = Total$Outbound;
}

export function totalToJSON(total: Total): string {
  return JSON.stringify(Total$outboundSchema.parse(total));
}

export function totalFromJSON(
  jsonString: string,
): SafeParseResult<Total, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Total$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Total' from JSON`,
  );
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({
    total: z.lazy(() => Total$inboundSchema),
  });

/** @internal */
export type Details$Outbound = {
  total: Total$Outbound;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({
  total: z.lazy(() => Total$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsTransactionsType
> = z.nativeEnum(PostTransactionsTransactionsType);

/** @internal */
export const PostTransactionsTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsTransactionsType
> = PostTransactionsTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsType$ {
  /** @deprecated use `PostTransactionsTransactionsType$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsTransactionsType$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsType$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsTransactionsType$outboundSchema;
}

/** @internal */
export const PostTransactionsInterval$inboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsInterval
> = z.nativeEnum(PostTransactionsInterval);

/** @internal */
export const PostTransactionsInterval$outboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsInterval
> = PostTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsInterval$ {
  /** @deprecated use `PostTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsInterval$inboundSchema;
  /** @deprecated use `PostTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsInterval$outboundSchema;
}

/** @internal */
export const PostTransactionsBillingCycle$inboundSchema: z.ZodType<
  PostTransactionsBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PostTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PostTransactionsBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostTransactionsBillingCycle$outboundSchema: z.ZodType<
  PostTransactionsBillingCycle$Outbound,
  z.ZodTypeDef,
  PostTransactionsBillingCycle
> = z.object({
  interval: PostTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsBillingCycle$ {
  /** @deprecated use `PostTransactionsBillingCycle$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsBillingCycle$inboundSchema;
  /** @deprecated use `PostTransactionsBillingCycle$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsBillingCycle$outboundSchema;
  /** @deprecated use `PostTransactionsBillingCycle$Outbound` instead. */
  export type Outbound = PostTransactionsBillingCycle$Outbound;
}

export function postTransactionsBillingCycleToJSON(
  postTransactionsBillingCycle: PostTransactionsBillingCycle,
): string {
  return JSON.stringify(
    PostTransactionsBillingCycle$outboundSchema.parse(
      postTransactionsBillingCycle,
    ),
  );
}

export function postTransactionsBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsInterval$inboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsTransactionsInterval> = z.nativeEnum(
    PostTransactionsTransactionsInterval,
  );

/** @internal */
export const PostTransactionsTransactionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsTransactionsInterval> =
    PostTransactionsTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsInterval$ {
  /** @deprecated use `PostTransactionsTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsInterval$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsInterval$outboundSchema;
}

/** @internal */
export const PostTransactionsTrialPeriod$inboundSchema: z.ZodType<
  PostTransactionsTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PostTransactionsTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PostTransactionsTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostTransactionsTrialPeriod$outboundSchema: z.ZodType<
  PostTransactionsTrialPeriod$Outbound,
  z.ZodTypeDef,
  PostTransactionsTrialPeriod
> = z.object({
  interval: PostTransactionsTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTrialPeriod$ {
  /** @deprecated use `PostTransactionsTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsTrialPeriod$inboundSchema;
  /** @deprecated use `PostTransactionsTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsTrialPeriod$outboundSchema;
  /** @deprecated use `PostTransactionsTrialPeriod$Outbound` instead. */
  export type Outbound = PostTransactionsTrialPeriod$Outbound;
}

export function postTransactionsTrialPeriodToJSON(
  postTransactionsTrialPeriod: PostTransactionsTrialPeriod,
): string {
  return JSON.stringify(
    PostTransactionsTrialPeriod$outboundSchema.parse(
      postTransactionsTrialPeriod,
    ),
  );
}

export function postTransactionsTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PostTransactionsUnitPrice$inboundSchema: z.ZodType<
  PostTransactionsUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PostTransactionsUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PostTransactionsUnitPrice$outboundSchema: z.ZodType<
  PostTransactionsUnitPrice$Outbound,
  z.ZodTypeDef,
  PostTransactionsUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsUnitPrice$ {
  /** @deprecated use `PostTransactionsUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsUnitPrice$inboundSchema;
  /** @deprecated use `PostTransactionsUnitPrice$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsUnitPrice$outboundSchema;
  /** @deprecated use `PostTransactionsUnitPrice$Outbound` instead. */
  export type Outbound = PostTransactionsUnitPrice$Outbound;
}

export function postTransactionsUnitPriceToJSON(
  postTransactionsUnitPrice: PostTransactionsUnitPrice,
): string {
  return JSON.stringify(
    PostTransactionsUnitPrice$outboundSchema.parse(postTransactionsUnitPrice),
  );
}

export function postTransactionsUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsUnitPrice' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > = z.nativeEnum(
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus,
  );

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema;
}

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$inboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$Outbound =
  {};

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$outboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$Outbound,
    z.ZodTypeDef,
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$outboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$Outbound` instead. */
  export type Outbound =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$Outbound;
}

export function postTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomDataToJSON(
  postTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData:
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData,
): string {
  return JSON.stringify(
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$outboundSchema
      .parse(
        postTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData,
      ),
  );
}

export function postTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData' from JSON`,
  );
}

/** @internal */
export const Price$inboundSchema: z.ZodType<Price, z.ZodTypeDef, unknown> = z
  .object({
    product_id: z.string(),
    description: z.nullable(z.string()).optional(),
    type: PostTransactionsTransactionsType$inboundSchema,
    name: z.string(),
    billing_cycle: z.lazy(() => PostTransactionsBillingCycle$inboundSchema),
    trial_period: z.lazy(() => PostTransactionsTrialPeriod$inboundSchema),
    unit_price: z.lazy(() => PostTransactionsUnitPrice$inboundSchema),
    status:
      PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema,
    custom_data: z.lazy(() =>
      PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$inboundSchema
    ).optional(),
    id: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "product_id": "productId",
      "billing_cycle": "billingCycle",
      "trial_period": "trialPeriod",
      "unit_price": "unitPrice",
      "custom_data": "customData",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Price$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: PostTransactionsBillingCycle$Outbound;
  trial_period: PostTransactionsTrialPeriod$Outbound;
  unit_price: PostTransactionsUnitPrice$Outbound;
  status: string;
  custom_data?:
    | PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const Price$outboundSchema: z.ZodType<
  Price$Outbound,
  z.ZodTypeDef,
  Price
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostTransactionsTransactionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => PostTransactionsBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => PostTransactionsTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => PostTransactionsUnitPrice$outboundSchema),
  status:
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema,
  customData: z.lazy(() =>
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Price$ {
  /** @deprecated use `Price$inboundSchema` instead. */
  export const inboundSchema = Price$inboundSchema;
  /** @deprecated use `Price$outboundSchema` instead. */
  export const outboundSchema = Price$outboundSchema;
  /** @deprecated use `Price$Outbound` instead. */
  export type Outbound = Price$Outbound;
}

export function priceToJSON(price: Price): string {
  return JSON.stringify(Price$outboundSchema.parse(price));
}

export function priceFromJSON(
  jsonString: string,
): SafeParseResult<Price, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Price$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Price' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  > = z.nativeEnum(
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus,
  );

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  > =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema;
}

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound =
  {};

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound,
    z.ZodTypeDef,
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound` instead. */
  export type Outbound =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound;
}

export function postTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomDataToJSON(
  postTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData:
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData,
): string {
  return JSON.stringify(
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema
      .parse(
        postTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData,
      ),
  );
}

export function postTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData' from JSON`,
  );
}

/** @internal */
export const Product$inboundSchema: z.ZodType<Product, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
    description: z.string(),
    status:
      PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
    custom_data: z.lazy(() =>
      PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "custom_data": "customData",
    });
  });

/** @internal */
export type Product$Outbound = {
  id: string;
  name: string;
  description: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  custom_data:
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound;
};

/** @internal */
export const Product$outboundSchema: z.ZodType<
  Product$Outbound,
  z.ZodTypeDef,
  Product
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  customData: z.lazy(() =>
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Product$ {
  /** @deprecated use `Product$inboundSchema` instead. */
  export const inboundSchema = Product$inboundSchema;
  /** @deprecated use `Product$outboundSchema` instead. */
  export const outboundSchema = Product$outboundSchema;
  /** @deprecated use `Product$Outbound` instead. */
  export type Outbound = Product$Outbound;
}

export function productToJSON(product: Product): string {
  return JSON.stringify(Product$outboundSchema.parse(product));
}

export function productFromJSON(
  jsonString: string,
): SafeParseResult<Product, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Product$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Product' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsItems$inboundSchema: z.ZodType<
  PostTransactionsTransactionsItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.lazy(() => Price$inboundSchema),
  quantity: z.number(),
  product: z.lazy(() => Product$inboundSchema),
});

/** @internal */
export type PostTransactionsTransactionsItems$Outbound = {
  price: Price$Outbound;
  quantity: number;
  product: Product$Outbound;
};

/** @internal */
export const PostTransactionsTransactionsItems$outboundSchema: z.ZodType<
  PostTransactionsTransactionsItems$Outbound,
  z.ZodTypeDef,
  PostTransactionsTransactionsItems
> = z.object({
  price: z.lazy(() => Price$outboundSchema),
  quantity: z.number(),
  product: z.lazy(() => Product$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsItems$ {
  /** @deprecated use `PostTransactionsTransactionsItems$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsTransactionsItems$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsItems$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsItems$outboundSchema;
  /** @deprecated use `PostTransactionsTransactionsItems$Outbound` instead. */
  export type Outbound = PostTransactionsTransactionsItems$Outbound;
}

export function postTransactionsTransactionsItemsToJSON(
  postTransactionsTransactionsItems: PostTransactionsTransactionsItems,
): string {
  return JSON.stringify(
    PostTransactionsTransactionsItems$outboundSchema.parse(
      postTransactionsTransactionsItems,
    ),
  );
}

export function postTransactionsTransactionsItemsFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsTransactionsItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsTransactionsItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsTransactionsItems' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsTransactionsResponseStatus> = z
    .nativeEnum(PostTransactionsTransactionsResponseStatus);

/** @internal */
export const PostTransactionsTransactionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsTransactionsResponseStatus> =
    PostTransactionsTransactionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponseStatus$ {
  /** @deprecated use `PostTransactionsTransactionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponseStatus$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponseStatus$outboundSchema;
}

/** @internal */
export const PostTransactionsPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsPaymentMethod
> = z.nativeEnum(PostTransactionsPaymentMethod);

/** @internal */
export const PostTransactionsPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsPaymentMethod
> = PostTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsPaymentMethod$ {
  /** @deprecated use `PostTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `PostTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const ProviderMetadata$inboundSchema: z.ZodType<
  ProviderMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ProviderMetadata$Outbound = {};

/** @internal */
export const ProviderMetadata$outboundSchema: z.ZodType<
  ProviderMetadata$Outbound,
  z.ZodTypeDef,
  ProviderMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderMetadata$ {
  /** @deprecated use `ProviderMetadata$inboundSchema` instead. */
  export const inboundSchema = ProviderMetadata$inboundSchema;
  /** @deprecated use `ProviderMetadata$outboundSchema` instead. */
  export const outboundSchema = ProviderMetadata$outboundSchema;
  /** @deprecated use `ProviderMetadata$Outbound` instead. */
  export type Outbound = ProviderMetadata$Outbound;
}

export function providerMetadataToJSON(
  providerMetadata: ProviderMetadata,
): string {
  return JSON.stringify(
    ProviderMetadata$outboundSchema.parse(providerMetadata),
  );
}

export function providerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProviderMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProviderMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProviderMetadata' from JSON`,
  );
}

/** @internal */
export const PostTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsMethodDetailsTransactionsPaymentMethod
  > = z.nativeEnum(PostTransactionsMethodDetailsTransactionsPaymentMethod);

/** @internal */
export const PostTransactionsMethodDetailsTransactionsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsMethodDetailsTransactionsPaymentMethod
  > = PostTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsMethodDetailsTransactionsPaymentMethod$ {
  /** @deprecated use `PostTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `PostTransactionsMethodDetailsTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsMethodDetailsTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const PostTransactionsMethodDetailsTransactionsDetails$inboundSchema:
  z.ZodType<
    PostTransactionsMethodDetailsTransactionsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bank_name: z.string(),
    bank_reference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "bank_name": "bankName",
      "bank_reference": "bankReference",
    });
  });

/** @internal */
export type PostTransactionsMethodDetailsTransactionsDetails$Outbound = {
  bank_name: string;
  bank_reference: string;
};

/** @internal */
export const PostTransactionsMethodDetailsTransactionsDetails$outboundSchema:
  z.ZodType<
    PostTransactionsMethodDetailsTransactionsDetails$Outbound,
    z.ZodTypeDef,
    PostTransactionsMethodDetailsTransactionsDetails
  > = z.object({
    bankName: z.string(),
    bankReference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bankName: "bank_name",
      bankReference: "bank_reference",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsMethodDetailsTransactionsDetails$ {
  /** @deprecated use `PostTransactionsMethodDetailsTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsMethodDetailsTransactionsDetails$inboundSchema;
  /** @deprecated use `PostTransactionsMethodDetailsTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsMethodDetailsTransactionsDetails$outboundSchema;
  /** @deprecated use `PostTransactionsMethodDetailsTransactionsDetails$Outbound` instead. */
  export type Outbound =
    PostTransactionsMethodDetailsTransactionsDetails$Outbound;
}

export function postTransactionsMethodDetailsTransactionsDetailsToJSON(
  postTransactionsMethodDetailsTransactionsDetails:
    PostTransactionsMethodDetailsTransactionsDetails,
): string {
  return JSON.stringify(
    PostTransactionsMethodDetailsTransactionsDetails$outboundSchema.parse(
      postTransactionsMethodDetailsTransactionsDetails,
    ),
  );
}

export function postTransactionsMethodDetailsTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostTransactionsMethodDetailsTransactionsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsMethodDetailsTransactionsDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostTransactionsMethodDetailsTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const MethodDetails3$inboundSchema: z.ZodType<
  MethodDetails3,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    PostTransactionsMethodDetailsTransactionsPaymentMethod$inboundSchema,
  details: z.lazy(() =>
    PostTransactionsMethodDetailsTransactionsDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type MethodDetails3$Outbound = {
  payment_method: string;
  details: PostTransactionsMethodDetailsTransactionsDetails$Outbound;
};

/** @internal */
export const MethodDetails3$outboundSchema: z.ZodType<
  MethodDetails3$Outbound,
  z.ZodTypeDef,
  MethodDetails3
> = z.object({
  paymentMethod:
    PostTransactionsMethodDetailsTransactionsPaymentMethod$outboundSchema,
  details: z.lazy(() =>
    PostTransactionsMethodDetailsTransactionsDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetails3$ {
  /** @deprecated use `MethodDetails3$inboundSchema` instead. */
  export const inboundSchema = MethodDetails3$inboundSchema;
  /** @deprecated use `MethodDetails3$outboundSchema` instead. */
  export const outboundSchema = MethodDetails3$outboundSchema;
  /** @deprecated use `MethodDetails3$Outbound` instead. */
  export type Outbound = MethodDetails3$Outbound;
}

export function methodDetails3ToJSON(methodDetails3: MethodDetails3): string {
  return JSON.stringify(MethodDetails3$outboundSchema.parse(methodDetails3));
}

export function methodDetails3FromJSON(
  jsonString: string,
): SafeParseResult<MethodDetails3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetails3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetails3' from JSON`,
  );
}

/** @internal */
export const PostTransactionsMethodDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsMethodDetailsPaymentMethod> = z
    .nativeEnum(PostTransactionsMethodDetailsPaymentMethod);

/** @internal */
export const PostTransactionsMethodDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsMethodDetailsPaymentMethod> =
    PostTransactionsMethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsMethodDetailsPaymentMethod$ {
  /** @deprecated use `PostTransactionsMethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsMethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `PostTransactionsMethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsMethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const PostTransactionsMethodDetailsDetails$inboundSchema: z.ZodType<
  PostTransactionsMethodDetailsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  last4: z.string(),
  brand: z.string(),
  exp_month: z.number(),
  exp_year: z.number(),
  cardholder_name: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "exp_month": "expMonth",
    "exp_year": "expYear",
    "cardholder_name": "cardholderName",
  });
});

/** @internal */
export type PostTransactionsMethodDetailsDetails$Outbound = {
  last4: string;
  brand: string;
  exp_month: number;
  exp_year: number;
  cardholder_name: string | null;
};

/** @internal */
export const PostTransactionsMethodDetailsDetails$outboundSchema: z.ZodType<
  PostTransactionsMethodDetailsDetails$Outbound,
  z.ZodTypeDef,
  PostTransactionsMethodDetailsDetails
> = z.object({
  last4: z.string(),
  brand: z.string(),
  expMonth: z.number(),
  expYear: z.number(),
  cardholderName: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    expMonth: "exp_month",
    expYear: "exp_year",
    cardholderName: "cardholder_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsMethodDetailsDetails$ {
  /** @deprecated use `PostTransactionsMethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsMethodDetailsDetails$inboundSchema;
  /** @deprecated use `PostTransactionsMethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsMethodDetailsDetails$outboundSchema;
  /** @deprecated use `PostTransactionsMethodDetailsDetails$Outbound` instead. */
  export type Outbound = PostTransactionsMethodDetailsDetails$Outbound;
}

export function postTransactionsMethodDetailsDetailsToJSON(
  postTransactionsMethodDetailsDetails: PostTransactionsMethodDetailsDetails,
): string {
  return JSON.stringify(
    PostTransactionsMethodDetailsDetails$outboundSchema.parse(
      postTransactionsMethodDetailsDetails,
    ),
  );
}

export function postTransactionsMethodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsMethodDetailsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsMethodDetailsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsMethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const MethodDetails2$inboundSchema: z.ZodType<
  MethodDetails2,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method: PostTransactionsMethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() => PostTransactionsMethodDetailsDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type MethodDetails2$Outbound = {
  payment_method: string;
  details: PostTransactionsMethodDetailsDetails$Outbound;
};

/** @internal */
export const MethodDetails2$outboundSchema: z.ZodType<
  MethodDetails2$Outbound,
  z.ZodTypeDef,
  MethodDetails2
> = z.object({
  paymentMethod: PostTransactionsMethodDetailsPaymentMethod$outboundSchema,
  details: z.lazy(() => PostTransactionsMethodDetailsDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetails2$ {
  /** @deprecated use `MethodDetails2$inboundSchema` instead. */
  export const inboundSchema = MethodDetails2$inboundSchema;
  /** @deprecated use `MethodDetails2$outboundSchema` instead. */
  export const outboundSchema = MethodDetails2$outboundSchema;
  /** @deprecated use `MethodDetails2$Outbound` instead. */
  export type Outbound = MethodDetails2$Outbound;
}

export function methodDetails2ToJSON(methodDetails2: MethodDetails2): string {
  return JSON.stringify(MethodDetails2$outboundSchema.parse(methodDetails2));
}

export function methodDetails2FromJSON(
  jsonString: string,
): SafeParseResult<MethodDetails2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetails2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetails2' from JSON`,
  );
}

/** @internal */
export const MethodDetailsPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof MethodDetailsPaymentMethod
> = z.nativeEnum(MethodDetailsPaymentMethod);

/** @internal */
export const MethodDetailsPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof MethodDetailsPaymentMethod
> = MethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetailsPaymentMethod$ {
  /** @deprecated use `MethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = MethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `MethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = MethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const MethodDetailsDetails$inboundSchema: z.ZodType<
  MethodDetailsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: z.string(),
  phone_suffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    "phone_suffix": "phoneSuffix",
  });
});

/** @internal */
export type MethodDetailsDetails$Outbound = {
  network: string;
  phone_suffix: string;
};

/** @internal */
export const MethodDetailsDetails$outboundSchema: z.ZodType<
  MethodDetailsDetails$Outbound,
  z.ZodTypeDef,
  MethodDetailsDetails
> = z.object({
  network: z.string(),
  phoneSuffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    phoneSuffix: "phone_suffix",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetailsDetails$ {
  /** @deprecated use `MethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema = MethodDetailsDetails$inboundSchema;
  /** @deprecated use `MethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema = MethodDetailsDetails$outboundSchema;
  /** @deprecated use `MethodDetailsDetails$Outbound` instead. */
  export type Outbound = MethodDetailsDetails$Outbound;
}

export function methodDetailsDetailsToJSON(
  methodDetailsDetails: MethodDetailsDetails,
): string {
  return JSON.stringify(
    MethodDetailsDetails$outboundSchema.parse(methodDetailsDetails),
  );
}

export function methodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<MethodDetailsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetailsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const MethodDetails1$inboundSchema: z.ZodType<
  MethodDetails1,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method: MethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() => MethodDetailsDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type MethodDetails1$Outbound = {
  payment_method: string;
  details: MethodDetailsDetails$Outbound;
};

/** @internal */
export const MethodDetails1$outboundSchema: z.ZodType<
  MethodDetails1$Outbound,
  z.ZodTypeDef,
  MethodDetails1
> = z.object({
  paymentMethod: MethodDetailsPaymentMethod$outboundSchema,
  details: z.lazy(() => MethodDetailsDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetails1$ {
  /** @deprecated use `MethodDetails1$inboundSchema` instead. */
  export const inboundSchema = MethodDetails1$inboundSchema;
  /** @deprecated use `MethodDetails1$outboundSchema` instead. */
  export const outboundSchema = MethodDetails1$outboundSchema;
  /** @deprecated use `MethodDetails1$Outbound` instead. */
  export type Outbound = MethodDetails1$Outbound;
}

export function methodDetails1ToJSON(methodDetails1: MethodDetails1): string {
  return JSON.stringify(MethodDetails1$outboundSchema.parse(methodDetails1));
}

export function methodDetails1FromJSON(
  jsonString: string,
): SafeParseResult<MethodDetails1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetails1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetails1' from JSON`,
  );
}

/** @internal */
export const MethodDetails$inboundSchema: z.ZodType<
  MethodDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MethodDetails1$inboundSchema),
  z.lazy(() => MethodDetails2$inboundSchema),
  z.lazy(() => MethodDetails3$inboundSchema),
]);

/** @internal */
export type MethodDetails$Outbound =
  | MethodDetails1$Outbound
  | MethodDetails2$Outbound
  | MethodDetails3$Outbound;

/** @internal */
export const MethodDetails$outboundSchema: z.ZodType<
  MethodDetails$Outbound,
  z.ZodTypeDef,
  MethodDetails
> = z.union([
  z.lazy(() => MethodDetails1$outboundSchema),
  z.lazy(() => MethodDetails2$outboundSchema),
  z.lazy(() => MethodDetails3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetails$ {
  /** @deprecated use `MethodDetails$inboundSchema` instead. */
  export const inboundSchema = MethodDetails$inboundSchema;
  /** @deprecated use `MethodDetails$outboundSchema` instead. */
  export const outboundSchema = MethodDetails$outboundSchema;
  /** @deprecated use `MethodDetails$Outbound` instead. */
  export type Outbound = MethodDetails$Outbound;
}

export function methodDetailsToJSON(methodDetails: MethodDetails): string {
  return JSON.stringify(MethodDetails$outboundSchema.parse(methodDetails));
}

export function methodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<MethodDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetails' from JSON`,
  );
}

/** @internal */
export const Payments$inboundSchema: z.ZodType<
  Payments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: PostTransactionsTransactionsResponseStatus$inboundSchema,
  payment_method: PostTransactionsPaymentMethod$inboundSchema,
  provider: Provider$inboundSchema,
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  provider_reference: z.nullable(z.string()),
  provider_metadata: z.lazy(() => ProviderMetadata$inboundSchema),
  method_details: z.union([
    z.lazy(() => MethodDetails1$inboundSchema),
    z.lazy(() => MethodDetails2$inboundSchema),
    z.lazy(() => MethodDetails3$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "provider_reference": "providerReference",
    "provider_metadata": "providerMetadata",
    "method_details": "methodDetails",
  });
});

/** @internal */
export type Payments$Outbound = {
  id: string;
  status: string;
  payment_method: string;
  provider: string;
  created_at: string;
  updated_at?: string | null | undefined;
  provider_reference: string | null;
  provider_metadata: ProviderMetadata$Outbound;
  method_details:
    | MethodDetails1$Outbound
    | MethodDetails2$Outbound
    | MethodDetails3$Outbound;
};

/** @internal */
export const Payments$outboundSchema: z.ZodType<
  Payments$Outbound,
  z.ZodTypeDef,
  Payments
> = z.object({
  id: z.string(),
  status: PostTransactionsTransactionsResponseStatus$outboundSchema,
  paymentMethod: PostTransactionsPaymentMethod$outboundSchema,
  provider: Provider$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  providerReference: z.nullable(z.string()),
  providerMetadata: z.lazy(() => ProviderMetadata$outboundSchema),
  methodDetails: z.union([
    z.lazy(() => MethodDetails1$outboundSchema),
    z.lazy(() => MethodDetails2$outboundSchema),
    z.lazy(() => MethodDetails3$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    createdAt: "created_at",
    updatedAt: "updated_at",
    providerReference: "provider_reference",
    providerMetadata: "provider_metadata",
    methodDetails: "method_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payments$ {
  /** @deprecated use `Payments$inboundSchema` instead. */
  export const inboundSchema = Payments$inboundSchema;
  /** @deprecated use `Payments$outboundSchema` instead. */
  export const outboundSchema = Payments$outboundSchema;
  /** @deprecated use `Payments$Outbound` instead. */
  export type Outbound = Payments$Outbound;
}

export function paymentsToJSON(payments: Payments): string {
  return JSON.stringify(Payments$outboundSchema.parse(payments));
}

export function paymentsFromJSON(
  jsonString: string,
): SafeParseResult<Payments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payments' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsTransactionsResponse200Status> = z
    .nativeEnum(PostTransactionsTransactionsResponse200Status);

/** @internal */
export const PostTransactionsTransactionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof PostTransactionsTransactionsResponse200Status> =
    PostTransactionsTransactionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200Status$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200Status$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200Status$outboundSchema;
}

/** @internal */
export const PostTransactionsTransactionsResponseCustomData$inboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostTransactionsTransactionsResponseCustomData$Outbound = {};

/** @internal */
export const PostTransactionsTransactionsResponseCustomData$outboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponseCustomData$Outbound,
    z.ZodTypeDef,
    PostTransactionsTransactionsResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponseCustomData$ {
  /** @deprecated use `PostTransactionsTransactionsResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponseCustomData$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponseCustomData$outboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponseCustomData$Outbound` instead. */
  export type Outbound =
    PostTransactionsTransactionsResponseCustomData$Outbound;
}

export function postTransactionsTransactionsResponseCustomDataToJSON(
  postTransactionsTransactionsResponseCustomData:
    PostTransactionsTransactionsResponseCustomData,
): string {
  return JSON.stringify(
    PostTransactionsTransactionsResponseCustomData$outboundSchema.parse(
      postTransactionsTransactionsResponseCustomData,
    ),
  );
}

export function postTransactionsTransactionsResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostTransactionsTransactionsResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsTransactionsResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostTransactionsTransactionsResponseCustomData' from JSON`,
  );
}

/** @internal */
export const Customer$inboundSchema: z.ZodType<
  Customer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(
    PostTransactionsTransactionsResponse200Status$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    PostTransactionsTransactionsResponseCustomData$inboundSchema
  ),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type Customer$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  custom_data: PostTransactionsTransactionsResponseCustomData$Outbound;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const Customer$outboundSchema: z.ZodType<
  Customer$Outbound,
  z.ZodTypeDef,
  Customer
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(
    PostTransactionsTransactionsResponse200Status$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PostTransactionsTransactionsResponseCustomData$outboundSchema
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customer$ {
  /** @deprecated use `Customer$inboundSchema` instead. */
  export const inboundSchema = Customer$inboundSchema;
  /** @deprecated use `Customer$outboundSchema` instead. */
  export const outboundSchema = Customer$outboundSchema;
  /** @deprecated use `Customer$Outbound` instead. */
  export type Outbound = Customer$Outbound;
}

export function customerToJSON(customer: Customer): string {
  return JSON.stringify(Customer$outboundSchema.parse(customer));
}

export function customerFromJSON(
  jsonString: string,
): SafeParseResult<Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customer' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsResponse200CustomData$inboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostTransactionsTransactionsResponse200CustomData$Outbound = {};

/** @internal */
export const PostTransactionsTransactionsResponse200CustomData$outboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponse200CustomData$Outbound,
    z.ZodTypeDef,
    PostTransactionsTransactionsResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200CustomData$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200CustomData$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200CustomData$outboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200CustomData$Outbound` instead. */
  export type Outbound =
    PostTransactionsTransactionsResponse200CustomData$Outbound;
}

export function postTransactionsTransactionsResponse200CustomDataToJSON(
  postTransactionsTransactionsResponse200CustomData:
    PostTransactionsTransactionsResponse200CustomData,
): string {
  return JSON.stringify(
    PostTransactionsTransactionsResponse200CustomData$outboundSchema.parse(
      postTransactionsTransactionsResponse200CustomData,
    ),
  );
}

export function postTransactionsTransactionsResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostTransactionsTransactionsResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsTransactionsResponse200CustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostTransactionsTransactionsResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    PostTransactionsTransactionsResponse200ApplicationJSONStatus,
  );

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONStatus
  > =
    PostTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    description: z.nullable(z.string()).optional(),
    first_line: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      PostTransactionsTransactionsResponse200CustomData$inboundSchema
    ),
    city: z.nullable(z.string()).optional(),
    status: z.nullable(
      PostTransactionsTransactionsResponse200ApplicationJSONStatus$inboundSchema,
    ).optional(),
    created_at: z.string(),
    updated_at: z.string(),
    customer_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_line": "firstLine",
      "custom_data": "customData",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "customer_id": "customerId",
    });
  });

/** @internal */
export type Address$Outbound = {
  id: string;
  description?: string | null | undefined;
  first_line?: string | null | undefined;
  custom_data: PostTransactionsTransactionsResponse200CustomData$Outbound;
  city?: string | null | undefined;
  status?: string | null | undefined;
  created_at: string;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<
  Address$Outbound,
  z.ZodTypeDef,
  Address
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PostTransactionsTransactionsResponse200CustomData$outboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(
    PostTransactionsTransactionsResponse200ApplicationJSONStatus$outboundSchema,
  ).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstLine: "first_line",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
  /** @deprecated use `Address$inboundSchema` instead. */
  export const inboundSchema = Address$inboundSchema;
  /** @deprecated use `Address$outboundSchema` instead. */
  export const outboundSchema = Address$outboundSchema;
  /** @deprecated use `Address$Outbound` instead. */
  export type Outbound = Address$Outbound;
}

export function addressToJSON(address: Address): string {
  return JSON.stringify(Address$outboundSchema.parse(address));
}

export function addressFromJSON(
  jsonString: string,
): SafeParseResult<Address, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Address$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Address' from JSON`,
  );
}

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus
  > =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const PostTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsType
> = z.nativeEnum(PostTransactionsType);

/** @internal */
export const PostTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof PostTransactionsType
> = PostTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsType$ {
  /** @deprecated use `PostTransactionsType$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsType$inboundSchema;
  /** @deprecated use `PostTransactionsType$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsType$outboundSchema;
}

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound =
  {};

/** @internal */
export const PostTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema:
  z.ZodType<
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound,
    z.ZodTypeDef,
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsTransactionsResponse200ApplicationJSONCustomData$ {
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema;
  /** @deprecated use `PostTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound` instead. */
  export type Outbound =
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound;
}

export function postTransactionsTransactionsResponse200ApplicationJSONCustomDataToJSON(
  postTransactionsTransactionsResponse200ApplicationJSONCustomData:
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData,
): string {
  return JSON.stringify(
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema
      .parse(postTransactionsTransactionsResponse200ApplicationJSONCustomData),
  );
}

export function postTransactionsTransactionsResponse200ApplicationJSONCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostTransactionsTransactionsResponse200ApplicationJSONCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsTransactionsResponse200ApplicationJSONCustomData' from JSON`,
  );
}

/** @internal */
export const PostTransactionsDiscount$inboundSchema: z.ZodType<
  PostTransactionsDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: PostTransactionsType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type PostTransactionsDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PostTransactionsDiscount$outboundSchema: z.ZodType<
  PostTransactionsDiscount$Outbound,
  z.ZodTypeDef,
  PostTransactionsDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(
    PostTransactionsTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: PostTransactionsType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PostTransactionsTransactionsResponse200ApplicationJSONCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsDiscount$ {
  /** @deprecated use `PostTransactionsDiscount$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsDiscount$inboundSchema;
  /** @deprecated use `PostTransactionsDiscount$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsDiscount$outboundSchema;
  /** @deprecated use `PostTransactionsDiscount$Outbound` instead. */
  export type Outbound = PostTransactionsDiscount$Outbound;
}

export function postTransactionsDiscountToJSON(
  postTransactionsDiscount: PostTransactionsDiscount,
): string {
  return JSON.stringify(
    PostTransactionsDiscount$outboundSchema.parse(postTransactionsDiscount),
  );
}

export function postTransactionsDiscountFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsDiscount' from JSON`,
  );
}

/** @internal */
export const PostTransactionsResponseBody$inboundSchema: z.ZodType<
  PostTransactionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PostTransactionsTransactionsStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(
    PostTransactionsTransactionsCollectionMode$inboundSchema,
  ).optional(),
  custom_data: z.lazy(() =>
    PostTransactionsTransactionsCustomData$inboundSchema
  ).optional(),
  current_billing_period: z.lazy(() =>
    PostTransactionsTransactionsCurrentBillingPeriod$inboundSchema
  ).optional(),
  details: z.lazy(() => Details$inboundSchema),
  items: z.array(z.lazy(() => PostTransactionsTransactionsItems$inboundSchema)),
  payments: z.lazy(() => Payments$inboundSchema),
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  customer: z.lazy(() => Customer$inboundSchema),
  address: z.lazy(() => Address$inboundSchema),
  discount: z.nullable(z.lazy(() => PostTransactionsDiscount$inboundSchema))
    .optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type PostTransactionsResponseBody$Outbound = {
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: PostTransactionsTransactionsCustomData$Outbound | undefined;
  current_billing_period?:
    | PostTransactionsTransactionsCurrentBillingPeriod$Outbound
    | undefined;
  details: Details$Outbound;
  items: Array<PostTransactionsTransactionsItems$Outbound>;
  payments: Payments$Outbound;
  created_at: string;
  updated_at?: string | null | undefined;
  customer: Customer$Outbound;
  address: Address$Outbound;
  discount?: PostTransactionsDiscount$Outbound | null | undefined;
  invoice_id: string;
};

/** @internal */
export const PostTransactionsResponseBody$outboundSchema: z.ZodType<
  PostTransactionsResponseBody$Outbound,
  z.ZodTypeDef,
  PostTransactionsResponseBody
> = z.object({
  status: PostTransactionsTransactionsStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(
    PostTransactionsTransactionsCollectionMode$outboundSchema,
  ).optional(),
  customData: z.lazy(() =>
    PostTransactionsTransactionsCustomData$outboundSchema
  ).optional(),
  currentBillingPeriod: z.lazy(() =>
    PostTransactionsTransactionsCurrentBillingPeriod$outboundSchema
  ).optional(),
  details: z.lazy(() => Details$outboundSchema),
  items: z.array(
    z.lazy(() => PostTransactionsTransactionsItems$outboundSchema),
  ),
  payments: z.lazy(() => Payments$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  customer: z.lazy(() => Customer$outboundSchema),
  address: z.lazy(() => Address$outboundSchema),
  discount: z.nullable(z.lazy(() => PostTransactionsDiscount$outboundSchema))
    .optional(),
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
    createdAt: "created_at",
    updatedAt: "updated_at",
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsResponseBody$ {
  /** @deprecated use `PostTransactionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsResponseBody$inboundSchema;
  /** @deprecated use `PostTransactionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsResponseBody$outboundSchema;
  /** @deprecated use `PostTransactionsResponseBody$Outbound` instead. */
  export type Outbound = PostTransactionsResponseBody$Outbound;
}

export function postTransactionsResponseBodyToJSON(
  postTransactionsResponseBody: PostTransactionsResponseBody,
): string {
  return JSON.stringify(
    PostTransactionsResponseBody$outboundSchema.parse(
      postTransactionsResponseBody,
    ),
  );
}

export function postTransactionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsResponseBody' from JSON`,
  );
}
