/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type Type = ClosedEnum<typeof Type>;

export const Interval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type Interval = ClosedEnum<typeof Interval>;

export type BillingCycle = {
  interval: Interval;
  frequency: number;
};

export const PostPricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostPricesInterval = ClosedEnum<typeof PostPricesInterval>;

export type TrialPeriod = {
  interval: PostPricesInterval;
  frequency: number;
};

export type UnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PostPricesStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostPricesStatus = ClosedEnum<typeof PostPricesStatus>;

/**
 * Any valid JSON value
 */
export type PostPricesCustomData = {};

export type PostPricesRequestBody = {
  productId: string;
  description?: string | null | undefined;
  type: Type;
  name: string;
  billingCycle: BillingCycle;
  trialPeriod: TrialPeriod;
  unitPrice: UnitPrice;
  status: PostPricesStatus;
  /**
   * Any valid JSON value
   */
  customData?: PostPricesCustomData | undefined;
};

export const PostPricesType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PostPricesType = ClosedEnum<typeof PostPricesType>;

export const PostPricesPricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostPricesPricesInterval = ClosedEnum<
  typeof PostPricesPricesInterval
>;

export type PostPricesBillingCycle = {
  interval: PostPricesPricesInterval;
  frequency: number;
};

export const PostPricesPricesResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostPricesPricesResponseInterval = ClosedEnum<
  typeof PostPricesPricesResponseInterval
>;

export type PostPricesTrialPeriod = {
  interval: PostPricesPricesResponseInterval;
  frequency: number;
};

export type PostPricesUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PostPricesPricesStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostPricesPricesStatus = ClosedEnum<typeof PostPricesPricesStatus>;

/**
 * Any valid JSON value
 */
export type PostPricesPricesCustomData = {};

/**
 * Creates a new Price
 */
export type PostPricesResponseBody = {
  productId: string;
  description?: string | null | undefined;
  type: PostPricesType;
  name: string;
  billingCycle: PostPricesBillingCycle;
  trialPeriod: PostPricesTrialPeriod;
  unitPrice: PostPricesUnitPrice;
  status: PostPricesPricesStatus;
  /**
   * Any valid JSON value
   */
  customData?: PostPricesPricesCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Interval$inboundSchema: z.ZodNativeEnum<typeof Interval> = z
  .nativeEnum(Interval);

/** @internal */
export const Interval$outboundSchema: z.ZodNativeEnum<typeof Interval> =
  Interval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Interval$ {
  /** @deprecated use `Interval$inboundSchema` instead. */
  export const inboundSchema = Interval$inboundSchema;
  /** @deprecated use `Interval$outboundSchema` instead. */
  export const outboundSchema = Interval$outboundSchema;
}

/** @internal */
export const BillingCycle$inboundSchema: z.ZodType<
  BillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: Interval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type BillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const BillingCycle$outboundSchema: z.ZodType<
  BillingCycle$Outbound,
  z.ZodTypeDef,
  BillingCycle
> = z.object({
  interval: Interval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingCycle$ {
  /** @deprecated use `BillingCycle$inboundSchema` instead. */
  export const inboundSchema = BillingCycle$inboundSchema;
  /** @deprecated use `BillingCycle$outboundSchema` instead. */
  export const outboundSchema = BillingCycle$outboundSchema;
  /** @deprecated use `BillingCycle$Outbound` instead. */
  export type Outbound = BillingCycle$Outbound;
}

export function billingCycleToJSON(billingCycle: BillingCycle): string {
  return JSON.stringify(BillingCycle$outboundSchema.parse(billingCycle));
}

export function billingCycleFromJSON(
  jsonString: string,
): SafeParseResult<BillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingCycle' from JSON`,
  );
}

/** @internal */
export const PostPricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof PostPricesInterval
> = z.nativeEnum(PostPricesInterval);

/** @internal */
export const PostPricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof PostPricesInterval
> = PostPricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesInterval$ {
  /** @deprecated use `PostPricesInterval$inboundSchema` instead. */
  export const inboundSchema = PostPricesInterval$inboundSchema;
  /** @deprecated use `PostPricesInterval$outboundSchema` instead. */
  export const outboundSchema = PostPricesInterval$outboundSchema;
}

/** @internal */
export const TrialPeriod$inboundSchema: z.ZodType<
  TrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PostPricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TrialPeriod$outboundSchema: z.ZodType<
  TrialPeriod$Outbound,
  z.ZodTypeDef,
  TrialPeriod
> = z.object({
  interval: PostPricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrialPeriod$ {
  /** @deprecated use `TrialPeriod$inboundSchema` instead. */
  export const inboundSchema = TrialPeriod$inboundSchema;
  /** @deprecated use `TrialPeriod$outboundSchema` instead. */
  export const outboundSchema = TrialPeriod$outboundSchema;
  /** @deprecated use `TrialPeriod$Outbound` instead. */
  export type Outbound = TrialPeriod$Outbound;
}

export function trialPeriodToJSON(trialPeriod: TrialPeriod): string {
  return JSON.stringify(TrialPeriod$outboundSchema.parse(trialPeriod));
}

export function trialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrialPeriod' from JSON`,
  );
}

/** @internal */
export const UnitPrice$inboundSchema: z.ZodType<
  UnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type UnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const UnitPrice$outboundSchema: z.ZodType<
  UnitPrice$Outbound,
  z.ZodTypeDef,
  UnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnitPrice$ {
  /** @deprecated use `UnitPrice$inboundSchema` instead. */
  export const inboundSchema = UnitPrice$inboundSchema;
  /** @deprecated use `UnitPrice$outboundSchema` instead. */
  export const outboundSchema = UnitPrice$outboundSchema;
  /** @deprecated use `UnitPrice$Outbound` instead. */
  export type Outbound = UnitPrice$Outbound;
}

export function unitPriceToJSON(unitPrice: UnitPrice): string {
  return JSON.stringify(UnitPrice$outboundSchema.parse(unitPrice));
}

export function unitPriceFromJSON(
  jsonString: string,
): SafeParseResult<UnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnitPrice' from JSON`,
  );
}

/** @internal */
export const PostPricesStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostPricesStatus
> = z.nativeEnum(PostPricesStatus);

/** @internal */
export const PostPricesStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostPricesStatus
> = PostPricesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesStatus$ {
  /** @deprecated use `PostPricesStatus$inboundSchema` instead. */
  export const inboundSchema = PostPricesStatus$inboundSchema;
  /** @deprecated use `PostPricesStatus$outboundSchema` instead. */
  export const outboundSchema = PostPricesStatus$outboundSchema;
}

/** @internal */
export const PostPricesCustomData$inboundSchema: z.ZodType<
  PostPricesCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostPricesCustomData$Outbound = {};

/** @internal */
export const PostPricesCustomData$outboundSchema: z.ZodType<
  PostPricesCustomData$Outbound,
  z.ZodTypeDef,
  PostPricesCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesCustomData$ {
  /** @deprecated use `PostPricesCustomData$inboundSchema` instead. */
  export const inboundSchema = PostPricesCustomData$inboundSchema;
  /** @deprecated use `PostPricesCustomData$outboundSchema` instead. */
  export const outboundSchema = PostPricesCustomData$outboundSchema;
  /** @deprecated use `PostPricesCustomData$Outbound` instead. */
  export type Outbound = PostPricesCustomData$Outbound;
}

export function postPricesCustomDataToJSON(
  postPricesCustomData: PostPricesCustomData,
): string {
  return JSON.stringify(
    PostPricesCustomData$outboundSchema.parse(postPricesCustomData),
  );
}

export function postPricesCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesCustomData' from JSON`,
  );
}

/** @internal */
export const PostPricesRequestBody$inboundSchema: z.ZodType<
  PostPricesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: Type$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => BillingCycle$inboundSchema),
  trial_period: z.lazy(() => TrialPeriod$inboundSchema),
  unit_price: z.lazy(() => UnitPrice$inboundSchema),
  status: PostPricesStatus$inboundSchema,
  custom_data: z.lazy(() => PostPricesCustomData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
  });
});

/** @internal */
export type PostPricesRequestBody$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: BillingCycle$Outbound;
  trial_period: TrialPeriod$Outbound;
  unit_price: UnitPrice$Outbound;
  status: string;
  custom_data?: PostPricesCustomData$Outbound | undefined;
};

/** @internal */
export const PostPricesRequestBody$outboundSchema: z.ZodType<
  PostPricesRequestBody$Outbound,
  z.ZodTypeDef,
  PostPricesRequestBody
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: Type$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => BillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => TrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => UnitPrice$outboundSchema),
  status: PostPricesStatus$outboundSchema,
  customData: z.lazy(() => PostPricesCustomData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesRequestBody$ {
  /** @deprecated use `PostPricesRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostPricesRequestBody$inboundSchema;
  /** @deprecated use `PostPricesRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostPricesRequestBody$outboundSchema;
  /** @deprecated use `PostPricesRequestBody$Outbound` instead. */
  export type Outbound = PostPricesRequestBody$Outbound;
}

export function postPricesRequestBodyToJSON(
  postPricesRequestBody: PostPricesRequestBody,
): string {
  return JSON.stringify(
    PostPricesRequestBody$outboundSchema.parse(postPricesRequestBody),
  );
}

export function postPricesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesRequestBody' from JSON`,
  );
}

/** @internal */
export const PostPricesType$inboundSchema: z.ZodNativeEnum<
  typeof PostPricesType
> = z.nativeEnum(PostPricesType);

/** @internal */
export const PostPricesType$outboundSchema: z.ZodNativeEnum<
  typeof PostPricesType
> = PostPricesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesType$ {
  /** @deprecated use `PostPricesType$inboundSchema` instead. */
  export const inboundSchema = PostPricesType$inboundSchema;
  /** @deprecated use `PostPricesType$outboundSchema` instead. */
  export const outboundSchema = PostPricesType$outboundSchema;
}

/** @internal */
export const PostPricesPricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof PostPricesPricesInterval
> = z.nativeEnum(PostPricesPricesInterval);

/** @internal */
export const PostPricesPricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof PostPricesPricesInterval
> = PostPricesPricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesPricesInterval$ {
  /** @deprecated use `PostPricesPricesInterval$inboundSchema` instead. */
  export const inboundSchema = PostPricesPricesInterval$inboundSchema;
  /** @deprecated use `PostPricesPricesInterval$outboundSchema` instead. */
  export const outboundSchema = PostPricesPricesInterval$outboundSchema;
}

/** @internal */
export const PostPricesBillingCycle$inboundSchema: z.ZodType<
  PostPricesBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PostPricesPricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PostPricesBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostPricesBillingCycle$outboundSchema: z.ZodType<
  PostPricesBillingCycle$Outbound,
  z.ZodTypeDef,
  PostPricesBillingCycle
> = z.object({
  interval: PostPricesPricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesBillingCycle$ {
  /** @deprecated use `PostPricesBillingCycle$inboundSchema` instead. */
  export const inboundSchema = PostPricesBillingCycle$inboundSchema;
  /** @deprecated use `PostPricesBillingCycle$outboundSchema` instead. */
  export const outboundSchema = PostPricesBillingCycle$outboundSchema;
  /** @deprecated use `PostPricesBillingCycle$Outbound` instead. */
  export type Outbound = PostPricesBillingCycle$Outbound;
}

export function postPricesBillingCycleToJSON(
  postPricesBillingCycle: PostPricesBillingCycle,
): string {
  return JSON.stringify(
    PostPricesBillingCycle$outboundSchema.parse(postPricesBillingCycle),
  );
}

export function postPricesBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostPricesPricesResponseInterval$inboundSchema: z.ZodNativeEnum<
  typeof PostPricesPricesResponseInterval
> = z.nativeEnum(PostPricesPricesResponseInterval);

/** @internal */
export const PostPricesPricesResponseInterval$outboundSchema: z.ZodNativeEnum<
  typeof PostPricesPricesResponseInterval
> = PostPricesPricesResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesPricesResponseInterval$ {
  /** @deprecated use `PostPricesPricesResponseInterval$inboundSchema` instead. */
  export const inboundSchema = PostPricesPricesResponseInterval$inboundSchema;
  /** @deprecated use `PostPricesPricesResponseInterval$outboundSchema` instead. */
  export const outboundSchema = PostPricesPricesResponseInterval$outboundSchema;
}

/** @internal */
export const PostPricesTrialPeriod$inboundSchema: z.ZodType<
  PostPricesTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PostPricesPricesResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PostPricesTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostPricesTrialPeriod$outboundSchema: z.ZodType<
  PostPricesTrialPeriod$Outbound,
  z.ZodTypeDef,
  PostPricesTrialPeriod
> = z.object({
  interval: PostPricesPricesResponseInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesTrialPeriod$ {
  /** @deprecated use `PostPricesTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = PostPricesTrialPeriod$inboundSchema;
  /** @deprecated use `PostPricesTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = PostPricesTrialPeriod$outboundSchema;
  /** @deprecated use `PostPricesTrialPeriod$Outbound` instead. */
  export type Outbound = PostPricesTrialPeriod$Outbound;
}

export function postPricesTrialPeriodToJSON(
  postPricesTrialPeriod: PostPricesTrialPeriod,
): string {
  return JSON.stringify(
    PostPricesTrialPeriod$outboundSchema.parse(postPricesTrialPeriod),
  );
}

export function postPricesTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PostPricesUnitPrice$inboundSchema: z.ZodType<
  PostPricesUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PostPricesUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PostPricesUnitPrice$outboundSchema: z.ZodType<
  PostPricesUnitPrice$Outbound,
  z.ZodTypeDef,
  PostPricesUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesUnitPrice$ {
  /** @deprecated use `PostPricesUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PostPricesUnitPrice$inboundSchema;
  /** @deprecated use `PostPricesUnitPrice$outboundSchema` instead. */
  export const outboundSchema = PostPricesUnitPrice$outboundSchema;
  /** @deprecated use `PostPricesUnitPrice$Outbound` instead. */
  export type Outbound = PostPricesUnitPrice$Outbound;
}

export function postPricesUnitPriceToJSON(
  postPricesUnitPrice: PostPricesUnitPrice,
): string {
  return JSON.stringify(
    PostPricesUnitPrice$outboundSchema.parse(postPricesUnitPrice),
  );
}

export function postPricesUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesUnitPrice' from JSON`,
  );
}

/** @internal */
export const PostPricesPricesStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostPricesPricesStatus
> = z.nativeEnum(PostPricesPricesStatus);

/** @internal */
export const PostPricesPricesStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostPricesPricesStatus
> = PostPricesPricesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesPricesStatus$ {
  /** @deprecated use `PostPricesPricesStatus$inboundSchema` instead. */
  export const inboundSchema = PostPricesPricesStatus$inboundSchema;
  /** @deprecated use `PostPricesPricesStatus$outboundSchema` instead. */
  export const outboundSchema = PostPricesPricesStatus$outboundSchema;
}

/** @internal */
export const PostPricesPricesCustomData$inboundSchema: z.ZodType<
  PostPricesPricesCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostPricesPricesCustomData$Outbound = {};

/** @internal */
export const PostPricesPricesCustomData$outboundSchema: z.ZodType<
  PostPricesPricesCustomData$Outbound,
  z.ZodTypeDef,
  PostPricesPricesCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesPricesCustomData$ {
  /** @deprecated use `PostPricesPricesCustomData$inboundSchema` instead. */
  export const inboundSchema = PostPricesPricesCustomData$inboundSchema;
  /** @deprecated use `PostPricesPricesCustomData$outboundSchema` instead. */
  export const outboundSchema = PostPricesPricesCustomData$outboundSchema;
  /** @deprecated use `PostPricesPricesCustomData$Outbound` instead. */
  export type Outbound = PostPricesPricesCustomData$Outbound;
}

export function postPricesPricesCustomDataToJSON(
  postPricesPricesCustomData: PostPricesPricesCustomData,
): string {
  return JSON.stringify(
    PostPricesPricesCustomData$outboundSchema.parse(postPricesPricesCustomData),
  );
}

export function postPricesPricesCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesPricesCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesPricesCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesPricesCustomData' from JSON`,
  );
}

/** @internal */
export const PostPricesResponseBody$inboundSchema: z.ZodType<
  PostPricesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostPricesType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => PostPricesBillingCycle$inboundSchema),
  trial_period: z.lazy(() => PostPricesTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => PostPricesUnitPrice$inboundSchema),
  status: PostPricesPricesStatus$inboundSchema,
  custom_data: z.lazy(() => PostPricesPricesCustomData$inboundSchema)
    .optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostPricesResponseBody$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: PostPricesBillingCycle$Outbound;
  trial_period: PostPricesTrialPeriod$Outbound;
  unit_price: PostPricesUnitPrice$Outbound;
  status: string;
  custom_data?: PostPricesPricesCustomData$Outbound | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PostPricesResponseBody$outboundSchema: z.ZodType<
  PostPricesResponseBody$Outbound,
  z.ZodTypeDef,
  PostPricesResponseBody
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostPricesType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => PostPricesBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => PostPricesTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => PostPricesUnitPrice$outboundSchema),
  status: PostPricesPricesStatus$outboundSchema,
  customData: z.lazy(() => PostPricesPricesCustomData$outboundSchema)
    .optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPricesResponseBody$ {
  /** @deprecated use `PostPricesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostPricesResponseBody$inboundSchema;
  /** @deprecated use `PostPricesResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostPricesResponseBody$outboundSchema;
  /** @deprecated use `PostPricesResponseBody$Outbound` instead. */
  export type Outbound = PostPricesResponseBody$Outbound;
}

export function postPricesResponseBodyToJSON(
  postPricesResponseBody: PostPricesResponseBody,
): string {
  return JSON.stringify(
    PostPricesResponseBody$outboundSchema.parse(postPricesResponseBody),
  );
}

export function postPricesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostPricesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPricesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPricesResponseBody' from JSON`,
  );
}
