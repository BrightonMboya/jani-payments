/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetPricesType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type GetPricesType = ClosedEnum<typeof GetPricesType>;

export const GetPricesPricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetPricesPricesInterval = ClosedEnum<
  typeof GetPricesPricesInterval
>;

export type GetPricesBillingCycle = {
  interval: GetPricesPricesInterval;
  frequency: number;
};

export const GetPricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetPricesInterval = ClosedEnum<typeof GetPricesInterval>;

export type GetPricesTrialPeriod = {
  interval: GetPricesInterval;
  frequency: number;
};

export type GetPricesUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const GetPricesStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetPricesStatus = ClosedEnum<typeof GetPricesStatus>;

/**
 * Any valid JSON value
 */
export type GetPricesCustomData = {};

export type GetPricesResponseBody = {
  productId: string;
  description?: string | null | undefined;
  type: GetPricesType;
  name: string;
  billingCycle: GetPricesBillingCycle;
  trialPeriod: GetPricesTrialPeriod;
  unitPrice: GetPricesUnitPrice;
  status: GetPricesStatus;
  /**
   * Any valid JSON value
   */
  customData?: GetPricesCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const GetPricesType$inboundSchema: z.ZodNativeEnum<
  typeof GetPricesType
> = z.nativeEnum(GetPricesType);

/** @internal */
export const GetPricesType$outboundSchema: z.ZodNativeEnum<
  typeof GetPricesType
> = GetPricesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesType$ {
  /** @deprecated use `GetPricesType$inboundSchema` instead. */
  export const inboundSchema = GetPricesType$inboundSchema;
  /** @deprecated use `GetPricesType$outboundSchema` instead. */
  export const outboundSchema = GetPricesType$outboundSchema;
}

/** @internal */
export const GetPricesPricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetPricesPricesInterval
> = z.nativeEnum(GetPricesPricesInterval);

/** @internal */
export const GetPricesPricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof GetPricesPricesInterval
> = GetPricesPricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPricesInterval$ {
  /** @deprecated use `GetPricesPricesInterval$inboundSchema` instead. */
  export const inboundSchema = GetPricesPricesInterval$inboundSchema;
  /** @deprecated use `GetPricesPricesInterval$outboundSchema` instead. */
  export const outboundSchema = GetPricesPricesInterval$outboundSchema;
}

/** @internal */
export const GetPricesBillingCycle$inboundSchema: z.ZodType<
  GetPricesBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetPricesPricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetPricesBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetPricesBillingCycle$outboundSchema: z.ZodType<
  GetPricesBillingCycle$Outbound,
  z.ZodTypeDef,
  GetPricesBillingCycle
> = z.object({
  interval: GetPricesPricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesBillingCycle$ {
  /** @deprecated use `GetPricesBillingCycle$inboundSchema` instead. */
  export const inboundSchema = GetPricesBillingCycle$inboundSchema;
  /** @deprecated use `GetPricesBillingCycle$outboundSchema` instead. */
  export const outboundSchema = GetPricesBillingCycle$outboundSchema;
  /** @deprecated use `GetPricesBillingCycle$Outbound` instead. */
  export type Outbound = GetPricesBillingCycle$Outbound;
}

export function getPricesBillingCycleToJSON(
  getPricesBillingCycle: GetPricesBillingCycle,
): string {
  return JSON.stringify(
    GetPricesBillingCycle$outboundSchema.parse(getPricesBillingCycle),
  );
}

export function getPricesBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesBillingCycle' from JSON`,
  );
}

/** @internal */
export const GetPricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetPricesInterval
> = z.nativeEnum(GetPricesInterval);

/** @internal */
export const GetPricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof GetPricesInterval
> = GetPricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesInterval$ {
  /** @deprecated use `GetPricesInterval$inboundSchema` instead. */
  export const inboundSchema = GetPricesInterval$inboundSchema;
  /** @deprecated use `GetPricesInterval$outboundSchema` instead. */
  export const outboundSchema = GetPricesInterval$outboundSchema;
}

/** @internal */
export const GetPricesTrialPeriod$inboundSchema: z.ZodType<
  GetPricesTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetPricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetPricesTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetPricesTrialPeriod$outboundSchema: z.ZodType<
  GetPricesTrialPeriod$Outbound,
  z.ZodTypeDef,
  GetPricesTrialPeriod
> = z.object({
  interval: GetPricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesTrialPeriod$ {
  /** @deprecated use `GetPricesTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = GetPricesTrialPeriod$inboundSchema;
  /** @deprecated use `GetPricesTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = GetPricesTrialPeriod$outboundSchema;
  /** @deprecated use `GetPricesTrialPeriod$Outbound` instead. */
  export type Outbound = GetPricesTrialPeriod$Outbound;
}

export function getPricesTrialPeriodToJSON(
  getPricesTrialPeriod: GetPricesTrialPeriod,
): string {
  return JSON.stringify(
    GetPricesTrialPeriod$outboundSchema.parse(getPricesTrialPeriod),
  );
}

export function getPricesTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesTrialPeriod' from JSON`,
  );
}

/** @internal */
export const GetPricesUnitPrice$inboundSchema: z.ZodType<
  GetPricesUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type GetPricesUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const GetPricesUnitPrice$outboundSchema: z.ZodType<
  GetPricesUnitPrice$Outbound,
  z.ZodTypeDef,
  GetPricesUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesUnitPrice$ {
  /** @deprecated use `GetPricesUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetPricesUnitPrice$inboundSchema;
  /** @deprecated use `GetPricesUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetPricesUnitPrice$outboundSchema;
  /** @deprecated use `GetPricesUnitPrice$Outbound` instead. */
  export type Outbound = GetPricesUnitPrice$Outbound;
}

export function getPricesUnitPriceToJSON(
  getPricesUnitPrice: GetPricesUnitPrice,
): string {
  return JSON.stringify(
    GetPricesUnitPrice$outboundSchema.parse(getPricesUnitPrice),
  );
}

export function getPricesUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetPricesStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetPricesStatus
> = z.nativeEnum(GetPricesStatus);

/** @internal */
export const GetPricesStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetPricesStatus
> = GetPricesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesStatus$ {
  /** @deprecated use `GetPricesStatus$inboundSchema` instead. */
  export const inboundSchema = GetPricesStatus$inboundSchema;
  /** @deprecated use `GetPricesStatus$outboundSchema` instead. */
  export const outboundSchema = GetPricesStatus$outboundSchema;
}

/** @internal */
export const GetPricesCustomData$inboundSchema: z.ZodType<
  GetPricesCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetPricesCustomData$Outbound = {};

/** @internal */
export const GetPricesCustomData$outboundSchema: z.ZodType<
  GetPricesCustomData$Outbound,
  z.ZodTypeDef,
  GetPricesCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesCustomData$ {
  /** @deprecated use `GetPricesCustomData$inboundSchema` instead. */
  export const inboundSchema = GetPricesCustomData$inboundSchema;
  /** @deprecated use `GetPricesCustomData$outboundSchema` instead. */
  export const outboundSchema = GetPricesCustomData$outboundSchema;
  /** @deprecated use `GetPricesCustomData$Outbound` instead. */
  export type Outbound = GetPricesCustomData$Outbound;
}

export function getPricesCustomDataToJSON(
  getPricesCustomData: GetPricesCustomData,
): string {
  return JSON.stringify(
    GetPricesCustomData$outboundSchema.parse(getPricesCustomData),
  );
}

export function getPricesCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesCustomData' from JSON`,
  );
}

/** @internal */
export const GetPricesResponseBody$inboundSchema: z.ZodType<
  GetPricesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetPricesType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => GetPricesBillingCycle$inboundSchema),
  trial_period: z.lazy(() => GetPricesTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => GetPricesUnitPrice$inboundSchema),
  status: GetPricesStatus$inboundSchema,
  custom_data: z.lazy(() => GetPricesCustomData$inboundSchema).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetPricesResponseBody$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: GetPricesBillingCycle$Outbound;
  trial_period: GetPricesTrialPeriod$Outbound;
  unit_price: GetPricesUnitPrice$Outbound;
  status: string;
  custom_data?: GetPricesCustomData$Outbound | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetPricesResponseBody$outboundSchema: z.ZodType<
  GetPricesResponseBody$Outbound,
  z.ZodTypeDef,
  GetPricesResponseBody
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetPricesType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => GetPricesBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => GetPricesTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => GetPricesUnitPrice$outboundSchema),
  status: GetPricesStatus$outboundSchema,
  customData: z.lazy(() => GetPricesCustomData$outboundSchema).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesResponseBody$ {
  /** @deprecated use `GetPricesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetPricesResponseBody$inboundSchema;
  /** @deprecated use `GetPricesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetPricesResponseBody$outboundSchema;
  /** @deprecated use `GetPricesResponseBody$Outbound` instead. */
  export type Outbound = GetPricesResponseBody$Outbound;
}

export function getPricesResponseBodyToJSON(
  getPricesResponseBody: GetPricesResponseBody,
): string {
  return JSON.stringify(
    GetPricesResponseBody$outboundSchema.parse(getPricesResponseBody),
  );
}

export function getPricesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesResponseBody' from JSON`,
  );
}
