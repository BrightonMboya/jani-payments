/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PatchTransactionTransactionIdStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type PatchTransactionTransactionIdStatus = ClosedEnum<
  typeof PatchTransactionTransactionIdStatus
>;

export type PatchTransactionTransactionIdRequestBody = {
  status: PatchTransactionTransactionIdStatus;
};

export type PatchTransactionTransactionIdRequest = {
  transactionId: string;
  requestBody?: PatchTransactionTransactionIdRequestBody | undefined;
};

export const PatchTransactionTransactionIdTransactionsStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type PatchTransactionTransactionIdTransactionsStatus = ClosedEnum<
  typeof PatchTransactionTransactionIdTransactionsStatus
>;

export const PatchTransactionTransactionIdCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type PatchTransactionTransactionIdCollectionMode = ClosedEnum<
  typeof PatchTransactionTransactionIdCollectionMode
>;

/**
 * Any valid JSON value
 */
export type PatchTransactionTransactionIdCustomData = {};

export type PatchTransactionTransactionIdCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type PatchTransactionTransactionIdTotal = {
  subtotal: number;
  discount: number;
  grandTotal: number;
};

export type PatchTransactionTransactionIdDetails = {
  total: PatchTransactionTransactionIdTotal;
};

export const PatchTransactionTransactionIdTransactionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PatchTransactionTransactionIdTransactionsType = ClosedEnum<
  typeof PatchTransactionTransactionIdTransactionsType
>;

export const PatchTransactionTransactionIdInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchTransactionTransactionIdInterval = ClosedEnum<
  typeof PatchTransactionTransactionIdInterval
>;

export type PatchTransactionTransactionIdBillingCycle = {
  interval: PatchTransactionTransactionIdInterval;
  frequency: number;
};

export const PatchTransactionTransactionIdTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchTransactionTransactionIdTransactionsInterval = ClosedEnum<
  typeof PatchTransactionTransactionIdTransactionsInterval
>;

export type PatchTransactionTransactionIdTrialPeriod = {
  interval: PatchTransactionTransactionIdTransactionsInterval;
  frequency: number;
};

export type PatchTransactionTransactionIdUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  ClosedEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  >;

/**
 * Any valid JSON value
 */
export type PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData =
  {};

export type PatchTransactionTransactionIdPrice = {
  productId: string;
  description?: string | null | undefined;
  type: PatchTransactionTransactionIdTransactionsType;
  name: string;
  billingCycle: PatchTransactionTransactionIdBillingCycle;
  trialPeriod: PatchTransactionTransactionIdTrialPeriod;
  unitPrice: PatchTransactionTransactionIdUnitPrice;
  status:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus;
  /**
   * Any valid JSON value
   */
  customData?:
    | PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus =
  ClosedEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  >;

/**
 * Any valid JSON value
 */
export type PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData =
  {};

export type PatchTransactionTransactionIdProduct = {
  id: string;
  name: string;
  description: string;
  status:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus;
  createdAt: string;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData;
};

export type PatchTransactionTransactionIdItems = {
  price: PatchTransactionTransactionIdPrice;
  quantity: number;
  product: PatchTransactionTransactionIdProduct;
};

export const PatchTransactionTransactionIdTransactionsResponseStatus = {
  Pending: "PENDING",
  Processing: "PROCESSING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Refunded: "REFUNDED",
} as const;
export type PatchTransactionTransactionIdTransactionsResponseStatus =
  ClosedEnum<typeof PatchTransactionTransactionIdTransactionsResponseStatus>;

export const PatchTransactionTransactionIdPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
  Card: "CARD",
  BankTransfer: "BANK_TRANSFER",
} as const;
export type PatchTransactionTransactionIdPaymentMethod = ClosedEnum<
  typeof PatchTransactionTransactionIdPaymentMethod
>;

export const PatchTransactionTransactionIdProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type PatchTransactionTransactionIdProvider = ClosedEnum<
  typeof PatchTransactionTransactionIdProvider
>;

/**
 * Any valid JSON value
 */
export type PatchTransactionTransactionIdProviderMetadata = {};

export const PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod =
  {
    BankTransfer: "BANK_TRANSFER",
  } as const;
export type PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod =
  ClosedEnum<
    typeof PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod
  >;

export type PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails =
  {
    bankName: string;
    bankReference: string;
  };

export type PatchTransactionTransactionIdMethodDetails3 = {
  paymentMethod:
    PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod;
  details:
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails;
};

export const PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod =
  {
    Card: "CARD",
  } as const;
export type PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod =
  ClosedEnum<
    typeof PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod
  >;

export type PatchTransactionTransactionIdMethodDetailsTransactionsDetails = {
  last4: string;
  brand: string;
  expMonth: number;
  expYear: number;
  cardholderName: string | null;
};

export type PatchTransactionTransactionIdMethodDetails2 = {
  paymentMethod:
    PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod;
  details: PatchTransactionTransactionIdMethodDetailsTransactionsDetails;
};

export const PatchTransactionTransactionIdMethodDetailsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type PatchTransactionTransactionIdMethodDetailsPaymentMethod =
  ClosedEnum<typeof PatchTransactionTransactionIdMethodDetailsPaymentMethod>;

export type PatchTransactionTransactionIdMethodDetailsDetails = {
  network: string;
  phoneSuffix: string;
};

export type PatchTransactionTransactionIdMethodDetails1 = {
  paymentMethod: PatchTransactionTransactionIdMethodDetailsPaymentMethod;
  details: PatchTransactionTransactionIdMethodDetailsDetails;
};

export type PatchTransactionTransactionIdMethodDetails =
  | PatchTransactionTransactionIdMethodDetails1
  | PatchTransactionTransactionIdMethodDetails2
  | PatchTransactionTransactionIdMethodDetails3;

export type PatchTransactionTransactionIdPayments = {
  id: string;
  status: PatchTransactionTransactionIdTransactionsResponseStatus;
  paymentMethod: PatchTransactionTransactionIdPaymentMethod;
  provider: PatchTransactionTransactionIdProvider;
  createdAt: string;
  updatedAt?: string | null | undefined;
  providerReference: string | null;
  /**
   * Any valid JSON value
   */
  providerMetadata: PatchTransactionTransactionIdProviderMetadata;
  methodDetails:
    | PatchTransactionTransactionIdMethodDetails1
    | PatchTransactionTransactionIdMethodDetails2
    | PatchTransactionTransactionIdMethodDetails3;
};

export const PatchTransactionTransactionIdTransactionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchTransactionTransactionIdTransactionsResponse200Status =
  ClosedEnum<typeof PatchTransactionTransactionIdTransactionsResponse200Status>;

/**
 * Any valid JSON value
 */
export type PatchTransactionTransactionIdTransactionsCustomData = {};

export type PatchTransactionTransactionIdCustomer = {
  id: string;
  email: string;
  name: string;
  status?:
    | PatchTransactionTransactionIdTransactionsResponse200Status
    | null
    | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PatchTransactionTransactionIdTransactionsCustomData;
  createdAt: string;
  updatedAt: string;
};

/**
 * Any valid JSON value
 */
export type PatchTransactionTransactionIdTransactionsResponseCustomData = {};

export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus
  >;

export type PatchTransactionTransactionIdAddress = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PatchTransactionTransactionIdTransactionsResponseCustomData;
  city?: string | null | undefined;
  status?:
    | PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus
    | null
    | undefined;
  createdAt: string;
  updatedAt: string;
  customerId?: string | null | undefined;
};

export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus
  >;

export const PatchTransactionTransactionIdType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PatchTransactionTransactionIdType = ClosedEnum<
  typeof PatchTransactionTransactionIdType
>;

/**
 * Any valid JSON value
 */
export type PatchTransactionTransactionIdTransactionsResponse200CustomData = {};

export type PatchTransactionTransactionIdDiscount = {
  id: string;
  status?:
    | PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PatchTransactionTransactionIdType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PatchTransactionTransactionIdTransactionsResponse200CustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/**
 * Returns an updated Transaction
 */
export type PatchTransactionTransactionIdResponseBody = {
  status: PatchTransactionTransactionIdTransactionsStatus;
  customerId: string;
  addressId: string;
  currencyCode: string;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?:
    | PatchTransactionTransactionIdCollectionMode
    | null
    | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PatchTransactionTransactionIdCustomData | undefined;
  currentBillingPeriod?:
    | PatchTransactionTransactionIdCurrentBillingPeriod
    | undefined;
  details: PatchTransactionTransactionIdDetails;
  items: Array<PatchTransactionTransactionIdItems>;
  payments: PatchTransactionTransactionIdPayments;
  createdAt: string;
  updatedAt?: string | null | undefined;
  customer: PatchTransactionTransactionIdCustomer;
  address: PatchTransactionTransactionIdAddress;
  discount?: PatchTransactionTransactionIdDiscount | null | undefined;
  invoiceId: string;
};

/** @internal */
export const PatchTransactionTransactionIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchTransactionTransactionIdStatus
> = z.nativeEnum(PatchTransactionTransactionIdStatus);

/** @internal */
export const PatchTransactionTransactionIdStatus$outboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdStatus> =
    PatchTransactionTransactionIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdStatus$ {
  /** @deprecated use `PatchTransactionTransactionIdStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdStatus$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdStatus$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdRequestBody$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PatchTransactionTransactionIdStatus$inboundSchema,
});

/** @internal */
export type PatchTransactionTransactionIdRequestBody$Outbound = {
  status: string;
};

/** @internal */
export const PatchTransactionTransactionIdRequestBody$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdRequestBody
> = z.object({
  status: PatchTransactionTransactionIdStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdRequestBody$ {
  /** @deprecated use `PatchTransactionTransactionIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdRequestBody$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdRequestBody$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdRequestBody$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdRequestBody$Outbound;
}

export function patchTransactionTransactionIdRequestBodyToJSON(
  patchTransactionTransactionIdRequestBody:
    PatchTransactionTransactionIdRequestBody,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdRequestBody$outboundSchema.parse(
      patchTransactionTransactionIdRequestBody,
    ),
  );
}

export function patchTransactionTransactionIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdRequest$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
  RequestBody: z.lazy(() =>
    PatchTransactionTransactionIdRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchTransactionTransactionIdRequest$Outbound = {
  transaction_id: string;
  RequestBody?: PatchTransactionTransactionIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchTransactionTransactionIdRequest$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdRequest$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdRequest
> = z.object({
  transactionId: z.string(),
  requestBody: z.lazy(() =>
    PatchTransactionTransactionIdRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdRequest$ {
  /** @deprecated use `PatchTransactionTransactionIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdRequest$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdRequest$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdRequest$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdRequest$Outbound;
}

export function patchTransactionTransactionIdRequestToJSON(
  patchTransactionTransactionIdRequest: PatchTransactionTransactionIdRequest,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdRequest$outboundSchema.parse(
      patchTransactionTransactionIdRequest,
    ),
  );
}

export function patchTransactionTransactionIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsStatus$inboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdTransactionsStatus> = z
    .nativeEnum(PatchTransactionTransactionIdTransactionsStatus);

/** @internal */
export const PatchTransactionTransactionIdTransactionsStatus$outboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdTransactionsStatus> =
    PatchTransactionTransactionIdTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsStatus$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsStatus$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsStatus$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdCollectionMode$inboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdCollectionMode> = z
    .nativeEnum(PatchTransactionTransactionIdCollectionMode);

/** @internal */
export const PatchTransactionTransactionIdCollectionMode$outboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdCollectionMode> =
    PatchTransactionTransactionIdCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdCollectionMode$ {
  /** @deprecated use `PatchTransactionTransactionIdCollectionMode$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdCollectionMode$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdCollectionMode$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdCollectionMode$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdCustomData$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PatchTransactionTransactionIdCustomData$Outbound = {};

/** @internal */
export const PatchTransactionTransactionIdCustomData$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdCustomData$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdCustomData$ {
  /** @deprecated use `PatchTransactionTransactionIdCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdCustomData$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdCustomData$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdCustomData$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdCustomData$Outbound;
}

export function patchTransactionTransactionIdCustomDataToJSON(
  patchTransactionTransactionIdCustomData:
    PatchTransactionTransactionIdCustomData,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdCustomData$outboundSchema.parse(
      patchTransactionTransactionIdCustomData,
    ),
  );
}

export function patchTransactionTransactionIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdCustomData' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type PatchTransactionTransactionIdCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const PatchTransactionTransactionIdCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdCurrentBillingPeriod
  > = z.object({
    startsAt: z.date().transform(v => v.toISOString()),
    endsAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdCurrentBillingPeriod$ {
  /** @deprecated use `PatchTransactionTransactionIdCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdCurrentBillingPeriod$Outbound;
}

export function patchTransactionTransactionIdCurrentBillingPeriodToJSON(
  patchTransactionTransactionIdCurrentBillingPeriod:
    PatchTransactionTransactionIdCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdCurrentBillingPeriod$outboundSchema.parse(
      patchTransactionTransactionIdCurrentBillingPeriod,
    ),
  );
}

export function patchTransactionTransactionIdCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTotal$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdTotal,
  z.ZodTypeDef,
  unknown
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grand_total: z.number(),
}).transform((v) => {
  return remap$(v, {
    "grand_total": "grandTotal",
  });
});

/** @internal */
export type PatchTransactionTransactionIdTotal$Outbound = {
  subtotal: number;
  discount: number;
  grand_total: number;
};

/** @internal */
export const PatchTransactionTransactionIdTotal$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdTotal$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdTotal
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grandTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    grandTotal: "grand_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTotal$ {
  /** @deprecated use `PatchTransactionTransactionIdTotal$inboundSchema` instead. */
  export const inboundSchema = PatchTransactionTransactionIdTotal$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTotal$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTotal$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTotal$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdTotal$Outbound;
}

export function patchTransactionTransactionIdTotalToJSON(
  patchTransactionTransactionIdTotal: PatchTransactionTransactionIdTotal,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdTotal$outboundSchema.parse(
      patchTransactionTransactionIdTotal,
    ),
  );
}

export function patchTransactionTransactionIdTotalFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdTotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdTotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdTotal' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdDetails$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.lazy(() => PatchTransactionTransactionIdTotal$inboundSchema),
});

/** @internal */
export type PatchTransactionTransactionIdDetails$Outbound = {
  total: PatchTransactionTransactionIdTotal$Outbound;
};

/** @internal */
export const PatchTransactionTransactionIdDetails$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdDetails$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdDetails
> = z.object({
  total: z.lazy(() => PatchTransactionTransactionIdTotal$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdDetails$ {
  /** @deprecated use `PatchTransactionTransactionIdDetails$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdDetails$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdDetails$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdDetails$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdDetails$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdDetails$Outbound;
}

export function patchTransactionTransactionIdDetailsToJSON(
  patchTransactionTransactionIdDetails: PatchTransactionTransactionIdDetails,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdDetails$outboundSchema.parse(
      patchTransactionTransactionIdDetails,
    ),
  );
}

export function patchTransactionTransactionIdDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdDetails' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsType$inboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdTransactionsType> = z
    .nativeEnum(PatchTransactionTransactionIdTransactionsType);

/** @internal */
export const PatchTransactionTransactionIdTransactionsType$outboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdTransactionsType> =
    PatchTransactionTransactionIdTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsType$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsType$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsType$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsType$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsType$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdInterval$inboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdInterval> = z.nativeEnum(
    PatchTransactionTransactionIdInterval,
  );

/** @internal */
export const PatchTransactionTransactionIdInterval$outboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdInterval> =
    PatchTransactionTransactionIdInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdInterval$ {
  /** @deprecated use `PatchTransactionTransactionIdInterval$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdInterval$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdInterval$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdInterval$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdBillingCycle$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PatchTransactionTransactionIdInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PatchTransactionTransactionIdBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PatchTransactionTransactionIdBillingCycle$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdBillingCycle$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdBillingCycle
  > = z.object({
    interval: PatchTransactionTransactionIdInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdBillingCycle$ {
  /** @deprecated use `PatchTransactionTransactionIdBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdBillingCycle$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdBillingCycle$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdBillingCycle$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdBillingCycle$Outbound;
}

export function patchTransactionTransactionIdBillingCycleToJSON(
  patchTransactionTransactionIdBillingCycle:
    PatchTransactionTransactionIdBillingCycle,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdBillingCycle$outboundSchema.parse(
      patchTransactionTransactionIdBillingCycle,
    ),
  );
}

export function patchTransactionTransactionIdBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdBillingCycle' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsInterval$inboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdTransactionsInterval> = z
    .nativeEnum(PatchTransactionTransactionIdTransactionsInterval);

/** @internal */
export const PatchTransactionTransactionIdTransactionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdTransactionsInterval> =
    PatchTransactionTransactionIdTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsInterval$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsInterval$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsInterval$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdTrialPeriod$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PatchTransactionTransactionIdTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PatchTransactionTransactionIdTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PatchTransactionTransactionIdTrialPeriod$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdTrialPeriod$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdTrialPeriod
> = z.object({
  interval: PatchTransactionTransactionIdTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTrialPeriod$ {
  /** @deprecated use `PatchTransactionTransactionIdTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTrialPeriod$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTrialPeriod$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTrialPeriod$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdTrialPeriod$Outbound;
}

export function patchTransactionTransactionIdTrialPeriodToJSON(
  patchTransactionTransactionIdTrialPeriod:
    PatchTransactionTransactionIdTrialPeriod,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdTrialPeriod$outboundSchema.parse(
      patchTransactionTransactionIdTrialPeriod,
    ),
  );
}

export function patchTransactionTransactionIdTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdUnitPrice$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PatchTransactionTransactionIdUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PatchTransactionTransactionIdUnitPrice$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdUnitPrice$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdUnitPrice$ {
  /** @deprecated use `PatchTransactionTransactionIdUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdUnitPrice$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdUnitPrice$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdUnitPrice$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdUnitPrice$Outbound;
}

export function patchTransactionTransactionIdUnitPriceToJSON(
  patchTransactionTransactionIdUnitPrice:
    PatchTransactionTransactionIdUnitPrice,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdUnitPrice$outboundSchema.parse(
      patchTransactionTransactionIdUnitPrice,
    ),
  );
}

export function patchTransactionTransactionIdUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdUnitPrice' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > = z.nativeEnum(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus,
  );

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound =
  {};

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound;
}

export function patchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomDataToJSON(
  patchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema
      .parse(
        patchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData,
      ),
  );
}

export function patchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdPrice$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PatchTransactionTransactionIdTransactionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    PatchTransactionTransactionIdBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    PatchTransactionTransactionIdTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    PatchTransactionTransactionIdUnitPrice$inboundSchema
  ),
  status:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema,
  custom_data: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PatchTransactionTransactionIdPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: PatchTransactionTransactionIdBillingCycle$Outbound;
  trial_period: PatchTransactionTransactionIdTrialPeriod$Outbound;
  unit_price: PatchTransactionTransactionIdUnitPrice$Outbound;
  status: string;
  custom_data?:
    | PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PatchTransactionTransactionIdPrice$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdPrice$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PatchTransactionTransactionIdTransactionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    PatchTransactionTransactionIdBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    PatchTransactionTransactionIdTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() =>
    PatchTransactionTransactionIdUnitPrice$outboundSchema
  ),
  status:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema,
  customData: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdPrice$ {
  /** @deprecated use `PatchTransactionTransactionIdPrice$inboundSchema` instead. */
  export const inboundSchema = PatchTransactionTransactionIdPrice$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdPrice$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdPrice$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdPrice$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdPrice$Outbound;
}

export function patchTransactionTransactionIdPriceToJSON(
  patchTransactionTransactionIdPrice: PatchTransactionTransactionIdPrice,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdPrice$outboundSchema.parse(
      patchTransactionTransactionIdPrice,
    ),
  );
}

export function patchTransactionTransactionIdPriceFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdPrice' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  > = z.nativeEnum(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus,
  );

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  > =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound =
  {};

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound;
}

export function patchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomDataToJSON(
  patchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema
      .parse(
        patchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData,
      ),
  );
}

export function patchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdProduct$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  custom_data: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type PatchTransactionTransactionIdProduct$Outbound = {
  id: string;
  name: string;
  description: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  custom_data:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$Outbound;
};

/** @internal */
export const PatchTransactionTransactionIdProduct$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdProduct$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdProduct
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  customData: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONCustomData$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdProduct$ {
  /** @deprecated use `PatchTransactionTransactionIdProduct$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdProduct$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdProduct$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdProduct$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdProduct$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdProduct$Outbound;
}

export function patchTransactionTransactionIdProductToJSON(
  patchTransactionTransactionIdProduct: PatchTransactionTransactionIdProduct,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdProduct$outboundSchema.parse(
      patchTransactionTransactionIdProduct,
    ),
  );
}

export function patchTransactionTransactionIdProductFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdProduct' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdItems$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.lazy(() => PatchTransactionTransactionIdPrice$inboundSchema),
  quantity: z.number(),
  product: z.lazy(() => PatchTransactionTransactionIdProduct$inboundSchema),
});

/** @internal */
export type PatchTransactionTransactionIdItems$Outbound = {
  price: PatchTransactionTransactionIdPrice$Outbound;
  quantity: number;
  product: PatchTransactionTransactionIdProduct$Outbound;
};

/** @internal */
export const PatchTransactionTransactionIdItems$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdItems$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdItems
> = z.object({
  price: z.lazy(() => PatchTransactionTransactionIdPrice$outboundSchema),
  quantity: z.number(),
  product: z.lazy(() => PatchTransactionTransactionIdProduct$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdItems$ {
  /** @deprecated use `PatchTransactionTransactionIdItems$inboundSchema` instead. */
  export const inboundSchema = PatchTransactionTransactionIdItems$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdItems$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdItems$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdItems$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdItems$Outbound;
}

export function patchTransactionTransactionIdItemsToJSON(
  patchTransactionTransactionIdItems: PatchTransactionTransactionIdItems,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdItems$outboundSchema.parse(
      patchTransactionTransactionIdItems,
    ),
  );
}

export function patchTransactionTransactionIdItemsFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdItems' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponseStatus
  > = z.nativeEnum(PatchTransactionTransactionIdTransactionsResponseStatus);

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponseStatus
  > = PatchTransactionTransactionIdTransactionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponseStatus$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponseStatus$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponseStatus$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdPaymentMethod> = z
    .nativeEnum(PatchTransactionTransactionIdPaymentMethod);

/** @internal */
export const PatchTransactionTransactionIdPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdPaymentMethod> =
    PatchTransactionTransactionIdPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdPaymentMethod$ {
  /** @deprecated use `PatchTransactionTransactionIdPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdPaymentMethod$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdPaymentMethod$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdProvider$inboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdProvider> = z.nativeEnum(
    PatchTransactionTransactionIdProvider,
  );

/** @internal */
export const PatchTransactionTransactionIdProvider$outboundSchema:
  z.ZodNativeEnum<typeof PatchTransactionTransactionIdProvider> =
    PatchTransactionTransactionIdProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdProvider$ {
  /** @deprecated use `PatchTransactionTransactionIdProvider$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdProvider$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdProvider$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdProvider$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdProviderMetadata$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdProviderMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchTransactionTransactionIdProviderMetadata$Outbound = {};

/** @internal */
export const PatchTransactionTransactionIdProviderMetadata$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdProviderMetadata$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdProviderMetadata
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdProviderMetadata$ {
  /** @deprecated use `PatchTransactionTransactionIdProviderMetadata$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdProviderMetadata$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdProviderMetadata$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdProviderMetadata$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdProviderMetadata$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdProviderMetadata$Outbound;
}

export function patchTransactionTransactionIdProviderMetadataToJSON(
  patchTransactionTransactionIdProviderMetadata:
    PatchTransactionTransactionIdProviderMetadata,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdProviderMetadata$outboundSchema.parse(
      patchTransactionTransactionIdProviderMetadata,
    ),
  );
}

export function patchTransactionTransactionIdProviderMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdProviderMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdProviderMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdProviderMetadata' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod
  > = z.nativeEnum(
    PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod,
  );

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod
  > =
    PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bank_name: z.string(),
    bank_reference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "bank_name": "bankName",
      "bank_reference": "bankReference",
    });
  });

/** @internal */
export type PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound =
  {
    bank_name: string;
    bank_reference: string;
  };

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails
  > = z.object({
    bankName: z.string(),
    bankReference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bankName: "bank_name",
      bankReference: "bank_reference",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound;
}

export function patchTransactionTransactionIdMethodDetailsTransactionsResponseDetailsToJSON(
  patchTransactionTransactionIdMethodDetailsTransactionsResponseDetails:
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema
      .parse(
        patchTransactionTransactionIdMethodDetailsTransactionsResponseDetails,
      ),
  );
}

export function patchTransactionTransactionIdMethodDetailsTransactionsResponseDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetails3$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetails3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_method:
      PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$inboundSchema,
    details: z.lazy(() =>
      PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
    });
  });

/** @internal */
export type PatchTransactionTransactionIdMethodDetails3$Outbound = {
  payment_method: string;
  details:
    PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$Outbound;
};

/** @internal */
export const PatchTransactionTransactionIdMethodDetails3$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetails3$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdMethodDetails3
  > = z.object({
    paymentMethod:
      PatchTransactionTransactionIdMethodDetailsTransactionsResponsePaymentMethod$outboundSchema,
    details: z.lazy(() =>
      PatchTransactionTransactionIdMethodDetailsTransactionsResponseDetails$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetails3$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails3$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetails3$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails3$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetails3$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails3$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdMethodDetails3$Outbound;
}

export function patchTransactionTransactionIdMethodDetails3ToJSON(
  patchTransactionTransactionIdMethodDetails3:
    PatchTransactionTransactionIdMethodDetails3,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdMethodDetails3$outboundSchema.parse(
      patchTransactionTransactionIdMethodDetails3,
    ),
  );
}

export function patchTransactionTransactionIdMethodDetails3FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdMethodDetails3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdMethodDetails3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdMethodDetails3' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod
  > = z.nativeEnum(
    PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod,
  );

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod
  > =
    PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    exp_month: z.number(),
    exp_year: z.number(),
    cardholder_name: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "exp_month": "expMonth",
      "exp_year": "expYear",
      "cardholder_name": "cardholderName",
    });
  });

/** @internal */
export type PatchTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound =
  {
    last4: string;
    brand: string;
    exp_month: number;
    exp_year: number;
    cardholder_name: string | null;
  };

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    expMonth: z.number(),
    expYear: z.number(),
    cardholderName: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      expMonth: "exp_month",
      expYear: "exp_year",
      cardholderName: "cardholder_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetailsTransactionsDetails$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound;
}

export function patchTransactionTransactionIdMethodDetailsTransactionsDetailsToJSON(
  patchTransactionTransactionIdMethodDetailsTransactionsDetails:
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema
      .parse(patchTransactionTransactionIdMethodDetailsTransactionsDetails),
  );
}

export function patchTransactionTransactionIdMethodDetailsTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdMethodDetailsTransactionsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdMethodDetailsTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetails2$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetails2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_method:
      PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$inboundSchema,
    details: z.lazy(() =>
      PatchTransactionTransactionIdMethodDetailsTransactionsDetails$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
    });
  });

/** @internal */
export type PatchTransactionTransactionIdMethodDetails2$Outbound = {
  payment_method: string;
  details:
    PatchTransactionTransactionIdMethodDetailsTransactionsDetails$Outbound;
};

/** @internal */
export const PatchTransactionTransactionIdMethodDetails2$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetails2$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdMethodDetails2
  > = z.object({
    paymentMethod:
      PatchTransactionTransactionIdMethodDetailsTransactionsPaymentMethod$outboundSchema,
    details: z.lazy(() =>
      PatchTransactionTransactionIdMethodDetailsTransactionsDetails$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetails2$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails2$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetails2$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails2$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetails2$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails2$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdMethodDetails2$Outbound;
}

export function patchTransactionTransactionIdMethodDetails2ToJSON(
  patchTransactionTransactionIdMethodDetails2:
    PatchTransactionTransactionIdMethodDetails2,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdMethodDetails2$outboundSchema.parse(
      patchTransactionTransactionIdMethodDetails2,
    ),
  );
}

export function patchTransactionTransactionIdMethodDetails2FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdMethodDetails2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdMethodDetails2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdMethodDetails2' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdMethodDetailsPaymentMethod
  > = z.nativeEnum(PatchTransactionTransactionIdMethodDetailsPaymentMethod);

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdMethodDetailsPaymentMethod
  > = PatchTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetailsPaymentMethod$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsDetails$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetailsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    network: z.string(),
    phone_suffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "phone_suffix": "phoneSuffix",
    });
  });

/** @internal */
export type PatchTransactionTransactionIdMethodDetailsDetails$Outbound = {
  network: string;
  phone_suffix: string;
};

/** @internal */
export const PatchTransactionTransactionIdMethodDetailsDetails$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetailsDetails$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdMethodDetailsDetails
  > = z.object({
    network: z.string(),
    phoneSuffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      phoneSuffix: "phone_suffix",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetailsDetails$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetailsDetails$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetailsDetails$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetailsDetails$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdMethodDetailsDetails$Outbound;
}

export function patchTransactionTransactionIdMethodDetailsDetailsToJSON(
  patchTransactionTransactionIdMethodDetailsDetails:
    PatchTransactionTransactionIdMethodDetailsDetails,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdMethodDetailsDetails$outboundSchema.parse(
      patchTransactionTransactionIdMethodDetailsDetails,
    ),
  );
}

export function patchTransactionTransactionIdMethodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdMethodDetailsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdMethodDetailsDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdMethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetails1$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetails1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_method:
      PatchTransactionTransactionIdMethodDetailsPaymentMethod$inboundSchema,
    details: z.lazy(() =>
      PatchTransactionTransactionIdMethodDetailsDetails$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
    });
  });

/** @internal */
export type PatchTransactionTransactionIdMethodDetails1$Outbound = {
  payment_method: string;
  details: PatchTransactionTransactionIdMethodDetailsDetails$Outbound;
};

/** @internal */
export const PatchTransactionTransactionIdMethodDetails1$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetails1$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdMethodDetails1
  > = z.object({
    paymentMethod:
      PatchTransactionTransactionIdMethodDetailsPaymentMethod$outboundSchema,
    details: z.lazy(() =>
      PatchTransactionTransactionIdMethodDetailsDetails$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetails1$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails1$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetails1$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails1$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetails1$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails1$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdMethodDetails1$Outbound;
}

export function patchTransactionTransactionIdMethodDetails1ToJSON(
  patchTransactionTransactionIdMethodDetails1:
    PatchTransactionTransactionIdMethodDetails1,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdMethodDetails1$outboundSchema.parse(
      patchTransactionTransactionIdMethodDetails1,
    ),
  );
}

export function patchTransactionTransactionIdMethodDetails1FromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdMethodDetails1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdMethodDetails1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdMethodDetails1' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdMethodDetails$inboundSchema:
  z.ZodType<PatchTransactionTransactionIdMethodDetails, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => PatchTransactionTransactionIdMethodDetails1$inboundSchema),
      z.lazy(() => PatchTransactionTransactionIdMethodDetails2$inboundSchema),
      z.lazy(() => PatchTransactionTransactionIdMethodDetails3$inboundSchema),
    ]);

/** @internal */
export type PatchTransactionTransactionIdMethodDetails$Outbound =
  | PatchTransactionTransactionIdMethodDetails1$Outbound
  | PatchTransactionTransactionIdMethodDetails2$Outbound
  | PatchTransactionTransactionIdMethodDetails3$Outbound;

/** @internal */
export const PatchTransactionTransactionIdMethodDetails$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdMethodDetails$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdMethodDetails
  > = z.union([
    z.lazy(() => PatchTransactionTransactionIdMethodDetails1$outboundSchema),
    z.lazy(() => PatchTransactionTransactionIdMethodDetails2$outboundSchema),
    z.lazy(() => PatchTransactionTransactionIdMethodDetails3$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdMethodDetails$ {
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdMethodDetails$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdMethodDetails$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdMethodDetails$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdMethodDetails$Outbound;
}

export function patchTransactionTransactionIdMethodDetailsToJSON(
  patchTransactionTransactionIdMethodDetails:
    PatchTransactionTransactionIdMethodDetails,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdMethodDetails$outboundSchema.parse(
      patchTransactionTransactionIdMethodDetails,
    ),
  );
}

export function patchTransactionTransactionIdMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdMethodDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdMethodDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdMethodDetails' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdPayments$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: PatchTransactionTransactionIdTransactionsResponseStatus$inboundSchema,
  payment_method: PatchTransactionTransactionIdPaymentMethod$inboundSchema,
  provider: PatchTransactionTransactionIdProvider$inboundSchema,
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  provider_reference: z.nullable(z.string()),
  provider_metadata: z.lazy(() =>
    PatchTransactionTransactionIdProviderMetadata$inboundSchema
  ),
  method_details: z.union([
    z.lazy(() => PatchTransactionTransactionIdMethodDetails1$inboundSchema),
    z.lazy(() => PatchTransactionTransactionIdMethodDetails2$inboundSchema),
    z.lazy(() => PatchTransactionTransactionIdMethodDetails3$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "provider_reference": "providerReference",
    "provider_metadata": "providerMetadata",
    "method_details": "methodDetails",
  });
});

/** @internal */
export type PatchTransactionTransactionIdPayments$Outbound = {
  id: string;
  status: string;
  payment_method: string;
  provider: string;
  created_at: string;
  updated_at?: string | null | undefined;
  provider_reference: string | null;
  provider_metadata: PatchTransactionTransactionIdProviderMetadata$Outbound;
  method_details:
    | PatchTransactionTransactionIdMethodDetails1$Outbound
    | PatchTransactionTransactionIdMethodDetails2$Outbound
    | PatchTransactionTransactionIdMethodDetails3$Outbound;
};

/** @internal */
export const PatchTransactionTransactionIdPayments$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdPayments$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdPayments
> = z.object({
  id: z.string(),
  status:
    PatchTransactionTransactionIdTransactionsResponseStatus$outboundSchema,
  paymentMethod: PatchTransactionTransactionIdPaymentMethod$outboundSchema,
  provider: PatchTransactionTransactionIdProvider$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  providerReference: z.nullable(z.string()),
  providerMetadata: z.lazy(() =>
    PatchTransactionTransactionIdProviderMetadata$outboundSchema
  ),
  methodDetails: z.union([
    z.lazy(() => PatchTransactionTransactionIdMethodDetails1$outboundSchema),
    z.lazy(() => PatchTransactionTransactionIdMethodDetails2$outboundSchema),
    z.lazy(() => PatchTransactionTransactionIdMethodDetails3$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    createdAt: "created_at",
    updatedAt: "updated_at",
    providerReference: "provider_reference",
    providerMetadata: "provider_metadata",
    methodDetails: "method_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdPayments$ {
  /** @deprecated use `PatchTransactionTransactionIdPayments$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdPayments$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdPayments$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdPayments$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdPayments$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdPayments$Outbound;
}

export function patchTransactionTransactionIdPaymentsToJSON(
  patchTransactionTransactionIdPayments: PatchTransactionTransactionIdPayments,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdPayments$outboundSchema.parse(
      patchTransactionTransactionIdPayments,
    ),
  );
}

export function patchTransactionTransactionIdPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdPayments' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200Status
  > = z.nativeEnum(PatchTransactionTransactionIdTransactionsResponse200Status);

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200Status
  > = PatchTransactionTransactionIdTransactionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponse200Status$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200Status$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200Status$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsCustomData$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchTransactionTransactionIdTransactionsCustomData$Outbound = {};

/** @internal */
export const PatchTransactionTransactionIdTransactionsCustomData$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsCustomData$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdTransactionsCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsCustomData$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsCustomData$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsCustomData$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsCustomData$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdTransactionsCustomData$Outbound;
}

export function patchTransactionTransactionIdTransactionsCustomDataToJSON(
  patchTransactionTransactionIdTransactionsCustomData:
    PatchTransactionTransactionIdTransactionsCustomData,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdTransactionsCustomData$outboundSchema.parse(
      patchTransactionTransactionIdTransactionsCustomData,
    ),
  );
}

export function patchTransactionTransactionIdTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdTransactionsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdTransactionsCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdCustomer$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(
    PatchTransactionTransactionIdTransactionsResponse200Status$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsCustomData$inboundSchema
  ),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PatchTransactionTransactionIdCustomer$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  custom_data: PatchTransactionTransactionIdTransactionsCustomData$Outbound;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PatchTransactionTransactionIdCustomer$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdCustomer$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdCustomer
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(
    PatchTransactionTransactionIdTransactionsResponse200Status$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsCustomData$outboundSchema
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdCustomer$ {
  /** @deprecated use `PatchTransactionTransactionIdCustomer$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdCustomer$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdCustomer$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdCustomer$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdCustomer$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdCustomer$Outbound;
}

export function patchTransactionTransactionIdCustomerToJSON(
  patchTransactionTransactionIdCustomer: PatchTransactionTransactionIdCustomer,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdCustomer$outboundSchema.parse(
      patchTransactionTransactionIdCustomer,
    ),
  );
}

export function patchTransactionTransactionIdCustomerFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdCustomer' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponseCustomData$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchTransactionTransactionIdTransactionsResponseCustomData$Outbound =
  {};

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponseCustomData$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsResponseCustomData$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdTransactionsResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponseCustomData$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponseCustomData$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponseCustomData$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponseCustomData$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdTransactionsResponseCustomData$Outbound;
}

export function patchTransactionTransactionIdTransactionsResponseCustomDataToJSON(
  patchTransactionTransactionIdTransactionsResponseCustomData:
    PatchTransactionTransactionIdTransactionsResponseCustomData,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdTransactionsResponseCustomData$outboundSchema
      .parse(patchTransactionTransactionIdTransactionsResponseCustomData),
  );
}

export function patchTransactionTransactionIdTransactionsResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdTransactionsResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdTransactionsResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdTransactionsResponseCustomData' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus,
  );

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus
  > =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdAddress$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  first_line: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsResponseCustomData$inboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$inboundSchema,
  ).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_line": "firstLine",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type PatchTransactionTransactionIdAddress$Outbound = {
  id: string;
  description?: string | null | undefined;
  first_line?: string | null | undefined;
  custom_data:
    PatchTransactionTransactionIdTransactionsResponseCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | null | undefined;
  created_at: string;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const PatchTransactionTransactionIdAddress$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdAddress$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdAddress
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsResponseCustomData$outboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONStatus$outboundSchema,
  ).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstLine: "first_line",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdAddress$ {
  /** @deprecated use `PatchTransactionTransactionIdAddress$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdAddress$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdAddress$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdAddress$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdAddress$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdAddress$Outbound;
}

export function patchTransactionTransactionIdAddressToJSON(
  patchTransactionTransactionIdAddress: PatchTransactionTransactionIdAddress,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdAddress$outboundSchema.parse(
      patchTransactionTransactionIdAddress,
    ),
  );
}

export function patchTransactionTransactionIdAddressFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdAddress' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus
  > =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdType$inboundSchema: z.ZodNativeEnum<
  typeof PatchTransactionTransactionIdType
> = z.nativeEnum(PatchTransactionTransactionIdType);

/** @internal */
export const PatchTransactionTransactionIdType$outboundSchema: z.ZodNativeEnum<
  typeof PatchTransactionTransactionIdType
> = PatchTransactionTransactionIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdType$ {
  /** @deprecated use `PatchTransactionTransactionIdType$inboundSchema` instead. */
  export const inboundSchema = PatchTransactionTransactionIdType$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdType$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdType$outboundSchema;
}

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchTransactionTransactionIdTransactionsResponse200CustomData$Outbound =
  {};

/** @internal */
export const PatchTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdTransactionsResponse200CustomData$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdTransactionsResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdTransactionsResponse200CustomData$ {
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdTransactionsResponse200CustomData$Outbound` instead. */
  export type Outbound =
    PatchTransactionTransactionIdTransactionsResponse200CustomData$Outbound;
}

export function patchTransactionTransactionIdTransactionsResponse200CustomDataToJSON(
  patchTransactionTransactionIdTransactionsResponse200CustomData:
    PatchTransactionTransactionIdTransactionsResponse200CustomData,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema
      .parse(patchTransactionTransactionIdTransactionsResponse200CustomData),
  );
}

export function patchTransactionTransactionIdTransactionsResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdTransactionsResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdTransactionsResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdDiscount$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: PatchTransactionTransactionIdType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsResponse200CustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type PatchTransactionTransactionIdDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    PatchTransactionTransactionIdTransactionsResponse200CustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PatchTransactionTransactionIdDiscount$outboundSchema: z.ZodType<
  PatchTransactionTransactionIdDiscount$Outbound,
  z.ZodTypeDef,
  PatchTransactionTransactionIdDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(
    PatchTransactionTransactionIdTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: PatchTransactionTransactionIdType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PatchTransactionTransactionIdTransactionsResponse200CustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdDiscount$ {
  /** @deprecated use `PatchTransactionTransactionIdDiscount$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdDiscount$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdDiscount$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdDiscount$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdDiscount$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdDiscount$Outbound;
}

export function patchTransactionTransactionIdDiscountToJSON(
  patchTransactionTransactionIdDiscount: PatchTransactionTransactionIdDiscount,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdDiscount$outboundSchema.parse(
      patchTransactionTransactionIdDiscount,
    ),
  );
}

export function patchTransactionTransactionIdDiscountFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionTransactionIdDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionTransactionIdDiscount' from JSON`,
  );
}

/** @internal */
export const PatchTransactionTransactionIdResponseBody$inboundSchema: z.ZodType<
  PatchTransactionTransactionIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PatchTransactionTransactionIdTransactionsStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(
    PatchTransactionTransactionIdCollectionMode$inboundSchema,
  ).optional(),
  custom_data: z.lazy(() =>
    PatchTransactionTransactionIdCustomData$inboundSchema
  ).optional(),
  current_billing_period: z.lazy(() =>
    PatchTransactionTransactionIdCurrentBillingPeriod$inboundSchema
  ).optional(),
  details: z.lazy(() => PatchTransactionTransactionIdDetails$inboundSchema),
  items: z.array(
    z.lazy(() => PatchTransactionTransactionIdItems$inboundSchema),
  ),
  payments: z.lazy(() => PatchTransactionTransactionIdPayments$inboundSchema),
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  customer: z.lazy(() => PatchTransactionTransactionIdCustomer$inboundSchema),
  address: z.lazy(() => PatchTransactionTransactionIdAddress$inboundSchema),
  discount: z.nullable(
    z.lazy(() => PatchTransactionTransactionIdDiscount$inboundSchema),
  ).optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type PatchTransactionTransactionIdResponseBody$Outbound = {
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: PatchTransactionTransactionIdCustomData$Outbound | undefined;
  current_billing_period?:
    | PatchTransactionTransactionIdCurrentBillingPeriod$Outbound
    | undefined;
  details: PatchTransactionTransactionIdDetails$Outbound;
  items: Array<PatchTransactionTransactionIdItems$Outbound>;
  payments: PatchTransactionTransactionIdPayments$Outbound;
  created_at: string;
  updated_at?: string | null | undefined;
  customer: PatchTransactionTransactionIdCustomer$Outbound;
  address: PatchTransactionTransactionIdAddress$Outbound;
  discount?: PatchTransactionTransactionIdDiscount$Outbound | null | undefined;
  invoice_id: string;
};

/** @internal */
export const PatchTransactionTransactionIdResponseBody$outboundSchema:
  z.ZodType<
    PatchTransactionTransactionIdResponseBody$Outbound,
    z.ZodTypeDef,
    PatchTransactionTransactionIdResponseBody
  > = z.object({
    status: PatchTransactionTransactionIdTransactionsStatus$outboundSchema,
    customerId: z.string(),
    addressId: z.string(),
    currencyCode: z.string(),
    subscriptionId: z.nullable(z.string()).optional(),
    discountId: z.nullable(z.string()).optional(),
    collectionMode: z.nullable(
      PatchTransactionTransactionIdCollectionMode$outboundSchema,
    ).optional(),
    customData: z.lazy(() =>
      PatchTransactionTransactionIdCustomData$outboundSchema
    ).optional(),
    currentBillingPeriod: z.lazy(() =>
      PatchTransactionTransactionIdCurrentBillingPeriod$outboundSchema
    ).optional(),
    details: z.lazy(() => PatchTransactionTransactionIdDetails$outboundSchema),
    items: z.array(
      z.lazy(() => PatchTransactionTransactionIdItems$outboundSchema),
    ),
    payments: z.lazy(() =>
      PatchTransactionTransactionIdPayments$outboundSchema
    ),
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
    customer: z.lazy(() =>
      PatchTransactionTransactionIdCustomer$outboundSchema
    ),
    address: z.lazy(() => PatchTransactionTransactionIdAddress$outboundSchema),
    discount: z.nullable(
      z.lazy(() => PatchTransactionTransactionIdDiscount$outboundSchema),
    ).optional(),
    invoiceId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      customerId: "customer_id",
      addressId: "address_id",
      currencyCode: "currency_code",
      subscriptionId: "subscription_id",
      discountId: "discount_id",
      collectionMode: "collection_mode",
      customData: "custom_data",
      currentBillingPeriod: "current_billing_period",
      createdAt: "created_at",
      updatedAt: "updated_at",
      invoiceId: "invoice_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionTransactionIdResponseBody$ {
  /** @deprecated use `PatchTransactionTransactionIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchTransactionTransactionIdResponseBody$inboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchTransactionTransactionIdResponseBody$outboundSchema;
  /** @deprecated use `PatchTransactionTransactionIdResponseBody$Outbound` instead. */
  export type Outbound = PatchTransactionTransactionIdResponseBody$Outbound;
}

export function patchTransactionTransactionIdResponseBodyToJSON(
  patchTransactionTransactionIdResponseBody:
    PatchTransactionTransactionIdResponseBody,
): string {
  return JSON.stringify(
    PatchTransactionTransactionIdResponseBody$outboundSchema.parse(
      patchTransactionTransactionIdResponseBody,
    ),
  );
}

export function patchTransactionTransactionIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchTransactionTransactionIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTransactionTransactionIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchTransactionTransactionIdResponseBody' from JSON`,
  );
}
