/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetCustomersStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetCustomersStatus = ClosedEnum<typeof GetCustomersStatus>;

/**
 * Any valid JSON value
 */
export type GetCustomersCustomData = {};

export type GetCustomersResponseBody = {
  id: string;
  email: string;
  name: string;
  status?: GetCustomersStatus | null | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetCustomersCustomData;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const GetCustomersStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetCustomersStatus
> = z.nativeEnum(GetCustomersStatus);

/** @internal */
export const GetCustomersStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetCustomersStatus
> = GetCustomersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersStatus$ {
  /** @deprecated use `GetCustomersStatus$inboundSchema` instead. */
  export const inboundSchema = GetCustomersStatus$inboundSchema;
  /** @deprecated use `GetCustomersStatus$outboundSchema` instead. */
  export const outboundSchema = GetCustomersStatus$outboundSchema;
}

/** @internal */
export const GetCustomersCustomData$inboundSchema: z.ZodType<
  GetCustomersCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetCustomersCustomData$Outbound = {};

/** @internal */
export const GetCustomersCustomData$outboundSchema: z.ZodType<
  GetCustomersCustomData$Outbound,
  z.ZodTypeDef,
  GetCustomersCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersCustomData$ {
  /** @deprecated use `GetCustomersCustomData$inboundSchema` instead. */
  export const inboundSchema = GetCustomersCustomData$inboundSchema;
  /** @deprecated use `GetCustomersCustomData$outboundSchema` instead. */
  export const outboundSchema = GetCustomersCustomData$outboundSchema;
  /** @deprecated use `GetCustomersCustomData$Outbound` instead. */
  export type Outbound = GetCustomersCustomData$Outbound;
}

export function getCustomersCustomDataToJSON(
  getCustomersCustomData: GetCustomersCustomData,
): string {
  return JSON.stringify(
    GetCustomersCustomData$outboundSchema.parse(getCustomersCustomData),
  );
}

export function getCustomersCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomersCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersCustomData' from JSON`,
  );
}

/** @internal */
export const GetCustomersResponseBody$inboundSchema: z.ZodType<
  GetCustomersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(GetCustomersStatus$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => GetCustomersCustomData$inboundSchema),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetCustomersResponseBody$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  custom_data: GetCustomersCustomData$Outbound;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetCustomersResponseBody$outboundSchema: z.ZodType<
  GetCustomersResponseBody$Outbound,
  z.ZodTypeDef,
  GetCustomersResponseBody
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: z.nullable(GetCustomersStatus$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => GetCustomersCustomData$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomersResponseBody$ {
  /** @deprecated use `GetCustomersResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetCustomersResponseBody$inboundSchema;
  /** @deprecated use `GetCustomersResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetCustomersResponseBody$outboundSchema;
  /** @deprecated use `GetCustomersResponseBody$Outbound` instead. */
  export type Outbound = GetCustomersResponseBody$Outbound;
}

export function getCustomersResponseBodyToJSON(
  getCustomersResponseBody: GetCustomersResponseBody,
): string {
  return JSON.stringify(
    GetCustomersResponseBody$outboundSchema.parse(getCustomersResponseBody),
  );
}

export function getCustomersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomersResponseBody' from JSON`,
  );
}
