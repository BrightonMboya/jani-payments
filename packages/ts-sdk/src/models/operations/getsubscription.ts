/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetSubscriptionInterval = ClosedEnum<
  typeof GetSubscriptionInterval
>;

export type GetSubscriptionPaymentTerms = {
  interval?: GetSubscriptionInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type GetSubscriptionBillingDetails = {
  paymentTerms: GetSubscriptionPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type GetSubscriptionCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type GetSubscriptionBillingCycle = {
  frequency: number;
  interval: string;
};

export const GetSubscriptionAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type GetSubscriptionAction = ClosedEnum<typeof GetSubscriptionAction>;

export const GetSubscriptionStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type GetSubscriptionStatus = ClosedEnum<typeof GetSubscriptionStatus>;

export type GetSubscriptionScheduledChange = {
  id: string;
  subscriptionId: string;
  action: GetSubscriptionAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: GetSubscriptionStatus;
};

export const GetSubscriptionSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type GetSubscriptionSubscriptionStatus = ClosedEnum<
  typeof GetSubscriptionSubscriptionStatus
>;

export const GetSubscriptionSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type GetSubscriptionSubscriptionType = ClosedEnum<
  typeof GetSubscriptionSubscriptionType
>;

export const GetSubscriptionSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetSubscriptionSubscriptionInterval = ClosedEnum<
  typeof GetSubscriptionSubscriptionInterval
>;

export type GetSubscriptionSubscriptionBillingCycle = {
  interval: GetSubscriptionSubscriptionInterval;
  frequency: number;
};

export const GetSubscriptionSubscriptionResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetSubscriptionSubscriptionResponseInterval = ClosedEnum<
  typeof GetSubscriptionSubscriptionResponseInterval
>;

export type GetSubscriptionTrialPeriod = {
  interval: GetSubscriptionSubscriptionResponseInterval;
  frequency: number;
};

export type GetSubscriptionUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const GetSubscriptionSubscriptionResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetSubscriptionSubscriptionResponse200Status = ClosedEnum<
  typeof GetSubscriptionSubscriptionResponse200Status
>;

/**
 * Any valid JSON value
 */
export type GetSubscriptionSubscriptionResponseCustomData = {};

export type GetSubscriptionPrice = {
  productId: string;
  description?: string | null | undefined;
  type: GetSubscriptionSubscriptionType;
  name: string;
  billingCycle: GetSubscriptionSubscriptionBillingCycle;
  trialPeriod: GetSubscriptionTrialPeriod;
  unitPrice: GetSubscriptionUnitPrice;
  status: GetSubscriptionSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?: GetSubscriptionSubscriptionResponseCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type GetSubscriptionItems = {
  status: GetSubscriptionSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: GetSubscriptionPrice;
};

/**
 * Any valid JSON value
 */
export type GetSubscriptionCustomData = {};

export type GetSubscriptionManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const GetSubscriptionSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetSubscriptionSubscriptionResponseStatus = ClosedEnum<
  typeof GetSubscriptionSubscriptionResponseStatus
>;

export const GetSubscriptionType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type GetSubscriptionType = ClosedEnum<typeof GetSubscriptionType>;

/**
 * Any valid JSON value
 */
export type GetSubscriptionSubscriptionCustomData = {};

export type GetSubscriptionDiscount = {
  id: string;
  status?: GetSubscriptionSubscriptionResponseStatus | null | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: GetSubscriptionType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetSubscriptionSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type GetSubscriptionData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: GetSubscriptionBillingDetails;
  currentBillingPeriod: GetSubscriptionCurrentBillingPeriod;
  billingCycle: GetSubscriptionBillingCycle;
  scheduledChange: Array<GetSubscriptionScheduledChange>;
  items: Array<GetSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?: GetSubscriptionCustomData | undefined;
  managementUrls: GetSubscriptionManagementUrls;
  discount?: GetSubscriptionDiscount | null | undefined;
};

export type GetSubscriptionResponseBody = {
  data: GetSubscriptionData;
};

/** @internal */
export const GetSubscriptionInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionInterval
> = z.nativeEnum(GetSubscriptionInterval);

/** @internal */
export const GetSubscriptionInterval$outboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionInterval
> = GetSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionInterval$ {
  /** @deprecated use `GetSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionInterval$inboundSchema;
  /** @deprecated use `GetSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionInterval$outboundSchema;
}

/** @internal */
export const GetSubscriptionPaymentTerms$inboundSchema: z.ZodType<
  GetSubscriptionPaymentTerms,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: z.nullable(GetSubscriptionInterval$inboundSchema).optional(),
  frequency: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetSubscriptionPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const GetSubscriptionPaymentTerms$outboundSchema: z.ZodType<
  GetSubscriptionPaymentTerms$Outbound,
  z.ZodTypeDef,
  GetSubscriptionPaymentTerms
> = z.object({
  interval: z.nullable(GetSubscriptionInterval$outboundSchema).optional(),
  frequency: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionPaymentTerms$ {
  /** @deprecated use `GetSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `GetSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `GetSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound = GetSubscriptionPaymentTerms$Outbound;
}

export function getSubscriptionPaymentTermsToJSON(
  getSubscriptionPaymentTerms: GetSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    GetSubscriptionPaymentTerms$outboundSchema.parse(
      getSubscriptionPaymentTerms,
    ),
  );
}

export function getSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionPaymentTerms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionPaymentTerms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionBillingDetails$inboundSchema: z.ZodType<
  GetSubscriptionBillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_terms: z.lazy(() => GetSubscriptionPaymentTerms$inboundSchema),
  enable_checkout: z.nullable(z.boolean()).optional(),
  additional_information: z.nullable(z.string()).optional(),
  purchase_order_number: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_terms": "paymentTerms",
    "enable_checkout": "enableCheckout",
    "additional_information": "additionalInformation",
    "purchase_order_number": "purchaseOrderNumber",
  });
});

/** @internal */
export type GetSubscriptionBillingDetails$Outbound = {
  payment_terms: GetSubscriptionPaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const GetSubscriptionBillingDetails$outboundSchema: z.ZodType<
  GetSubscriptionBillingDetails$Outbound,
  z.ZodTypeDef,
  GetSubscriptionBillingDetails
> = z.object({
  paymentTerms: z.lazy(() => GetSubscriptionPaymentTerms$outboundSchema),
  enableCheckout: z.nullable(z.boolean()).optional(),
  additionalInformation: z.nullable(z.string()).optional(),
  purchaseOrderNumber: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentTerms: "payment_terms",
    enableCheckout: "enable_checkout",
    additionalInformation: "additional_information",
    purchaseOrderNumber: "purchase_order_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionBillingDetails$ {
  /** @deprecated use `GetSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `GetSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `GetSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound = GetSubscriptionBillingDetails$Outbound;
}

export function getSubscriptionBillingDetailsToJSON(
  getSubscriptionBillingDetails: GetSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    GetSubscriptionBillingDetails$outboundSchema.parse(
      getSubscriptionBillingDetails,
    ),
  );
}

export function getSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionBillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionBillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionCurrentBillingPeriod$inboundSchema: z.ZodType<
  GetSubscriptionCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.nullable(z.string()),
  ends_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type GetSubscriptionCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const GetSubscriptionCurrentBillingPeriod$outboundSchema: z.ZodType<
  GetSubscriptionCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  GetSubscriptionCurrentBillingPeriod
> = z.object({
  startsAt: z.nullable(z.string()),
  endsAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionCurrentBillingPeriod$ {
  /** @deprecated use `GetSubscriptionCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `GetSubscriptionCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `GetSubscriptionCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = GetSubscriptionCurrentBillingPeriod$Outbound;
}

export function getSubscriptionCurrentBillingPeriodToJSON(
  getSubscriptionCurrentBillingPeriod: GetSubscriptionCurrentBillingPeriod,
): string {
  return JSON.stringify(
    GetSubscriptionCurrentBillingPeriod$outboundSchema.parse(
      getSubscriptionCurrentBillingPeriod,
    ),
  );
}

export function getSubscriptionCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSubscriptionCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionBillingCycle$inboundSchema: z.ZodType<
  GetSubscriptionBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/** @internal */
export type GetSubscriptionBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const GetSubscriptionBillingCycle$outboundSchema: z.ZodType<
  GetSubscriptionBillingCycle$Outbound,
  z.ZodTypeDef,
  GetSubscriptionBillingCycle
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionBillingCycle$ {
  /** @deprecated use `GetSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `GetSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `GetSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = GetSubscriptionBillingCycle$Outbound;
}

export function getSubscriptionBillingCycleToJSON(
  getSubscriptionBillingCycle: GetSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    GetSubscriptionBillingCycle$outboundSchema.parse(
      getSubscriptionBillingCycle,
    ),
  );
}

export function getSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionAction$inboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionAction
> = z.nativeEnum(GetSubscriptionAction);

/** @internal */
export const GetSubscriptionAction$outboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionAction
> = GetSubscriptionAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionAction$ {
  /** @deprecated use `GetSubscriptionAction$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionAction$inboundSchema;
  /** @deprecated use `GetSubscriptionAction$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionAction$outboundSchema;
}

/** @internal */
export const GetSubscriptionStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionStatus
> = z.nativeEnum(GetSubscriptionStatus);

/** @internal */
export const GetSubscriptionStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionStatus
> = GetSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionStatus$ {
  /** @deprecated use `GetSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionStatus$inboundSchema;
  /** @deprecated use `GetSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionStatus$outboundSchema;
}

/** @internal */
export const GetSubscriptionScheduledChange$inboundSchema: z.ZodType<
  GetSubscriptionScheduledChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  subscription_id: z.string(),
  action: GetSubscriptionAction$inboundSchema,
  effective_at: z.string(),
  resumes_at: z.nullable(z.string()).optional(),
  status: GetSubscriptionStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "effective_at": "effectiveAt",
    "resumes_at": "resumesAt",
  });
});

/** @internal */
export type GetSubscriptionScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const GetSubscriptionScheduledChange$outboundSchema: z.ZodType<
  GetSubscriptionScheduledChange$Outbound,
  z.ZodTypeDef,
  GetSubscriptionScheduledChange
> = z.object({
  id: z.string(),
  subscriptionId: z.string(),
  action: GetSubscriptionAction$outboundSchema,
  effectiveAt: z.string(),
  resumesAt: z.nullable(z.string()).optional(),
  status: GetSubscriptionStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    effectiveAt: "effective_at",
    resumesAt: "resumes_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionScheduledChange$ {
  /** @deprecated use `GetSubscriptionScheduledChange$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionScheduledChange$inboundSchema;
  /** @deprecated use `GetSubscriptionScheduledChange$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionScheduledChange$outboundSchema;
  /** @deprecated use `GetSubscriptionScheduledChange$Outbound` instead. */
  export type Outbound = GetSubscriptionScheduledChange$Outbound;
}

export function getSubscriptionScheduledChangeToJSON(
  getSubscriptionScheduledChange: GetSubscriptionScheduledChange,
): string {
  return JSON.stringify(
    GetSubscriptionScheduledChange$outboundSchema.parse(
      getSubscriptionScheduledChange,
    ),
  );
}

export function getSubscriptionScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionScheduledChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionScheduledChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionScheduledChange' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionSubscriptionStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionSubscriptionStatus
> = z.nativeEnum(GetSubscriptionSubscriptionStatus);

/** @internal */
export const GetSubscriptionSubscriptionStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionSubscriptionStatus
> = GetSubscriptionSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionStatus$ {
  /** @deprecated use `GetSubscriptionSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionSubscriptionStatus$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionSubscriptionStatus$outboundSchema;
}

/** @internal */
export const GetSubscriptionSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionSubscriptionType
> = z.nativeEnum(GetSubscriptionSubscriptionType);

/** @internal */
export const GetSubscriptionSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionSubscriptionType
> = GetSubscriptionSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionType$ {
  /** @deprecated use `GetSubscriptionSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionSubscriptionType$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionType$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionSubscriptionType$outboundSchema;
}

/** @internal */
export const GetSubscriptionSubscriptionInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionSubscriptionInterval
> = z.nativeEnum(GetSubscriptionSubscriptionInterval);

/** @internal */
export const GetSubscriptionSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof GetSubscriptionSubscriptionInterval> =
    GetSubscriptionSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionInterval$ {
  /** @deprecated use `GetSubscriptionSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionSubscriptionInterval$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionSubscriptionInterval$outboundSchema;
}

/** @internal */
export const GetSubscriptionSubscriptionBillingCycle$inboundSchema: z.ZodType<
  GetSubscriptionSubscriptionBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetSubscriptionSubscriptionInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetSubscriptionSubscriptionBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetSubscriptionSubscriptionBillingCycle$outboundSchema: z.ZodType<
  GetSubscriptionSubscriptionBillingCycle$Outbound,
  z.ZodTypeDef,
  GetSubscriptionSubscriptionBillingCycle
> = z.object({
  interval: GetSubscriptionSubscriptionInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionBillingCycle$ {
  /** @deprecated use `GetSubscriptionSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = GetSubscriptionSubscriptionBillingCycle$Outbound;
}

export function getSubscriptionSubscriptionBillingCycleToJSON(
  getSubscriptionSubscriptionBillingCycle:
    GetSubscriptionSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    GetSubscriptionSubscriptionBillingCycle$outboundSchema.parse(
      getSubscriptionSubscriptionBillingCycle,
    ),
  );
}

export function getSubscriptionSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSubscriptionSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSubscriptionSubscriptionBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSubscriptionSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<typeof GetSubscriptionSubscriptionResponseInterval> = z
    .nativeEnum(GetSubscriptionSubscriptionResponseInterval);

/** @internal */
export const GetSubscriptionSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<typeof GetSubscriptionSubscriptionResponseInterval> =
    GetSubscriptionSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionResponseInterval$ {
  /** @deprecated use `GetSubscriptionSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const GetSubscriptionTrialPeriod$inboundSchema: z.ZodType<
  GetSubscriptionTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetSubscriptionSubscriptionResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetSubscriptionTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetSubscriptionTrialPeriod$outboundSchema: z.ZodType<
  GetSubscriptionTrialPeriod$Outbound,
  z.ZodTypeDef,
  GetSubscriptionTrialPeriod
> = z.object({
  interval: GetSubscriptionSubscriptionResponseInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionTrialPeriod$ {
  /** @deprecated use `GetSubscriptionTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionTrialPeriod$inboundSchema;
  /** @deprecated use `GetSubscriptionTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionTrialPeriod$outboundSchema;
  /** @deprecated use `GetSubscriptionTrialPeriod$Outbound` instead. */
  export type Outbound = GetSubscriptionTrialPeriod$Outbound;
}

export function getSubscriptionTrialPeriodToJSON(
  getSubscriptionTrialPeriod: GetSubscriptionTrialPeriod,
): string {
  return JSON.stringify(
    GetSubscriptionTrialPeriod$outboundSchema.parse(getSubscriptionTrialPeriod),
  );
}

export function getSubscriptionTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionTrialPeriod' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionUnitPrice$inboundSchema: z.ZodType<
  GetSubscriptionUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type GetSubscriptionUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const GetSubscriptionUnitPrice$outboundSchema: z.ZodType<
  GetSubscriptionUnitPrice$Outbound,
  z.ZodTypeDef,
  GetSubscriptionUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionUnitPrice$ {
  /** @deprecated use `GetSubscriptionUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionUnitPrice$inboundSchema;
  /** @deprecated use `GetSubscriptionUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionUnitPrice$outboundSchema;
  /** @deprecated use `GetSubscriptionUnitPrice$Outbound` instead. */
  export type Outbound = GetSubscriptionUnitPrice$Outbound;
}

export function getSubscriptionUnitPriceToJSON(
  getSubscriptionUnitPrice: GetSubscriptionUnitPrice,
): string {
  return JSON.stringify(
    GetSubscriptionUnitPrice$outboundSchema.parse(getSubscriptionUnitPrice),
  );
}

export function getSubscriptionUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof GetSubscriptionSubscriptionResponse200Status> = z
    .nativeEnum(GetSubscriptionSubscriptionResponse200Status);

/** @internal */
export const GetSubscriptionSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof GetSubscriptionSubscriptionResponse200Status> =
    GetSubscriptionSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionResponse200Status$ {
  /** @deprecated use `GetSubscriptionSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const GetSubscriptionSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    GetSubscriptionSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetSubscriptionSubscriptionResponseCustomData$Outbound = {};

/** @internal */
export const GetSubscriptionSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    GetSubscriptionSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    GetSubscriptionSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionResponseCustomData$ {
  /** @deprecated use `GetSubscriptionSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound = GetSubscriptionSubscriptionResponseCustomData$Outbound;
}

export function getSubscriptionSubscriptionResponseCustomDataToJSON(
  getSubscriptionSubscriptionResponseCustomData:
    GetSubscriptionSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    GetSubscriptionSubscriptionResponseCustomData$outboundSchema.parse(
      getSubscriptionSubscriptionResponseCustomData,
    ),
  );
}

export function getSubscriptionSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSubscriptionSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSubscriptionSubscriptionResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSubscriptionSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionPrice$inboundSchema: z.ZodType<
  GetSubscriptionPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetSubscriptionSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    GetSubscriptionSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() => GetSubscriptionTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => GetSubscriptionUnitPrice$inboundSchema),
  status: GetSubscriptionSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    GetSubscriptionSubscriptionResponseCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetSubscriptionPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: GetSubscriptionSubscriptionBillingCycle$Outbound;
  trial_period: GetSubscriptionTrialPeriod$Outbound;
  unit_price: GetSubscriptionUnitPrice$Outbound;
  status: string;
  custom_data?:
    | GetSubscriptionSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetSubscriptionPrice$outboundSchema: z.ZodType<
  GetSubscriptionPrice$Outbound,
  z.ZodTypeDef,
  GetSubscriptionPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetSubscriptionSubscriptionType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    GetSubscriptionSubscriptionBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() => GetSubscriptionTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => GetSubscriptionUnitPrice$outboundSchema),
  status: GetSubscriptionSubscriptionResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    GetSubscriptionSubscriptionResponseCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionPrice$ {
  /** @deprecated use `GetSubscriptionPrice$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionPrice$inboundSchema;
  /** @deprecated use `GetSubscriptionPrice$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionPrice$outboundSchema;
  /** @deprecated use `GetSubscriptionPrice$Outbound` instead. */
  export type Outbound = GetSubscriptionPrice$Outbound;
}

export function getSubscriptionPriceToJSON(
  getSubscriptionPrice: GetSubscriptionPrice,
): string {
  return JSON.stringify(
    GetSubscriptionPrice$outboundSchema.parse(getSubscriptionPrice),
  );
}

export function getSubscriptionPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionPrice' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionItems$inboundSchema: z.ZodType<
  GetSubscriptionItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: GetSubscriptionSubscriptionStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.lazy(() => GetSubscriptionPrice$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type GetSubscriptionItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: GetSubscriptionPrice$Outbound;
};

/** @internal */
export const GetSubscriptionItems$outboundSchema: z.ZodType<
  GetSubscriptionItems$Outbound,
  z.ZodTypeDef,
  GetSubscriptionItems
> = z.object({
  status: GetSubscriptionSubscriptionStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.lazy(() => GetSubscriptionPrice$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionItems$ {
  /** @deprecated use `GetSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionItems$inboundSchema;
  /** @deprecated use `GetSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionItems$outboundSchema;
  /** @deprecated use `GetSubscriptionItems$Outbound` instead. */
  export type Outbound = GetSubscriptionItems$Outbound;
}

export function getSubscriptionItemsToJSON(
  getSubscriptionItems: GetSubscriptionItems,
): string {
  return JSON.stringify(
    GetSubscriptionItems$outboundSchema.parse(getSubscriptionItems),
  );
}

export function getSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionCustomData$inboundSchema: z.ZodType<
  GetSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetSubscriptionCustomData$Outbound = {};

/** @internal */
export const GetSubscriptionCustomData$outboundSchema: z.ZodType<
  GetSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  GetSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionCustomData$ {
  /** @deprecated use `GetSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionCustomData$inboundSchema;
  /** @deprecated use `GetSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionCustomData$outboundSchema;
  /** @deprecated use `GetSubscriptionCustomData$Outbound` instead. */
  export type Outbound = GetSubscriptionCustomData$Outbound;
}

export function getSubscriptionCustomDataToJSON(
  getSubscriptionCustomData: GetSubscriptionCustomData,
): string {
  return JSON.stringify(
    GetSubscriptionCustomData$outboundSchema.parse(getSubscriptionCustomData),
  );
}

export function getSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionManagementUrls$inboundSchema: z.ZodType<
  GetSubscriptionManagementUrls,
  z.ZodTypeDef,
  unknown
> = z.object({
  update_payment_method: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "update_payment_method": "updatePaymentMethod",
  });
});

/** @internal */
export type GetSubscriptionManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const GetSubscriptionManagementUrls$outboundSchema: z.ZodType<
  GetSubscriptionManagementUrls$Outbound,
  z.ZodTypeDef,
  GetSubscriptionManagementUrls
> = z.object({
  updatePaymentMethod: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    updatePaymentMethod: "update_payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionManagementUrls$ {
  /** @deprecated use `GetSubscriptionManagementUrls$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionManagementUrls$inboundSchema;
  /** @deprecated use `GetSubscriptionManagementUrls$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionManagementUrls$outboundSchema;
  /** @deprecated use `GetSubscriptionManagementUrls$Outbound` instead. */
  export type Outbound = GetSubscriptionManagementUrls$Outbound;
}

export function getSubscriptionManagementUrlsToJSON(
  getSubscriptionManagementUrls: GetSubscriptionManagementUrls,
): string {
  return JSON.stringify(
    GetSubscriptionManagementUrls$outboundSchema.parse(
      getSubscriptionManagementUrls,
    ),
  );
}

export function getSubscriptionManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionManagementUrls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionManagementUrls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionManagementUrls' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetSubscriptionSubscriptionResponseStatus> = z
    .nativeEnum(GetSubscriptionSubscriptionResponseStatus);

/** @internal */
export const GetSubscriptionSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetSubscriptionSubscriptionResponseStatus> =
    GetSubscriptionSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionResponseStatus$ {
  /** @deprecated use `GetSubscriptionSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const GetSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionType
> = z.nativeEnum(GetSubscriptionType);

/** @internal */
export const GetSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof GetSubscriptionType
> = GetSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionType$ {
  /** @deprecated use `GetSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionType$inboundSchema;
  /** @deprecated use `GetSubscriptionType$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionType$outboundSchema;
}

/** @internal */
export const GetSubscriptionSubscriptionCustomData$inboundSchema: z.ZodType<
  GetSubscriptionSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetSubscriptionSubscriptionCustomData$Outbound = {};

/** @internal */
export const GetSubscriptionSubscriptionCustomData$outboundSchema: z.ZodType<
  GetSubscriptionSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  GetSubscriptionSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSubscriptionCustomData$ {
  /** @deprecated use `GetSubscriptionSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionSubscriptionCustomData$inboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionSubscriptionCustomData$outboundSchema;
  /** @deprecated use `GetSubscriptionSubscriptionCustomData$Outbound` instead. */
  export type Outbound = GetSubscriptionSubscriptionCustomData$Outbound;
}

export function getSubscriptionSubscriptionCustomDataToJSON(
  getSubscriptionSubscriptionCustomData: GetSubscriptionSubscriptionCustomData,
): string {
  return JSON.stringify(
    GetSubscriptionSubscriptionCustomData$outboundSchema.parse(
      getSubscriptionSubscriptionCustomData,
    ),
  );
}

export function getSubscriptionSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionSubscriptionCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSubscriptionSubscriptionCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionDiscount$inboundSchema: z.ZodType<
  GetSubscriptionDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(GetSubscriptionSubscriptionResponseStatus$inboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: GetSubscriptionType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    GetSubscriptionSubscriptionCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type GetSubscriptionDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data: GetSubscriptionSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const GetSubscriptionDiscount$outboundSchema: z.ZodType<
  GetSubscriptionDiscount$Outbound,
  z.ZodTypeDef,
  GetSubscriptionDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(GetSubscriptionSubscriptionResponseStatus$outboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: GetSubscriptionType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    GetSubscriptionSubscriptionCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionDiscount$ {
  /** @deprecated use `GetSubscriptionDiscount$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionDiscount$inboundSchema;
  /** @deprecated use `GetSubscriptionDiscount$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionDiscount$outboundSchema;
  /** @deprecated use `GetSubscriptionDiscount$Outbound` instead. */
  export type Outbound = GetSubscriptionDiscount$Outbound;
}

export function getSubscriptionDiscountToJSON(
  getSubscriptionDiscount: GetSubscriptionDiscount,
): string {
  return JSON.stringify(
    GetSubscriptionDiscount$outboundSchema.parse(getSubscriptionDiscount),
  );
}

export function getSubscriptionDiscountFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionDiscount' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionData$inboundSchema: z.ZodType<
  GetSubscriptionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  started_at: z.nullable(z.string()),
  first_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  paused_at: z.nullable(z.string()),
  canceled_at: z.nullable(z.string()),
  collection_mode: z.string(),
  billing_details: z.lazy(() => GetSubscriptionBillingDetails$inboundSchema),
  current_billing_period: z.lazy(() =>
    GetSubscriptionCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() => GetSubscriptionBillingCycle$inboundSchema),
  scheduled_change: z.array(
    z.lazy(() => GetSubscriptionScheduledChange$inboundSchema),
  ),
  items: z.array(z.lazy(() => GetSubscriptionItems$inboundSchema)),
  custom_data: z.lazy(() => GetSubscriptionCustomData$inboundSchema).optional(),
  management_urls: z.lazy(() => GetSubscriptionManagementUrls$inboundSchema),
  discount: z.nullable(z.lazy(() => GetSubscriptionDiscount$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type GetSubscriptionData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: GetSubscriptionBillingDetails$Outbound;
  current_billing_period: GetSubscriptionCurrentBillingPeriod$Outbound;
  billing_cycle: GetSubscriptionBillingCycle$Outbound;
  scheduled_change: Array<GetSubscriptionScheduledChange$Outbound>;
  items: Array<GetSubscriptionItems$Outbound>;
  custom_data?: GetSubscriptionCustomData$Outbound | undefined;
  management_urls: GetSubscriptionManagementUrls$Outbound;
  discount?: GetSubscriptionDiscount$Outbound | null | undefined;
};

/** @internal */
export const GetSubscriptionData$outboundSchema: z.ZodType<
  GetSubscriptionData$Outbound,
  z.ZodTypeDef,
  GetSubscriptionData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startedAt: z.nullable(z.string()),
  firstBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  pausedAt: z.nullable(z.string()),
  canceledAt: z.nullable(z.string()),
  collectionMode: z.string(),
  billingDetails: z.lazy(() => GetSubscriptionBillingDetails$outboundSchema),
  currentBillingPeriod: z.lazy(() =>
    GetSubscriptionCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() => GetSubscriptionBillingCycle$outboundSchema),
  scheduledChange: z.array(
    z.lazy(() => GetSubscriptionScheduledChange$outboundSchema),
  ),
  items: z.array(z.lazy(() => GetSubscriptionItems$outboundSchema)),
  customData: z.lazy(() => GetSubscriptionCustomData$outboundSchema).optional(),
  managementUrls: z.lazy(() => GetSubscriptionManagementUrls$outboundSchema),
  discount: z.nullable(z.lazy(() => GetSubscriptionDiscount$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionData$ {
  /** @deprecated use `GetSubscriptionData$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionData$inboundSchema;
  /** @deprecated use `GetSubscriptionData$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionData$outboundSchema;
  /** @deprecated use `GetSubscriptionData$Outbound` instead. */
  export type Outbound = GetSubscriptionData$Outbound;
}

export function getSubscriptionDataToJSON(
  getSubscriptionData: GetSubscriptionData,
): string {
  return JSON.stringify(
    GetSubscriptionData$outboundSchema.parse(getSubscriptionData),
  );
}

export function getSubscriptionDataFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionData' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionResponseBody$inboundSchema: z.ZodType<
  GetSubscriptionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetSubscriptionData$inboundSchema),
});

/** @internal */
export type GetSubscriptionResponseBody$Outbound = {
  data: GetSubscriptionData$Outbound;
};

/** @internal */
export const GetSubscriptionResponseBody$outboundSchema: z.ZodType<
  GetSubscriptionResponseBody$Outbound,
  z.ZodTypeDef,
  GetSubscriptionResponseBody
> = z.object({
  data: z.lazy(() => GetSubscriptionData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionResponseBody$ {
  /** @deprecated use `GetSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `GetSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `GetSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = GetSubscriptionResponseBody$Outbound;
}

export function getSubscriptionResponseBodyToJSON(
  getSubscriptionResponseBody: GetSubscriptionResponseBody,
): string {
  return JSON.stringify(
    GetSubscriptionResponseBody$outboundSchema.parse(
      getSubscriptionResponseBody,
    ),
  );
}

export function getSubscriptionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionResponseBody' from JSON`,
  );
}
