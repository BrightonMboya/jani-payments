/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SubscriptionListInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionListInterval = ClosedEnum<
  typeof SubscriptionListInterval
>;

export type SubscriptionListPaymentTerms = {
  interval?: SubscriptionListInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type SubscriptionListBillingDetails = {
  paymentTerms: SubscriptionListPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type SubscriptionListCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type SubscriptionListBillingCycle = {
  frequency: number;
  interval: string;
};

export const Action = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type Action = ClosedEnum<typeof Action>;

export const SubscriptionListStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type SubscriptionListStatus = ClosedEnum<typeof SubscriptionListStatus>;

export type ScheduledChange = {
  id: string;
  subscriptionId: string;
  action: Action;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: SubscriptionListStatus;
};

export const SubscriptionListSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type SubscriptionListSubscriptionStatus = ClosedEnum<
  typeof SubscriptionListSubscriptionStatus
>;

export const SubscriptionListSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type SubscriptionListSubscriptionType = ClosedEnum<
  typeof SubscriptionListSubscriptionType
>;

export const SubscriptionListSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionListSubscriptionInterval = ClosedEnum<
  typeof SubscriptionListSubscriptionInterval
>;

export type SubscriptionListSubscriptionBillingCycle = {
  interval: SubscriptionListSubscriptionInterval;
  frequency: number;
};

export const SubscriptionListSubscriptionResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionListSubscriptionResponseInterval = ClosedEnum<
  typeof SubscriptionListSubscriptionResponseInterval
>;

export type SubscriptionListTrialPeriod = {
  interval: SubscriptionListSubscriptionResponseInterval;
  frequency: number;
};

export type SubscriptionListUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const SubscriptionListSubscriptionResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionListSubscriptionResponse200Status = ClosedEnum<
  typeof SubscriptionListSubscriptionResponse200Status
>;

/**
 * Any valid JSON value
 */
export type SubscriptionListSubscriptionResponseCustomData = {};

export type SubscriptionListPrice = {
  productId: string;
  description?: string | null | undefined;
  type: SubscriptionListSubscriptionType;
  name: string;
  billingCycle: SubscriptionListSubscriptionBillingCycle;
  trialPeriod: SubscriptionListTrialPeriod;
  unitPrice: SubscriptionListUnitPrice;
  status: SubscriptionListSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionListSubscriptionResponseCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type SubscriptionListItems = {
  status: SubscriptionListSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: SubscriptionListPrice;
};

/**
 * Any valid JSON value
 */
export type SubscriptionListCustomData = {};

export type SubscriptionListManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const SubscriptionListSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionListSubscriptionResponseStatus = ClosedEnum<
  typeof SubscriptionListSubscriptionResponseStatus
>;

export const SubscriptionListType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type SubscriptionListType = ClosedEnum<typeof SubscriptionListType>;

/**
 * Any valid JSON value
 */
export type SubscriptionListSubscriptionCustomData = {};

export type SubscriptionListDiscount = {
  id: string;
  status?: SubscriptionListSubscriptionResponseStatus | null | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: SubscriptionListType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: SubscriptionListSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type Data = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: SubscriptionListBillingDetails;
  currentBillingPeriod: SubscriptionListCurrentBillingPeriod;
  billingCycle: SubscriptionListBillingCycle;
  scheduledChange: Array<ScheduledChange>;
  items: Array<SubscriptionListItems>;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionListCustomData | undefined;
  managementUrls: SubscriptionListManagementUrls;
  discount?: SubscriptionListDiscount | null | undefined;
};

export type SubscriptionListResponseBody = {
  data: Data;
};

/** @internal */
export const SubscriptionListInterval$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListInterval
> = z.nativeEnum(SubscriptionListInterval);

/** @internal */
export const SubscriptionListInterval$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListInterval
> = SubscriptionListInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListInterval$ {
  /** @deprecated use `SubscriptionListInterval$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListInterval$inboundSchema;
  /** @deprecated use `SubscriptionListInterval$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListInterval$outboundSchema;
}

/** @internal */
export const SubscriptionListPaymentTerms$inboundSchema: z.ZodType<
  SubscriptionListPaymentTerms,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: z.nullable(SubscriptionListInterval$inboundSchema).optional(),
  frequency: z.nullable(z.number()).optional(),
});

/** @internal */
export type SubscriptionListPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const SubscriptionListPaymentTerms$outboundSchema: z.ZodType<
  SubscriptionListPaymentTerms$Outbound,
  z.ZodTypeDef,
  SubscriptionListPaymentTerms
> = z.object({
  interval: z.nullable(SubscriptionListInterval$outboundSchema).optional(),
  frequency: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListPaymentTerms$ {
  /** @deprecated use `SubscriptionListPaymentTerms$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListPaymentTerms$inboundSchema;
  /** @deprecated use `SubscriptionListPaymentTerms$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListPaymentTerms$outboundSchema;
  /** @deprecated use `SubscriptionListPaymentTerms$Outbound` instead. */
  export type Outbound = SubscriptionListPaymentTerms$Outbound;
}

export function subscriptionListPaymentTermsToJSON(
  subscriptionListPaymentTerms: SubscriptionListPaymentTerms,
): string {
  return JSON.stringify(
    SubscriptionListPaymentTerms$outboundSchema.parse(
      subscriptionListPaymentTerms,
    ),
  );
}

export function subscriptionListPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListPaymentTerms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListPaymentTerms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListPaymentTerms' from JSON`,
  );
}

/** @internal */
export const SubscriptionListBillingDetails$inboundSchema: z.ZodType<
  SubscriptionListBillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_terms: z.lazy(() => SubscriptionListPaymentTerms$inboundSchema),
  enable_checkout: z.nullable(z.boolean()).optional(),
  additional_information: z.nullable(z.string()).optional(),
  purchase_order_number: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_terms": "paymentTerms",
    "enable_checkout": "enableCheckout",
    "additional_information": "additionalInformation",
    "purchase_order_number": "purchaseOrderNumber",
  });
});

/** @internal */
export type SubscriptionListBillingDetails$Outbound = {
  payment_terms: SubscriptionListPaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const SubscriptionListBillingDetails$outboundSchema: z.ZodType<
  SubscriptionListBillingDetails$Outbound,
  z.ZodTypeDef,
  SubscriptionListBillingDetails
> = z.object({
  paymentTerms: z.lazy(() => SubscriptionListPaymentTerms$outboundSchema),
  enableCheckout: z.nullable(z.boolean()).optional(),
  additionalInformation: z.nullable(z.string()).optional(),
  purchaseOrderNumber: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentTerms: "payment_terms",
    enableCheckout: "enable_checkout",
    additionalInformation: "additional_information",
    purchaseOrderNumber: "purchase_order_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListBillingDetails$ {
  /** @deprecated use `SubscriptionListBillingDetails$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListBillingDetails$inboundSchema;
  /** @deprecated use `SubscriptionListBillingDetails$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListBillingDetails$outboundSchema;
  /** @deprecated use `SubscriptionListBillingDetails$Outbound` instead. */
  export type Outbound = SubscriptionListBillingDetails$Outbound;
}

export function subscriptionListBillingDetailsToJSON(
  subscriptionListBillingDetails: SubscriptionListBillingDetails,
): string {
  return JSON.stringify(
    SubscriptionListBillingDetails$outboundSchema.parse(
      subscriptionListBillingDetails,
    ),
  );
}

export function subscriptionListBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListBillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListBillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListBillingDetails' from JSON`,
  );
}

/** @internal */
export const SubscriptionListCurrentBillingPeriod$inboundSchema: z.ZodType<
  SubscriptionListCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.nullable(z.string()),
  ends_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type SubscriptionListCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const SubscriptionListCurrentBillingPeriod$outboundSchema: z.ZodType<
  SubscriptionListCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  SubscriptionListCurrentBillingPeriod
> = z.object({
  startsAt: z.nullable(z.string()),
  endsAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListCurrentBillingPeriod$ {
  /** @deprecated use `SubscriptionListCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionListCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `SubscriptionListCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `SubscriptionListCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = SubscriptionListCurrentBillingPeriod$Outbound;
}

export function subscriptionListCurrentBillingPeriodToJSON(
  subscriptionListCurrentBillingPeriod: SubscriptionListCurrentBillingPeriod,
): string {
  return JSON.stringify(
    SubscriptionListCurrentBillingPeriod$outboundSchema.parse(
      subscriptionListCurrentBillingPeriod,
    ),
  );
}

export function subscriptionListCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionListCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionListBillingCycle$inboundSchema: z.ZodType<
  SubscriptionListBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/** @internal */
export type SubscriptionListBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const SubscriptionListBillingCycle$outboundSchema: z.ZodType<
  SubscriptionListBillingCycle$Outbound,
  z.ZodTypeDef,
  SubscriptionListBillingCycle
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListBillingCycle$ {
  /** @deprecated use `SubscriptionListBillingCycle$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionListBillingCycle$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionListBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionListBillingCycle$Outbound;
}

export function subscriptionListBillingCycleToJSON(
  subscriptionListBillingCycle: SubscriptionListBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionListBillingCycle$outboundSchema.parse(
      subscriptionListBillingCycle,
    ),
  );
}

export function subscriptionListBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListBillingCycle' from JSON`,
  );
}

/** @internal */
export const Action$inboundSchema: z.ZodNativeEnum<typeof Action> = z
  .nativeEnum(Action);

/** @internal */
export const Action$outboundSchema: z.ZodNativeEnum<typeof Action> =
  Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
}

/** @internal */
export const SubscriptionListStatus$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListStatus
> = z.nativeEnum(SubscriptionListStatus);

/** @internal */
export const SubscriptionListStatus$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListStatus
> = SubscriptionListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListStatus$ {
  /** @deprecated use `SubscriptionListStatus$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListStatus$inboundSchema;
  /** @deprecated use `SubscriptionListStatus$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListStatus$outboundSchema;
}

/** @internal */
export const ScheduledChange$inboundSchema: z.ZodType<
  ScheduledChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  subscription_id: z.string(),
  action: Action$inboundSchema,
  effective_at: z.string(),
  resumes_at: z.nullable(z.string()).optional(),
  status: SubscriptionListStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "effective_at": "effectiveAt",
    "resumes_at": "resumesAt",
  });
});

/** @internal */
export type ScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const ScheduledChange$outboundSchema: z.ZodType<
  ScheduledChange$Outbound,
  z.ZodTypeDef,
  ScheduledChange
> = z.object({
  id: z.string(),
  subscriptionId: z.string(),
  action: Action$outboundSchema,
  effectiveAt: z.string(),
  resumesAt: z.nullable(z.string()).optional(),
  status: SubscriptionListStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    effectiveAt: "effective_at",
    resumesAt: "resumes_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledChange$ {
  /** @deprecated use `ScheduledChange$inboundSchema` instead. */
  export const inboundSchema = ScheduledChange$inboundSchema;
  /** @deprecated use `ScheduledChange$outboundSchema` instead. */
  export const outboundSchema = ScheduledChange$outboundSchema;
  /** @deprecated use `ScheduledChange$Outbound` instead. */
  export type Outbound = ScheduledChange$Outbound;
}

export function scheduledChangeToJSON(
  scheduledChange: ScheduledChange,
): string {
  return JSON.stringify(ScheduledChange$outboundSchema.parse(scheduledChange));
}

export function scheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledChange' from JSON`,
  );
}

/** @internal */
export const SubscriptionListSubscriptionStatus$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListSubscriptionStatus
> = z.nativeEnum(SubscriptionListSubscriptionStatus);

/** @internal */
export const SubscriptionListSubscriptionStatus$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListSubscriptionStatus
> = SubscriptionListSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionStatus$ {
  /** @deprecated use `SubscriptionListSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionListSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListSubscriptionType
> = z.nativeEnum(SubscriptionListSubscriptionType);

/** @internal */
export const SubscriptionListSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListSubscriptionType
> = SubscriptionListSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionType$ {
  /** @deprecated use `SubscriptionListSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionType$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionListSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionListSubscriptionInterval> = z.nativeEnum(
    SubscriptionListSubscriptionInterval,
  );

/** @internal */
export const SubscriptionListSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionListSubscriptionInterval> =
    SubscriptionListSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionInterval$ {
  /** @deprecated use `SubscriptionListSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionListSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionListSubscriptionBillingCycle$inboundSchema: z.ZodType<
  SubscriptionListSubscriptionBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: SubscriptionListSubscriptionInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type SubscriptionListSubscriptionBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionListSubscriptionBillingCycle$outboundSchema: z.ZodType<
  SubscriptionListSubscriptionBillingCycle$Outbound,
  z.ZodTypeDef,
  SubscriptionListSubscriptionBillingCycle
> = z.object({
  interval: SubscriptionListSubscriptionInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionListSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionListSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionListSubscriptionBillingCycle$Outbound;
}

export function subscriptionListSubscriptionBillingCycleToJSON(
  subscriptionListSubscriptionBillingCycle:
    SubscriptionListSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionListSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionListSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionListSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionListSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionListSubscriptionBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionListSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionListSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionListSubscriptionResponseInterval> = z
    .nativeEnum(SubscriptionListSubscriptionResponseInterval);

/** @internal */
export const SubscriptionListSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionListSubscriptionResponseInterval> =
    SubscriptionListSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionResponseInterval$ {
  /** @deprecated use `SubscriptionListSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionListSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const SubscriptionListTrialPeriod$inboundSchema: z.ZodType<
  SubscriptionListTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: SubscriptionListSubscriptionResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type SubscriptionListTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionListTrialPeriod$outboundSchema: z.ZodType<
  SubscriptionListTrialPeriod$Outbound,
  z.ZodTypeDef,
  SubscriptionListTrialPeriod
> = z.object({
  interval: SubscriptionListSubscriptionResponseInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListTrialPeriod$ {
  /** @deprecated use `SubscriptionListTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListTrialPeriod$inboundSchema;
  /** @deprecated use `SubscriptionListTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListTrialPeriod$outboundSchema;
  /** @deprecated use `SubscriptionListTrialPeriod$Outbound` instead. */
  export type Outbound = SubscriptionListTrialPeriod$Outbound;
}

export function subscriptionListTrialPeriodToJSON(
  subscriptionListTrialPeriod: SubscriptionListTrialPeriod,
): string {
  return JSON.stringify(
    SubscriptionListTrialPeriod$outboundSchema.parse(
      subscriptionListTrialPeriod,
    ),
  );
}

export function subscriptionListTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListTrialPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionListUnitPrice$inboundSchema: z.ZodType<
  SubscriptionListUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type SubscriptionListUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const SubscriptionListUnitPrice$outboundSchema: z.ZodType<
  SubscriptionListUnitPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionListUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListUnitPrice$ {
  /** @deprecated use `SubscriptionListUnitPrice$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListUnitPrice$inboundSchema;
  /** @deprecated use `SubscriptionListUnitPrice$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListUnitPrice$outboundSchema;
  /** @deprecated use `SubscriptionListUnitPrice$Outbound` instead. */
  export type Outbound = SubscriptionListUnitPrice$Outbound;
}

export function subscriptionListUnitPriceToJSON(
  subscriptionListUnitPrice: SubscriptionListUnitPrice,
): string {
  return JSON.stringify(
    SubscriptionListUnitPrice$outboundSchema.parse(subscriptionListUnitPrice),
  );
}

export function subscriptionListUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListUnitPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionListSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionListSubscriptionResponse200Status> = z
    .nativeEnum(SubscriptionListSubscriptionResponse200Status);

/** @internal */
export const SubscriptionListSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionListSubscriptionResponse200Status> =
    SubscriptionListSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionResponse200Status$ {
  /** @deprecated use `SubscriptionListSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionListSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const SubscriptionListSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    SubscriptionListSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionListSubscriptionResponseCustomData$Outbound = {};

/** @internal */
export const SubscriptionListSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    SubscriptionListSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionListSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionResponseCustomData$ {
  /** @deprecated use `SubscriptionListSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionListSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionListSubscriptionResponseCustomData$Outbound;
}

export function subscriptionListSubscriptionResponseCustomDataToJSON(
  subscriptionListSubscriptionResponseCustomData:
    SubscriptionListSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    SubscriptionListSubscriptionResponseCustomData$outboundSchema.parse(
      subscriptionListSubscriptionResponseCustomData,
    ),
  );
}

export function subscriptionListSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionListSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionListSubscriptionResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionListSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionListPrice$inboundSchema: z.ZodType<
  SubscriptionListPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionListSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    SubscriptionListSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() => SubscriptionListTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => SubscriptionListUnitPrice$inboundSchema),
  status: SubscriptionListSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    SubscriptionListSubscriptionResponseCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SubscriptionListPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: SubscriptionListSubscriptionBillingCycle$Outbound;
  trial_period: SubscriptionListTrialPeriod$Outbound;
  unit_price: SubscriptionListUnitPrice$Outbound;
  status: string;
  custom_data?:
    | SubscriptionListSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const SubscriptionListPrice$outboundSchema: z.ZodType<
  SubscriptionListPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionListPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionListSubscriptionType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    SubscriptionListSubscriptionBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() => SubscriptionListTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => SubscriptionListUnitPrice$outboundSchema),
  status: SubscriptionListSubscriptionResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    SubscriptionListSubscriptionResponseCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListPrice$ {
  /** @deprecated use `SubscriptionListPrice$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListPrice$inboundSchema;
  /** @deprecated use `SubscriptionListPrice$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListPrice$outboundSchema;
  /** @deprecated use `SubscriptionListPrice$Outbound` instead. */
  export type Outbound = SubscriptionListPrice$Outbound;
}

export function subscriptionListPriceToJSON(
  subscriptionListPrice: SubscriptionListPrice,
): string {
  return JSON.stringify(
    SubscriptionListPrice$outboundSchema.parse(subscriptionListPrice),
  );
}

export function subscriptionListPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionListItems$inboundSchema: z.ZodType<
  SubscriptionListItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: SubscriptionListSubscriptionStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.lazy(() => SubscriptionListPrice$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type SubscriptionListItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: SubscriptionListPrice$Outbound;
};

/** @internal */
export const SubscriptionListItems$outboundSchema: z.ZodType<
  SubscriptionListItems$Outbound,
  z.ZodTypeDef,
  SubscriptionListItems
> = z.object({
  status: SubscriptionListSubscriptionStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.lazy(() => SubscriptionListPrice$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListItems$ {
  /** @deprecated use `SubscriptionListItems$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListItems$inboundSchema;
  /** @deprecated use `SubscriptionListItems$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListItems$outboundSchema;
  /** @deprecated use `SubscriptionListItems$Outbound` instead. */
  export type Outbound = SubscriptionListItems$Outbound;
}

export function subscriptionListItemsToJSON(
  subscriptionListItems: SubscriptionListItems,
): string {
  return JSON.stringify(
    SubscriptionListItems$outboundSchema.parse(subscriptionListItems),
  );
}

export function subscriptionListItemsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListItems' from JSON`,
  );
}

/** @internal */
export const SubscriptionListCustomData$inboundSchema: z.ZodType<
  SubscriptionListCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubscriptionListCustomData$Outbound = {};

/** @internal */
export const SubscriptionListCustomData$outboundSchema: z.ZodType<
  SubscriptionListCustomData$Outbound,
  z.ZodTypeDef,
  SubscriptionListCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListCustomData$ {
  /** @deprecated use `SubscriptionListCustomData$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListCustomData$inboundSchema;
  /** @deprecated use `SubscriptionListCustomData$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListCustomData$outboundSchema;
  /** @deprecated use `SubscriptionListCustomData$Outbound` instead. */
  export type Outbound = SubscriptionListCustomData$Outbound;
}

export function subscriptionListCustomDataToJSON(
  subscriptionListCustomData: SubscriptionListCustomData,
): string {
  return JSON.stringify(
    SubscriptionListCustomData$outboundSchema.parse(subscriptionListCustomData),
  );
}

export function subscriptionListCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionListManagementUrls$inboundSchema: z.ZodType<
  SubscriptionListManagementUrls,
  z.ZodTypeDef,
  unknown
> = z.object({
  update_payment_method: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "update_payment_method": "updatePaymentMethod",
  });
});

/** @internal */
export type SubscriptionListManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const SubscriptionListManagementUrls$outboundSchema: z.ZodType<
  SubscriptionListManagementUrls$Outbound,
  z.ZodTypeDef,
  SubscriptionListManagementUrls
> = z.object({
  updatePaymentMethod: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    updatePaymentMethod: "update_payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListManagementUrls$ {
  /** @deprecated use `SubscriptionListManagementUrls$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListManagementUrls$inboundSchema;
  /** @deprecated use `SubscriptionListManagementUrls$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListManagementUrls$outboundSchema;
  /** @deprecated use `SubscriptionListManagementUrls$Outbound` instead. */
  export type Outbound = SubscriptionListManagementUrls$Outbound;
}

export function subscriptionListManagementUrlsToJSON(
  subscriptionListManagementUrls: SubscriptionListManagementUrls,
): string {
  return JSON.stringify(
    SubscriptionListManagementUrls$outboundSchema.parse(
      subscriptionListManagementUrls,
    ),
  );
}

export function subscriptionListManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListManagementUrls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListManagementUrls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListManagementUrls' from JSON`,
  );
}

/** @internal */
export const SubscriptionListSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionListSubscriptionResponseStatus> = z
    .nativeEnum(SubscriptionListSubscriptionResponseStatus);

/** @internal */
export const SubscriptionListSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionListSubscriptionResponseStatus> =
    SubscriptionListSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionResponseStatus$ {
  /** @deprecated use `SubscriptionListSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionListSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const SubscriptionListType$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListType
> = z.nativeEnum(SubscriptionListType);

/** @internal */
export const SubscriptionListType$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionListType
> = SubscriptionListType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListType$ {
  /** @deprecated use `SubscriptionListType$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListType$inboundSchema;
  /** @deprecated use `SubscriptionListType$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListType$outboundSchema;
}

/** @internal */
export const SubscriptionListSubscriptionCustomData$inboundSchema: z.ZodType<
  SubscriptionListSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubscriptionListSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionListSubscriptionCustomData$outboundSchema: z.ZodType<
  SubscriptionListSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  SubscriptionListSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionListSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionListSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionListSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionListSubscriptionCustomData$Outbound` instead. */
  export type Outbound = SubscriptionListSubscriptionCustomData$Outbound;
}

export function subscriptionListSubscriptionCustomDataToJSON(
  subscriptionListSubscriptionCustomData:
    SubscriptionListSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionListSubscriptionCustomData$outboundSchema.parse(
      subscriptionListSubscriptionCustomData,
    ),
  );
}

export function subscriptionListSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListSubscriptionCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionListSubscriptionCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionListDiscount$inboundSchema: z.ZodType<
  SubscriptionListDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(SubscriptionListSubscriptionResponseStatus$inboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: SubscriptionListType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    SubscriptionListSubscriptionCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type SubscriptionListDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data: SubscriptionListSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const SubscriptionListDiscount$outboundSchema: z.ZodType<
  SubscriptionListDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionListDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(SubscriptionListSubscriptionResponseStatus$outboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: SubscriptionListType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    SubscriptionListSubscriptionCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListDiscount$ {
  /** @deprecated use `SubscriptionListDiscount$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListDiscount$inboundSchema;
  /** @deprecated use `SubscriptionListDiscount$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListDiscount$outboundSchema;
  /** @deprecated use `SubscriptionListDiscount$Outbound` instead. */
  export type Outbound = SubscriptionListDiscount$Outbound;
}

export function subscriptionListDiscountToJSON(
  subscriptionListDiscount: SubscriptionListDiscount,
): string {
  return JSON.stringify(
    SubscriptionListDiscount$outboundSchema.parse(subscriptionListDiscount),
  );
}

export function subscriptionListDiscountFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListDiscount' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    status: z.string(),
    customer_id: z.string(),
    address_id: z.string(),
    currency_code: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    started_at: z.nullable(z.string()),
    first_billed_at: z.nullable(z.string()),
    next_billed_at: z.nullable(z.string()),
    paused_at: z.nullable(z.string()),
    canceled_at: z.nullable(z.string()),
    collection_mode: z.string(),
    billing_details: z.lazy(() => SubscriptionListBillingDetails$inboundSchema),
    current_billing_period: z.lazy(() =>
      SubscriptionListCurrentBillingPeriod$inboundSchema
    ),
    billing_cycle: z.lazy(() => SubscriptionListBillingCycle$inboundSchema),
    scheduled_change: z.array(z.lazy(() => ScheduledChange$inboundSchema)),
    items: z.array(z.lazy(() => SubscriptionListItems$inboundSchema)),
    custom_data: z.lazy(() => SubscriptionListCustomData$inboundSchema)
      .optional(),
    management_urls: z.lazy(() => SubscriptionListManagementUrls$inboundSchema),
    discount: z.nullable(z.lazy(() => SubscriptionListDiscount$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "customer_id": "customerId",
      "address_id": "addressId",
      "currency_code": "currencyCode",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "started_at": "startedAt",
      "first_billed_at": "firstBilledAt",
      "next_billed_at": "nextBilledAt",
      "paused_at": "pausedAt",
      "canceled_at": "canceledAt",
      "collection_mode": "collectionMode",
      "billing_details": "billingDetails",
      "current_billing_period": "currentBillingPeriod",
      "billing_cycle": "billingCycle",
      "scheduled_change": "scheduledChange",
      "custom_data": "customData",
      "management_urls": "managementUrls",
    });
  });

/** @internal */
export type Data$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: SubscriptionListBillingDetails$Outbound;
  current_billing_period: SubscriptionListCurrentBillingPeriod$Outbound;
  billing_cycle: SubscriptionListBillingCycle$Outbound;
  scheduled_change: Array<ScheduledChange$Outbound>;
  items: Array<SubscriptionListItems$Outbound>;
  custom_data?: SubscriptionListCustomData$Outbound | undefined;
  management_urls: SubscriptionListManagementUrls$Outbound;
  discount?: SubscriptionListDiscount$Outbound | null | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    status: z.string(),
    customerId: z.string(),
    addressId: z.string(),
    currencyCode: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    startedAt: z.nullable(z.string()),
    firstBilledAt: z.nullable(z.string()),
    nextBilledAt: z.nullable(z.string()),
    pausedAt: z.nullable(z.string()),
    canceledAt: z.nullable(z.string()),
    collectionMode: z.string(),
    billingDetails: z.lazy(() => SubscriptionListBillingDetails$outboundSchema),
    currentBillingPeriod: z.lazy(() =>
      SubscriptionListCurrentBillingPeriod$outboundSchema
    ),
    billingCycle: z.lazy(() => SubscriptionListBillingCycle$outboundSchema),
    scheduledChange: z.array(z.lazy(() => ScheduledChange$outboundSchema)),
    items: z.array(z.lazy(() => SubscriptionListItems$outboundSchema)),
    customData: z.lazy(() => SubscriptionListCustomData$outboundSchema)
      .optional(),
    managementUrls: z.lazy(() => SubscriptionListManagementUrls$outboundSchema),
    discount: z.nullable(z.lazy(() => SubscriptionListDiscount$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      customerId: "customer_id",
      addressId: "address_id",
      currencyCode: "currency_code",
      createdAt: "created_at",
      updatedAt: "updated_at",
      startedAt: "started_at",
      firstBilledAt: "first_billed_at",
      nextBilledAt: "next_billed_at",
      pausedAt: "paused_at",
      canceledAt: "canceled_at",
      collectionMode: "collection_mode",
      billingDetails: "billing_details",
      currentBillingPeriod: "current_billing_period",
      billingCycle: "billing_cycle",
      scheduledChange: "scheduled_change",
      customData: "custom_data",
      managementUrls: "management_urls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const SubscriptionListResponseBody$inboundSchema: z.ZodType<
  SubscriptionListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type SubscriptionListResponseBody$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const SubscriptionListResponseBody$outboundSchema: z.ZodType<
  SubscriptionListResponseBody$Outbound,
  z.ZodTypeDef,
  SubscriptionListResponseBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionListResponseBody$ {
  /** @deprecated use `SubscriptionListResponseBody$inboundSchema` instead. */
  export const inboundSchema = SubscriptionListResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionListResponseBody$outboundSchema` instead. */
  export const outboundSchema = SubscriptionListResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionListResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionListResponseBody$Outbound;
}

export function subscriptionListResponseBodyToJSON(
  subscriptionListResponseBody: SubscriptionListResponseBody,
): string {
  return JSON.stringify(
    SubscriptionListResponseBody$outboundSchema.parse(
      subscriptionListResponseBody,
    ),
  );
}

export function subscriptionListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionListResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionListResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionListResponseBody' from JSON`,
  );
}
