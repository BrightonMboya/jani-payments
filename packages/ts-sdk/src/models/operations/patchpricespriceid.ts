/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PatchPricesPriceIdType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PatchPricesPriceIdType = ClosedEnum<typeof PatchPricesPriceIdType>;

export const PatchPricesPriceIdInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchPricesPriceIdInterval = ClosedEnum<
  typeof PatchPricesPriceIdInterval
>;

export type PatchPricesPriceIdBillingCycle = {
  interval: PatchPricesPriceIdInterval;
  frequency: number;
};

export const PatchPricesPriceIdPricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchPricesPriceIdPricesInterval = ClosedEnum<
  typeof PatchPricesPriceIdPricesInterval
>;

export type PatchPricesPriceIdTrialPeriod = {
  interval: PatchPricesPriceIdPricesInterval;
  frequency: number;
};

export type PatchPricesPriceIdUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PatchPricesPriceIdStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchPricesPriceIdStatus = ClosedEnum<
  typeof PatchPricesPriceIdStatus
>;

/**
 * Any valid JSON value
 */
export type PatchPricesPriceIdCustomData = {};

export type PatchPricesPriceIdRequestBody = {
  productId?: string | undefined;
  description?: string | null | undefined;
  type?: PatchPricesPriceIdType | undefined;
  name?: string | undefined;
  billingCycle?: PatchPricesPriceIdBillingCycle | undefined;
  trialPeriod?: PatchPricesPriceIdTrialPeriod | undefined;
  unitPrice?: PatchPricesPriceIdUnitPrice | undefined;
  status?: PatchPricesPriceIdStatus | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PatchPricesPriceIdCustomData | undefined;
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

export type PatchPricesPriceIdRequest = {
  priceId: string;
  requestBody?: PatchPricesPriceIdRequestBody | undefined;
};

export const PatchPricesPriceIdPricesType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PatchPricesPriceIdPricesType = ClosedEnum<
  typeof PatchPricesPriceIdPricesType
>;

export const PatchPricesPriceIdPricesResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchPricesPriceIdPricesResponseInterval = ClosedEnum<
  typeof PatchPricesPriceIdPricesResponseInterval
>;

export type PatchPricesPriceIdPricesBillingCycle = {
  interval: PatchPricesPriceIdPricesResponseInterval;
  frequency: number;
};

export const PatchPricesPriceIdPricesResponse200Interval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchPricesPriceIdPricesResponse200Interval = ClosedEnum<
  typeof PatchPricesPriceIdPricesResponse200Interval
>;

export type PatchPricesPriceIdPricesTrialPeriod = {
  interval: PatchPricesPriceIdPricesResponse200Interval;
  frequency: number;
};

export type PatchPricesPriceIdPricesUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PatchPricesPriceIdPricesStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchPricesPriceIdPricesStatus = ClosedEnum<
  typeof PatchPricesPriceIdPricesStatus
>;

/**
 * Any valid JSON value
 */
export type PatchPricesPriceIdPricesCustomData = {};

/**
 * Returns the updated Price
 */
export type PatchPricesPriceIdResponseBody = {
  productId: string;
  description?: string | null | undefined;
  type: PatchPricesPriceIdPricesType;
  name: string;
  billingCycle: PatchPricesPriceIdPricesBillingCycle;
  trialPeriod: PatchPricesPriceIdPricesTrialPeriod;
  unitPrice: PatchPricesPriceIdPricesUnitPrice;
  status: PatchPricesPriceIdPricesStatus;
  /**
   * Any valid JSON value
   */
  customData?: PatchPricesPriceIdPricesCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const PatchPricesPriceIdType$inboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdType
> = z.nativeEnum(PatchPricesPriceIdType);

/** @internal */
export const PatchPricesPriceIdType$outboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdType
> = PatchPricesPriceIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdType$ {
  /** @deprecated use `PatchPricesPriceIdType$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdType$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdType$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdType$outboundSchema;
}

/** @internal */
export const PatchPricesPriceIdInterval$inboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdInterval
> = z.nativeEnum(PatchPricesPriceIdInterval);

/** @internal */
export const PatchPricesPriceIdInterval$outboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdInterval
> = PatchPricesPriceIdInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdInterval$ {
  /** @deprecated use `PatchPricesPriceIdInterval$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdInterval$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdInterval$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdInterval$outboundSchema;
}

/** @internal */
export const PatchPricesPriceIdBillingCycle$inboundSchema: z.ZodType<
  PatchPricesPriceIdBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PatchPricesPriceIdInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PatchPricesPriceIdBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PatchPricesPriceIdBillingCycle$outboundSchema: z.ZodType<
  PatchPricesPriceIdBillingCycle$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdBillingCycle
> = z.object({
  interval: PatchPricesPriceIdInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdBillingCycle$ {
  /** @deprecated use `PatchPricesPriceIdBillingCycle$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdBillingCycle$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdBillingCycle$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdBillingCycle$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdBillingCycle$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdBillingCycle$Outbound;
}

export function patchPricesPriceIdBillingCycleToJSON(
  patchPricesPriceIdBillingCycle: PatchPricesPriceIdBillingCycle,
): string {
  return JSON.stringify(
    PatchPricesPriceIdBillingCycle$outboundSchema.parse(
      patchPricesPriceIdBillingCycle,
    ),
  );
}

export function patchPricesPriceIdBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPricesPriceIdBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdBillingCycle' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdPricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdPricesInterval
> = z.nativeEnum(PatchPricesPriceIdPricesInterval);

/** @internal */
export const PatchPricesPriceIdPricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdPricesInterval
> = PatchPricesPriceIdPricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesInterval$ {
  /** @deprecated use `PatchPricesPriceIdPricesInterval$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdPricesInterval$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesInterval$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdPricesInterval$outboundSchema;
}

/** @internal */
export const PatchPricesPriceIdTrialPeriod$inboundSchema: z.ZodType<
  PatchPricesPriceIdTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PatchPricesPriceIdPricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PatchPricesPriceIdTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PatchPricesPriceIdTrialPeriod$outboundSchema: z.ZodType<
  PatchPricesPriceIdTrialPeriod$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdTrialPeriod
> = z.object({
  interval: PatchPricesPriceIdPricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdTrialPeriod$ {
  /** @deprecated use `PatchPricesPriceIdTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdTrialPeriod$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdTrialPeriod$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdTrialPeriod$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdTrialPeriod$Outbound;
}

export function patchPricesPriceIdTrialPeriodToJSON(
  patchPricesPriceIdTrialPeriod: PatchPricesPriceIdTrialPeriod,
): string {
  return JSON.stringify(
    PatchPricesPriceIdTrialPeriod$outboundSchema.parse(
      patchPricesPriceIdTrialPeriod,
    ),
  );
}

export function patchPricesPriceIdTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPricesPriceIdTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdUnitPrice$inboundSchema: z.ZodType<
  PatchPricesPriceIdUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PatchPricesPriceIdUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PatchPricesPriceIdUnitPrice$outboundSchema: z.ZodType<
  PatchPricesPriceIdUnitPrice$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdUnitPrice$ {
  /** @deprecated use `PatchPricesPriceIdUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdUnitPrice$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdUnitPrice$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdUnitPrice$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdUnitPrice$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdUnitPrice$Outbound;
}

export function patchPricesPriceIdUnitPriceToJSON(
  patchPricesPriceIdUnitPrice: PatchPricesPriceIdUnitPrice,
): string {
  return JSON.stringify(
    PatchPricesPriceIdUnitPrice$outboundSchema.parse(
      patchPricesPriceIdUnitPrice,
    ),
  );
}

export function patchPricesPriceIdUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPricesPriceIdUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdUnitPrice' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdStatus
> = z.nativeEnum(PatchPricesPriceIdStatus);

/** @internal */
export const PatchPricesPriceIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdStatus
> = PatchPricesPriceIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdStatus$ {
  /** @deprecated use `PatchPricesPriceIdStatus$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdStatus$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdStatus$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdStatus$outboundSchema;
}

/** @internal */
export const PatchPricesPriceIdCustomData$inboundSchema: z.ZodType<
  PatchPricesPriceIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PatchPricesPriceIdCustomData$Outbound = {};

/** @internal */
export const PatchPricesPriceIdCustomData$outboundSchema: z.ZodType<
  PatchPricesPriceIdCustomData$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdCustomData$ {
  /** @deprecated use `PatchPricesPriceIdCustomData$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdCustomData$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdCustomData$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdCustomData$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdCustomData$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdCustomData$Outbound;
}

export function patchPricesPriceIdCustomDataToJSON(
  patchPricesPriceIdCustomData: PatchPricesPriceIdCustomData,
): string {
  return JSON.stringify(
    PatchPricesPriceIdCustomData$outboundSchema.parse(
      patchPricesPriceIdCustomData,
    ),
  );
}

export function patchPricesPriceIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPricesPriceIdCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdCustomData' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdRequestBody$inboundSchema: z.ZodType<
  PatchPricesPriceIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  type: PatchPricesPriceIdType$inboundSchema.optional(),
  name: z.string().optional(),
  billing_cycle: z.lazy(() => PatchPricesPriceIdBillingCycle$inboundSchema)
    .optional(),
  trial_period: z.lazy(() => PatchPricesPriceIdTrialPeriod$inboundSchema)
    .optional(),
  unit_price: z.lazy(() => PatchPricesPriceIdUnitPrice$inboundSchema)
    .optional(),
  status: PatchPricesPriceIdStatus$inboundSchema.optional(),
  custom_data: z.lazy(() => PatchPricesPriceIdCustomData$inboundSchema)
    .optional(),
  id: z.string().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PatchPricesPriceIdRequestBody$Outbound = {
  product_id?: string | undefined;
  description?: string | null | undefined;
  type?: string | undefined;
  name?: string | undefined;
  billing_cycle?: PatchPricesPriceIdBillingCycle$Outbound | undefined;
  trial_period?: PatchPricesPriceIdTrialPeriod$Outbound | undefined;
  unit_price?: PatchPricesPriceIdUnitPrice$Outbound | undefined;
  status?: string | undefined;
  custom_data?: PatchPricesPriceIdCustomData$Outbound | undefined;
  id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PatchPricesPriceIdRequestBody$outboundSchema: z.ZodType<
  PatchPricesPriceIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdRequestBody
> = z.object({
  productId: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  type: PatchPricesPriceIdType$outboundSchema.optional(),
  name: z.string().optional(),
  billingCycle: z.lazy(() => PatchPricesPriceIdBillingCycle$outboundSchema)
    .optional(),
  trialPeriod: z.lazy(() => PatchPricesPriceIdTrialPeriod$outboundSchema)
    .optional(),
  unitPrice: z.lazy(() => PatchPricesPriceIdUnitPrice$outboundSchema)
    .optional(),
  status: PatchPricesPriceIdStatus$outboundSchema.optional(),
  customData: z.lazy(() => PatchPricesPriceIdCustomData$outboundSchema)
    .optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdRequestBody$ {
  /** @deprecated use `PatchPricesPriceIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdRequestBody$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdRequestBody$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdRequestBody$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdRequestBody$Outbound;
}

export function patchPricesPriceIdRequestBodyToJSON(
  patchPricesPriceIdRequestBody: PatchPricesPriceIdRequestBody,
): string {
  return JSON.stringify(
    PatchPricesPriceIdRequestBody$outboundSchema.parse(
      patchPricesPriceIdRequestBody,
    ),
  );
}

export function patchPricesPriceIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPricesPriceIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdRequest$inboundSchema: z.ZodType<
  PatchPricesPriceIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_id: z.string(),
  RequestBody: z.lazy(() => PatchPricesPriceIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchPricesPriceIdRequest$Outbound = {
  price_id: string;
  RequestBody?: PatchPricesPriceIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchPricesPriceIdRequest$outboundSchema: z.ZodType<
  PatchPricesPriceIdRequest$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdRequest
> = z.object({
  priceId: z.string(),
  requestBody: z.lazy(() => PatchPricesPriceIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdRequest$ {
  /** @deprecated use `PatchPricesPriceIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdRequest$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdRequest$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdRequest$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdRequest$Outbound;
}

export function patchPricesPriceIdRequestToJSON(
  patchPricesPriceIdRequest: PatchPricesPriceIdRequest,
): string {
  return JSON.stringify(
    PatchPricesPriceIdRequest$outboundSchema.parse(patchPricesPriceIdRequest),
  );
}

export function patchPricesPriceIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPricesPriceIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdPricesType$inboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdPricesType
> = z.nativeEnum(PatchPricesPriceIdPricesType);

/** @internal */
export const PatchPricesPriceIdPricesType$outboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdPricesType
> = PatchPricesPriceIdPricesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesType$ {
  /** @deprecated use `PatchPricesPriceIdPricesType$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdPricesType$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesType$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdPricesType$outboundSchema;
}

/** @internal */
export const PatchPricesPriceIdPricesResponseInterval$inboundSchema:
  z.ZodNativeEnum<typeof PatchPricesPriceIdPricesResponseInterval> = z
    .nativeEnum(PatchPricesPriceIdPricesResponseInterval);

/** @internal */
export const PatchPricesPriceIdPricesResponseInterval$outboundSchema:
  z.ZodNativeEnum<typeof PatchPricesPriceIdPricesResponseInterval> =
    PatchPricesPriceIdPricesResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesResponseInterval$ {
  /** @deprecated use `PatchPricesPriceIdPricesResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    PatchPricesPriceIdPricesResponseInterval$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PatchPricesPriceIdPricesResponseInterval$outboundSchema;
}

/** @internal */
export const PatchPricesPriceIdPricesBillingCycle$inboundSchema: z.ZodType<
  PatchPricesPriceIdPricesBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PatchPricesPriceIdPricesResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PatchPricesPriceIdPricesBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PatchPricesPriceIdPricesBillingCycle$outboundSchema: z.ZodType<
  PatchPricesPriceIdPricesBillingCycle$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdPricesBillingCycle
> = z.object({
  interval: PatchPricesPriceIdPricesResponseInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesBillingCycle$ {
  /** @deprecated use `PatchPricesPriceIdPricesBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PatchPricesPriceIdPricesBillingCycle$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PatchPricesPriceIdPricesBillingCycle$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesBillingCycle$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdPricesBillingCycle$Outbound;
}

export function patchPricesPriceIdPricesBillingCycleToJSON(
  patchPricesPriceIdPricesBillingCycle: PatchPricesPriceIdPricesBillingCycle,
): string {
  return JSON.stringify(
    PatchPricesPriceIdPricesBillingCycle$outboundSchema.parse(
      patchPricesPriceIdPricesBillingCycle,
    ),
  );
}

export function patchPricesPriceIdPricesBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdPricesBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchPricesPriceIdPricesBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdPricesBillingCycle' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdPricesResponse200Interval$inboundSchema:
  z.ZodNativeEnum<typeof PatchPricesPriceIdPricesResponse200Interval> = z
    .nativeEnum(PatchPricesPriceIdPricesResponse200Interval);

/** @internal */
export const PatchPricesPriceIdPricesResponse200Interval$outboundSchema:
  z.ZodNativeEnum<typeof PatchPricesPriceIdPricesResponse200Interval> =
    PatchPricesPriceIdPricesResponse200Interval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesResponse200Interval$ {
  /** @deprecated use `PatchPricesPriceIdPricesResponse200Interval$inboundSchema` instead. */
  export const inboundSchema =
    PatchPricesPriceIdPricesResponse200Interval$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesResponse200Interval$outboundSchema` instead. */
  export const outboundSchema =
    PatchPricesPriceIdPricesResponse200Interval$outboundSchema;
}

/** @internal */
export const PatchPricesPriceIdPricesTrialPeriod$inboundSchema: z.ZodType<
  PatchPricesPriceIdPricesTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PatchPricesPriceIdPricesResponse200Interval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PatchPricesPriceIdPricesTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PatchPricesPriceIdPricesTrialPeriod$outboundSchema: z.ZodType<
  PatchPricesPriceIdPricesTrialPeriod$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdPricesTrialPeriod
> = z.object({
  interval: PatchPricesPriceIdPricesResponse200Interval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesTrialPeriod$ {
  /** @deprecated use `PatchPricesPriceIdPricesTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PatchPricesPriceIdPricesTrialPeriod$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PatchPricesPriceIdPricesTrialPeriod$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesTrialPeriod$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdPricesTrialPeriod$Outbound;
}

export function patchPricesPriceIdPricesTrialPeriodToJSON(
  patchPricesPriceIdPricesTrialPeriod: PatchPricesPriceIdPricesTrialPeriod,
): string {
  return JSON.stringify(
    PatchPricesPriceIdPricesTrialPeriod$outboundSchema.parse(
      patchPricesPriceIdPricesTrialPeriod,
    ),
  );
}

export function patchPricesPriceIdPricesTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdPricesTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchPricesPriceIdPricesTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdPricesTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdPricesUnitPrice$inboundSchema: z.ZodType<
  PatchPricesPriceIdPricesUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PatchPricesPriceIdPricesUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PatchPricesPriceIdPricesUnitPrice$outboundSchema: z.ZodType<
  PatchPricesPriceIdPricesUnitPrice$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdPricesUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesUnitPrice$ {
  /** @deprecated use `PatchPricesPriceIdPricesUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdPricesUnitPrice$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    PatchPricesPriceIdPricesUnitPrice$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesUnitPrice$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdPricesUnitPrice$Outbound;
}

export function patchPricesPriceIdPricesUnitPriceToJSON(
  patchPricesPriceIdPricesUnitPrice: PatchPricesPriceIdPricesUnitPrice,
): string {
  return JSON.stringify(
    PatchPricesPriceIdPricesUnitPrice$outboundSchema.parse(
      patchPricesPriceIdPricesUnitPrice,
    ),
  );
}

export function patchPricesPriceIdPricesUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdPricesUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPricesPriceIdPricesUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdPricesUnitPrice' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdPricesStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdPricesStatus
> = z.nativeEnum(PatchPricesPriceIdPricesStatus);

/** @internal */
export const PatchPricesPriceIdPricesStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchPricesPriceIdPricesStatus
> = PatchPricesPriceIdPricesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesStatus$ {
  /** @deprecated use `PatchPricesPriceIdPricesStatus$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdPricesStatus$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesStatus$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdPricesStatus$outboundSchema;
}

/** @internal */
export const PatchPricesPriceIdPricesCustomData$inboundSchema: z.ZodType<
  PatchPricesPriceIdPricesCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PatchPricesPriceIdPricesCustomData$Outbound = {};

/** @internal */
export const PatchPricesPriceIdPricesCustomData$outboundSchema: z.ZodType<
  PatchPricesPriceIdPricesCustomData$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdPricesCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdPricesCustomData$ {
  /** @deprecated use `PatchPricesPriceIdPricesCustomData$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdPricesCustomData$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchPricesPriceIdPricesCustomData$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdPricesCustomData$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdPricesCustomData$Outbound;
}

export function patchPricesPriceIdPricesCustomDataToJSON(
  patchPricesPriceIdPricesCustomData: PatchPricesPriceIdPricesCustomData,
): string {
  return JSON.stringify(
    PatchPricesPriceIdPricesCustomData$outboundSchema.parse(
      patchPricesPriceIdPricesCustomData,
    ),
  );
}

export function patchPricesPriceIdPricesCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdPricesCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchPricesPriceIdPricesCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdPricesCustomData' from JSON`,
  );
}

/** @internal */
export const PatchPricesPriceIdResponseBody$inboundSchema: z.ZodType<
  PatchPricesPriceIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PatchPricesPriceIdPricesType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    PatchPricesPriceIdPricesBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() => PatchPricesPriceIdPricesTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => PatchPricesPriceIdPricesUnitPrice$inboundSchema),
  status: PatchPricesPriceIdPricesStatus$inboundSchema,
  custom_data: z.lazy(() => PatchPricesPriceIdPricesCustomData$inboundSchema)
    .optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PatchPricesPriceIdResponseBody$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: PatchPricesPriceIdPricesBillingCycle$Outbound;
  trial_period: PatchPricesPriceIdPricesTrialPeriod$Outbound;
  unit_price: PatchPricesPriceIdPricesUnitPrice$Outbound;
  status: string;
  custom_data?: PatchPricesPriceIdPricesCustomData$Outbound | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PatchPricesPriceIdResponseBody$outboundSchema: z.ZodType<
  PatchPricesPriceIdResponseBody$Outbound,
  z.ZodTypeDef,
  PatchPricesPriceIdResponseBody
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PatchPricesPriceIdPricesType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    PatchPricesPriceIdPricesBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() => PatchPricesPriceIdPricesTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => PatchPricesPriceIdPricesUnitPrice$outboundSchema),
  status: PatchPricesPriceIdPricesStatus$outboundSchema,
  customData: z.lazy(() => PatchPricesPriceIdPricesCustomData$outboundSchema)
    .optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPricesPriceIdResponseBody$ {
  /** @deprecated use `PatchPricesPriceIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = PatchPricesPriceIdResponseBody$inboundSchema;
  /** @deprecated use `PatchPricesPriceIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = PatchPricesPriceIdResponseBody$outboundSchema;
  /** @deprecated use `PatchPricesPriceIdResponseBody$Outbound` instead. */
  export type Outbound = PatchPricesPriceIdResponseBody$Outbound;
}

export function patchPricesPriceIdResponseBodyToJSON(
  patchPricesPriceIdResponseBody: PatchPricesPriceIdResponseBody,
): string {
  return JSON.stringify(
    PatchPricesPriceIdResponseBody$outboundSchema.parse(
      patchPricesPriceIdResponseBody,
    ),
  );
}

export function patchPricesPriceIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchPricesPriceIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPricesPriceIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPricesPriceIdResponseBody' from JSON`,
  );
}
