/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const EffectiveFrom = {
  Immediately: "immediately",
  NextBillingPeriod: "next_billing_period",
} as const;
export type EffectiveFrom = ClosedEnum<typeof EffectiveFrom>;

export type PostSubscriptionSubscriptionIdCancelRequestBody = {
  effectiveFrom?: EffectiveFrom | undefined;
};

export type PostSubscriptionSubscriptionIdCancelRequest = {
  subscriptionId: string;
  requestBody?: PostSubscriptionSubscriptionIdCancelRequestBody | undefined;
};

export const PostSubscriptionSubscriptionIdCancelInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdCancelInterval = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdCancelInterval
>;

export type PostSubscriptionSubscriptionIdCancelPaymentTerms = {
  interval?: PostSubscriptionSubscriptionIdCancelInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type PostSubscriptionSubscriptionIdCancelBillingDetails = {
  paymentTerms: PostSubscriptionSubscriptionIdCancelPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type PostSubscriptionSubscriptionIdCancelBillingCycle = {
  frequency: number;
  interval: string;
};

export const PostSubscriptionSubscriptionIdCancelAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type PostSubscriptionSubscriptionIdCancelAction = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdCancelAction
>;

export const PostSubscriptionSubscriptionIdCancelStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type PostSubscriptionSubscriptionIdCancelStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdCancelStatus
>;

export type PostSubscriptionSubscriptionIdCancelScheduledChange = {
  id: string;
  subscriptionId: string;
  action: PostSubscriptionSubscriptionIdCancelAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: PostSubscriptionSubscriptionIdCancelStatus;
};

export const PostSubscriptionSubscriptionIdCancelSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type PostSubscriptionSubscriptionIdCancelSubscriptionStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdCancelSubscriptionStatus
>;

export const PostSubscriptionSubscriptionIdCancelSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PostSubscriptionSubscriptionIdCancelSubscriptionType = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdCancelSubscriptionType
>;

export const PostSubscriptionSubscriptionIdCancelSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdCancelSubscriptionInterval =
  ClosedEnum<typeof PostSubscriptionSubscriptionIdCancelSubscriptionInterval>;

export type PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle = {
  interval: PostSubscriptionSubscriptionIdCancelSubscriptionInterval;
  frequency: number;
};

export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval =
  {
    Day: "day",
    Week: "week",
    Month: "month",
    Year: "year",
  } as const;
export type PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval
  >;

export type PostSubscriptionSubscriptionIdCancelTrialPeriod = {
  interval: PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval;
  frequency: number;
};

export type PostSubscriptionSubscriptionIdCancelUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData =
  {};

export type PostSubscriptionSubscriptionIdCancelPrice = {
  productId: string;
  description?: string | null | undefined;
  type: PostSubscriptionSubscriptionIdCancelSubscriptionType;
  name: string;
  billingCycle: PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle;
  trialPeriod: PostSubscriptionSubscriptionIdCancelTrialPeriod;
  unitPrice: PostSubscriptionSubscriptionIdCancelUnitPrice;
  status: PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type PostSubscriptionSubscriptionIdCancelItems = {
  status: PostSubscriptionSubscriptionIdCancelSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: PostSubscriptionSubscriptionIdCancelPrice;
};

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdCancelCustomData = {};

export type PostSubscriptionSubscriptionIdCancelManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus
  >;

export const PostSubscriptionSubscriptionIdCancelType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PostSubscriptionSubscriptionIdCancelType = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdCancelType
>;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdCancelSubscriptionCustomData = {};

export type PostSubscriptionSubscriptionIdCancelDiscount = {
  id: string;
  status?:
    | PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PostSubscriptionSubscriptionIdCancelType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostSubscriptionSubscriptionIdCancelSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type PostSubscriptionSubscriptionIdCancelData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: PostSubscriptionSubscriptionIdCancelBillingDetails;
  currentBillingPeriod:
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod;
  billingCycle: PostSubscriptionSubscriptionIdCancelBillingCycle;
  scheduledChange: Array<PostSubscriptionSubscriptionIdCancelScheduledChange>;
  items: Array<PostSubscriptionSubscriptionIdCancelItems>;
  /**
   * Any valid JSON value
   */
  customData?: PostSubscriptionSubscriptionIdCancelCustomData | undefined;
  managementUrls: PostSubscriptionSubscriptionIdCancelManagementUrls;
  discount?: PostSubscriptionSubscriptionIdCancelDiscount | null | undefined;
};

/**
 * Cancels an active subscription given its id
 */
export type PostSubscriptionSubscriptionIdCancelResponseBody = {
  data: PostSubscriptionSubscriptionIdCancelData;
};

/** @internal */
export const EffectiveFrom$inboundSchema: z.ZodNativeEnum<
  typeof EffectiveFrom
> = z.nativeEnum(EffectiveFrom);

/** @internal */
export const EffectiveFrom$outboundSchema: z.ZodNativeEnum<
  typeof EffectiveFrom
> = EffectiveFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EffectiveFrom$ {
  /** @deprecated use `EffectiveFrom$inboundSchema` instead. */
  export const inboundSchema = EffectiveFrom$inboundSchema;
  /** @deprecated use `EffectiveFrom$outboundSchema` instead. */
  export const outboundSchema = EffectiveFrom$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelRequestBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    effective_from: EffectiveFrom$inboundSchema.default("next_billing_period"),
  }).transform((v) => {
    return remap$(v, {
      "effective_from": "effectiveFrom",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelRequestBody$Outbound = {
  effective_from: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelRequestBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelRequestBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelRequestBody
  > = z.object({
    effectiveFrom: EffectiveFrom$outboundSchema.default("next_billing_period"),
  }).transform((v) => {
    return remap$(v, {
      effectiveFrom: "effective_from",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelRequestBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelRequestBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelRequestBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelRequestBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelRequestBody$Outbound;
}

export function postSubscriptionSubscriptionIdCancelRequestBodyToJSON(
  postSubscriptionSubscriptionIdCancelRequestBody:
    PostSubscriptionSubscriptionIdCancelRequestBody,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelRequestBody$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelRequestBody,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelRequestBody' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelRequest$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscription_id: z.string(),
    RequestBody: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelRequest$Outbound = {
  subscription_id: string;
  RequestBody?:
    | PostSubscriptionSubscriptionIdCancelRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelRequest$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelRequest$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelRequest
  > = z.object({
    subscriptionId: z.string(),
    requestBody: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelRequest$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelRequest$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelRequest$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelRequest$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdCancelRequest$Outbound;
}

export function postSubscriptionSubscriptionIdCancelRequestToJSON(
  postSubscriptionSubscriptionIdCancelRequest:
    PostSubscriptionSubscriptionIdCancelRequest,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelRequest$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelRequest,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelRequest' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelInterval$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelInterval> = z
    .nativeEnum(PostSubscriptionSubscriptionIdCancelInterval);

/** @internal */
export const PostSubscriptionSubscriptionIdCancelInterval$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelInterval> =
    PostSubscriptionSubscriptionIdCancelInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelPaymentTerms$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelPaymentTerms,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: z.nullable(
      PostSubscriptionSubscriptionIdCancelInterval$inboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelPaymentTerms$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelPaymentTerms$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelPaymentTerms
  > = z.object({
    interval: z.nullable(
      PostSubscriptionSubscriptionIdCancelInterval$outboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelPaymentTerms$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelPaymentTerms$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelPaymentTerms$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelPaymentTerms$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelPaymentTerms$Outbound;
}

export function postSubscriptionSubscriptionIdCancelPaymentTermsToJSON(
  postSubscriptionSubscriptionIdCancelPaymentTerms:
    PostSubscriptionSubscriptionIdCancelPaymentTerms,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelPaymentTerms$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelPaymentTerms,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelPaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelPaymentTerms' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelBillingDetails$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelPaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelBillingDetails$Outbound = {
  payment_terms: PostSubscriptionSubscriptionIdCancelPaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelBillingDetails$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelBillingDetails$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelPaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelBillingDetails$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelBillingDetails$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelBillingDetails$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelBillingDetails$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelBillingDetails$Outbound;
}

export function postSubscriptionSubscriptionIdCancelBillingDetailsToJSON(
  postSubscriptionSubscriptionIdCancelBillingDetails:
    PostSubscriptionSubscriptionIdCancelBillingDetails,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelBillingDetails$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelBillingDetails,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelBillingDetails' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string()),
    ends_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$Outbound =
  {
    starts_at: string | null;
    ends_at: string | null;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.string()),
    endsAt: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$Outbound;
}

export function postSubscriptionSubscriptionIdCancelCurrentBillingPeriodToJSON(
  postSubscriptionSubscriptionIdCancelCurrentBillingPeriod:
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$outboundSchema
      .parse(postSubscriptionSubscriptionIdCancelCurrentBillingPeriod),
  );
}

export function postSubscriptionSubscriptionIdCancelCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelBillingCycle$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelBillingCycle$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelBillingCycle$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelBillingCycle$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionIdCancelBillingCycleToJSON(
  postSubscriptionSubscriptionIdCancelBillingCycle:
    PostSubscriptionSubscriptionIdCancelBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelBillingCycle$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelBillingCycle,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelAction$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelAction> = z
    .nativeEnum(PostSubscriptionSubscriptionIdCancelAction);

/** @internal */
export const PostSubscriptionSubscriptionIdCancelAction$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelAction> =
    PostSubscriptionSubscriptionIdCancelAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelAction$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelAction$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelAction$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelAction$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelAction$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelStatus> = z
    .nativeEnum(PostSubscriptionSubscriptionIdCancelStatus);

/** @internal */
export const PostSubscriptionSubscriptionIdCancelStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelStatus> =
    PostSubscriptionSubscriptionIdCancelStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelScheduledChange$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: PostSubscriptionSubscriptionIdCancelAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()).optional(),
    status: PostSubscriptionSubscriptionIdCancelStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelScheduledChange$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelScheduledChange$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: PostSubscriptionSubscriptionIdCancelAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()).optional(),
    status: PostSubscriptionSubscriptionIdCancelStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelScheduledChange$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelScheduledChange$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelScheduledChange$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelScheduledChange$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelScheduledChange$Outbound;
}

export function postSubscriptionSubscriptionIdCancelScheduledChangeToJSON(
  postSubscriptionSubscriptionIdCancelScheduledChange:
    PostSubscriptionSubscriptionIdCancelScheduledChange,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelScheduledChange$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelScheduledChange,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelScheduledChange' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionStatus
  > = z.nativeEnum(PostSubscriptionSubscriptionIdCancelSubscriptionStatus);

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionStatus
  > = PostSubscriptionSubscriptionIdCancelSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionType$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelSubscriptionType> =
    z.nativeEnum(PostSubscriptionSubscriptionIdCancelSubscriptionType);

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionType$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelSubscriptionType> =
    PostSubscriptionSubscriptionIdCancelSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionType$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionInterval
  > = z.nativeEnum(PostSubscriptionSubscriptionIdCancelSubscriptionInterval);

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionInterval
  > = PostSubscriptionSubscriptionIdCancelSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdCancelSubscriptionInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$Outbound =
  {
    interval: string;
    frequency: number;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdCancelSubscriptionInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionIdCancelSubscriptionBillingCycleToJSON(
  postSubscriptionSubscriptionIdCancelSubscriptionBillingCycle:
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$outboundSchema
      .parse(postSubscriptionSubscriptionIdCancelSubscriptionBillingCycle),
  );
}

export function postSubscriptionSubscriptionIdCancelSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval
  > =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelTrialPeriod$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelTrialPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelTrialPeriod$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelTrialPeriod$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelTrialPeriod
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdCancelSubscriptionResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelTrialPeriod$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelTrialPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelTrialPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelTrialPeriod$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelTrialPeriod$Outbound;
}

export function postSubscriptionSubscriptionIdCancelTrialPeriodToJSON(
  postSubscriptionSubscriptionIdCancelTrialPeriod:
    PostSubscriptionSubscriptionIdCancelTrialPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelTrialPeriod$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelTrialPeriod,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelUnitPrice$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelUnitPrice,
    z.ZodTypeDef,
    unknown
  > = z.object({
    amount: z.number(),
    currency_code: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "currency_code": "currencyCode",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelUnitPrice$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelUnitPrice$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelUnitPrice
  > = z.object({
    amount: z.number(),
    currencyCode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      currencyCode: "currency_code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelUnitPrice$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelUnitPrice$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelUnitPrice$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelUnitPrice$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdCancelUnitPrice$Outbound;
}

export function postSubscriptionSubscriptionIdCancelUnitPriceToJSON(
  postSubscriptionSubscriptionIdCancelUnitPrice:
    PostSubscriptionSubscriptionIdCancelUnitPrice,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelUnitPrice$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelUnitPrice,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelUnitPrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status
  > =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$Outbound =
  {};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdCancelSubscriptionResponseCustomDataToJSON(
  postSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData:
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$outboundSchema
      .parse(
        postSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData,
      ),
  );
}

export function postSubscriptionSubscriptionIdCancelSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelPrice$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdCancelPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostSubscriptionSubscriptionIdCancelSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelUnitPrice$inboundSchema
  ),
  status:
    PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdCancelPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$Outbound;
  trial_period: PostSubscriptionSubscriptionIdCancelTrialPeriod$Outbound;
  unit_price: PostSubscriptionSubscriptionIdCancelUnitPrice$Outbound;
  status: string;
  custom_data?:
    | PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelPrice$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelPrice$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelPrice
  > = z.object({
    productId: z.string(),
    description: z.nullable(z.string()).optional(),
    type: PostSubscriptionSubscriptionIdCancelSubscriptionType$outboundSchema,
    name: z.string(),
    billingCycle: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelSubscriptionBillingCycle$outboundSchema
    ),
    trialPeriod: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelTrialPeriod$outboundSchema
    ),
    unitPrice: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelUnitPrice$outboundSchema
    ),
    status:
      PostSubscriptionSubscriptionIdCancelSubscriptionResponse200Status$outboundSchema,
    customData: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelSubscriptionResponseCustomData$outboundSchema
    ).optional(),
    id: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
  }).transform((v) => {
    return remap$(v, {
      productId: "product_id",
      billingCycle: "billing_cycle",
      trialPeriod: "trial_period",
      unitPrice: "unit_price",
      customData: "custom_data",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelPrice$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelPrice$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelPrice$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelPrice$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelPrice$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelPrice$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdCancelPrice$Outbound;
}

export function postSubscriptionSubscriptionIdCancelPriceToJSON(
  postSubscriptionSubscriptionIdCancelPrice:
    PostSubscriptionSubscriptionIdCancelPrice,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelPrice$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelPrice,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelPrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelItems$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdCancelItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PostSubscriptionSubscriptionIdCancelSubscriptionStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.lazy(() => PostSubscriptionSubscriptionIdCancelPrice$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdCancelItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: PostSubscriptionSubscriptionIdCancelPrice$Outbound;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelItems$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelItems$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelItems
  > = z.object({
    status:
      PostSubscriptionSubscriptionIdCancelSubscriptionStatus$outboundSchema,
    priceId: z.string(),
    quantity: z.number().int(),
    id: z.string(),
    subscriptionId: z.string(),
    recurring: z.boolean(),
    createdAt: z.string(),
    updatedAt: z.string(),
    previouslyBilledAt: z.nullable(z.string()),
    nextBilledAt: z.nullable(z.string()),
    trialStartedAt: z.nullable(z.string()),
    trialEndedAt: z.nullable(z.string()),
    customData: z.nullable(z.any()).optional(),
    price: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelPrice$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      priceId: "price_id",
      subscriptionId: "subscription_id",
      createdAt: "created_at",
      updatedAt: "updated_at",
      previouslyBilledAt: "previously_billed_at",
      nextBilledAt: "next_billed_at",
      trialStartedAt: "trial_started_at",
      trialEndedAt: "trial_ended_at",
      customData: "custom_data",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelItems$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelItems$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelItems$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelItems$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelItems$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelItems$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdCancelItems$Outbound;
}

export function postSubscriptionSubscriptionIdCancelItemsToJSON(
  postSubscriptionSubscriptionIdCancelItems:
    PostSubscriptionSubscriptionIdCancelItems,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelItems$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelItems,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelItemsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelItems,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelItems$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelItems' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdCancelCustomData$Outbound = {};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdCancelCustomDataToJSON(
  postSubscriptionSubscriptionIdCancelCustomData:
    PostSubscriptionSubscriptionIdCancelCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelCustomData$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelCustomData,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelManagementUrls$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelManagementUrls$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelManagementUrls$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelManagementUrls$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelManagementUrls$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelManagementUrls$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelManagementUrls$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelManagementUrls$Outbound;
}

export function postSubscriptionSubscriptionIdCancelManagementUrlsToJSON(
  postSubscriptionSubscriptionIdCancelManagementUrls:
    PostSubscriptionSubscriptionIdCancelManagementUrls,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelManagementUrls$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelManagementUrls,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelManagementUrls' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus
  > =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelType$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelType> = z
    .nativeEnum(PostSubscriptionSubscriptionIdCancelType);

/** @internal */
export const PostSubscriptionSubscriptionIdCancelType$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdCancelType> =
    PostSubscriptionSubscriptionIdCancelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelType$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelType$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelType$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$Outbound =
  {};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdCancelSubscriptionCustomDataToJSON(
  postSubscriptionSubscriptionIdCancelSubscriptionCustomData:
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$outboundSchema
      .parse(postSubscriptionSubscriptionIdCancelSubscriptionCustomData),
  );
}

export function postSubscriptionSubscriptionIdCancelSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelDiscount$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelDiscount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    status: z.nullable(
      PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$inboundSchema,
    ).optional(),
    description: z.nullable(z.string()).optional(),
    enabled_for_checkout: z.nullable(z.boolean()).optional(),
    amount: z.number(),
    currency_code: z.string(),
    type: PostSubscriptionSubscriptionIdCancelType$inboundSchema,
    recur: z.nullable(z.boolean()).optional(),
    max_recurring_intervals: z.nullable(z.number()).optional(),
    usage_limit: z.nullable(z.number().int()).optional(),
    expires_at: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$inboundSchema
    ),
    times_used: z.nullable(z.number().int()).optional(),
    created_at: z.string(),
    updated_at: z.string(),
    restricted_to: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "enabled_for_checkout": "enabledForCheckout",
      "currency_code": "currencyCode",
      "max_recurring_intervals": "maxRecurringIntervals",
      "usage_limit": "usageLimit",
      "expires_at": "expiresAt",
      "custom_data": "customData",
      "times_used": "timesUsed",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "restricted_to": "restrictedTo",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelDiscount$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelDiscount$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelDiscount
  > = z.object({
    id: z.string(),
    status: z.nullable(
      PostSubscriptionSubscriptionIdCancelSubscriptionResponseStatus$outboundSchema,
    ).optional(),
    description: z.nullable(z.string()).optional(),
    enabledForCheckout: z.nullable(z.boolean()).optional(),
    amount: z.number(),
    currencyCode: z.string(),
    type: PostSubscriptionSubscriptionIdCancelType$outboundSchema,
    recur: z.nullable(z.boolean()).optional(),
    maxRecurringIntervals: z.nullable(z.number()).optional(),
    usageLimit: z.nullable(z.number().int()).optional(),
    expiresAt: z.nullable(z.string()).optional(),
    customData: z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelSubscriptionCustomData$outboundSchema
    ),
    timesUsed: z.nullable(z.number().int()).optional(),
    createdAt: z.string(),
    updatedAt: z.string(),
    restrictedTo: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      enabledForCheckout: "enabled_for_checkout",
      currencyCode: "currency_code",
      maxRecurringIntervals: "max_recurring_intervals",
      usageLimit: "usage_limit",
      expiresAt: "expires_at",
      customData: "custom_data",
      timesUsed: "times_used",
      createdAt: "created_at",
      updatedAt: "updated_at",
      restrictedTo: "restricted_to",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelDiscount$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelDiscount$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelDiscount$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelDiscount$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelDiscount$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelDiscount$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdCancelDiscount$Outbound;
}

export function postSubscriptionSubscriptionIdCancelDiscountToJSON(
  postSubscriptionSubscriptionIdCancelDiscount:
    PostSubscriptionSubscriptionIdCancelDiscount,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelDiscount$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelDiscount,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelDiscountFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelDiscount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelDiscount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelDiscount' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelData$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdCancelData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  started_at: z.nullable(z.string()),
  first_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  paused_at: z.nullable(z.string()),
  canceled_at: z.nullable(z.string()),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelScheduledChange$inboundSchema
    ),
  ),
  items: z.array(
    z.lazy(() => PostSubscriptionSubscriptionIdCancelItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => PostSubscriptionSubscriptionIdCancelDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdCancelData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: PostSubscriptionSubscriptionIdCancelBillingDetails$Outbound;
  current_billing_period:
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$Outbound;
  billing_cycle: PostSubscriptionSubscriptionIdCancelBillingCycle$Outbound;
  scheduled_change: Array<
    PostSubscriptionSubscriptionIdCancelScheduledChange$Outbound
  >;
  items: Array<PostSubscriptionSubscriptionIdCancelItems$Outbound>;
  custom_data?:
    | PostSubscriptionSubscriptionIdCancelCustomData$Outbound
    | undefined;
  management_urls: PostSubscriptionSubscriptionIdCancelManagementUrls$Outbound;
  discount?:
    | PostSubscriptionSubscriptionIdCancelDiscount$Outbound
    | null
    | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelData$outboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdCancelData$Outbound,
  z.ZodTypeDef,
  PostSubscriptionSubscriptionIdCancelData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startedAt: z.nullable(z.string()),
  firstBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  pausedAt: z.nullable(z.string()),
  canceledAt: z.nullable(z.string()),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.lazy(() =>
      PostSubscriptionSubscriptionIdCancelScheduledChange$outboundSchema
    ),
  ),
  items: z.array(
    z.lazy(() => PostSubscriptionSubscriptionIdCancelItems$outboundSchema),
  ),
  customData: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    PostSubscriptionSubscriptionIdCancelManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => PostSubscriptionSubscriptionIdCancelDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelData$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdCancelData$Outbound;
}

export function postSubscriptionSubscriptionIdCancelDataToJSON(
  postSubscriptionSubscriptionIdCancelData:
    PostSubscriptionSubscriptionIdCancelData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelData$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelData,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelResponseBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => PostSubscriptionSubscriptionIdCancelData$inboundSchema),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelResponseBody$Outbound = {
  data: PostSubscriptionSubscriptionIdCancelData$Outbound;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelResponseBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelResponseBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelResponseBody
  > = z.object({
    data: z.lazy(() => PostSubscriptionSubscriptionIdCancelData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelResponseBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelResponseBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelResponseBody$Outbound;
}

export function postSubscriptionSubscriptionIdCancelResponseBodyToJSON(
  postSubscriptionSubscriptionIdCancelResponseBody:
    PostSubscriptionSubscriptionIdCancelResponseBody,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdCancelResponseBody$outboundSchema.parse(
      postSubscriptionSubscriptionIdCancelResponseBody,
    ),
  );
}

export function postSubscriptionSubscriptionIdCancelResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdCancelResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdCancelResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdCancelResponseBody' from JSON`,
  );
}
