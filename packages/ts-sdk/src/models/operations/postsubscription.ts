/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostSubscriptionStatus = {
  Active: "active",
  Cancelled: "cancelled",
  PastDue: "past_due",
  Paused: "paused",
  Trial: "trial",
} as const;
export type PostSubscriptionStatus = ClosedEnum<typeof PostSubscriptionStatus>;

export type Items = {
  priceId: string;
  quantity: string;
};

export const PaymentInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PaymentInterval = ClosedEnum<typeof PaymentInterval>;

export type PaymentTerms = {
  paymentInterval: PaymentInterval;
  paymentFrequency: number;
};

export type BillingDetails = {
  paymentTerms: PaymentTerms;
  enableCheckout: boolean;
  additionalInformation: string;
  purchaseOrderNumber: string;
};

export type PostSubscriptionRequestBody = {
  status: PostSubscriptionStatus;
  currencyCode: string;
  customerId: string;
  addressId: string;
  discountId?: string | null | undefined;
  items: Array<Items>;
  billingDetails: BillingDetails;
};

export const PostSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionInterval = ClosedEnum<
  typeof PostSubscriptionInterval
>;

export type PostSubscriptionPaymentTerms = {
  interval?: PostSubscriptionInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type PostSubscriptionBillingDetails = {
  paymentTerms: PostSubscriptionPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type PostSubscriptionCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type PostSubscriptionBillingCycle = {
  frequency: number;
  interval: string;
};

export const Action = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type Action = ClosedEnum<typeof Action>;

export const PostSubscriptionSubscriptionStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type PostSubscriptionSubscriptionStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionStatus
>;

export type ScheduledChange = {
  id: string;
  subscriptionId: string;
  action: Action;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: PostSubscriptionSubscriptionStatus;
};

export const PostSubscriptionSubscriptionResponseStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type PostSubscriptionSubscriptionResponseStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionResponseStatus
>;

export const PostSubscriptionSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PostSubscriptionSubscriptionType = ClosedEnum<
  typeof PostSubscriptionSubscriptionType
>;

export const PostSubscriptionSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionInterval = ClosedEnum<
  typeof PostSubscriptionSubscriptionInterval
>;

export type PostSubscriptionSubscriptionBillingCycle = {
  interval: PostSubscriptionSubscriptionInterval;
  frequency: number;
};

export const PostSubscriptionSubscriptionResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionResponseInterval = ClosedEnum<
  typeof PostSubscriptionSubscriptionResponseInterval
>;

export type PostSubscriptionTrialPeriod = {
  interval: PostSubscriptionSubscriptionResponseInterval;
  frequency: number;
};

export type PostSubscriptionUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PostSubscriptionSubscriptionResponse200ApplicationJSONStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostSubscriptionSubscriptionResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionResponse200ApplicationJSONStatus
  >;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionResponseCustomData = {};

export type PostSubscriptionPrice = {
  productId: string;
  description?: string | null | undefined;
  type: PostSubscriptionSubscriptionType;
  name: string;
  billingCycle: PostSubscriptionSubscriptionBillingCycle;
  trialPeriod: PostSubscriptionTrialPeriod;
  unitPrice: PostSubscriptionUnitPrice;
  status: PostSubscriptionSubscriptionResponse200ApplicationJSONStatus;
  /**
   * Any valid JSON value
   */
  customData?: PostSubscriptionSubscriptionResponseCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type PostSubscriptionItems = {
  status: PostSubscriptionSubscriptionResponseStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: PostSubscriptionPrice;
};

/**
 * Any valid JSON value
 */
export type PostSubscriptionCustomData = {};

export type PostSubscriptionManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const PostSubscriptionSubscriptionResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostSubscriptionSubscriptionResponse200Status = ClosedEnum<
  typeof PostSubscriptionSubscriptionResponse200Status
>;

export const PostSubscriptionType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PostSubscriptionType = ClosedEnum<typeof PostSubscriptionType>;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionCustomData = {};

export type PostSubscriptionDiscount = {
  id: string;
  status?: PostSubscriptionSubscriptionResponse200Status | null | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PostSubscriptionType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostSubscriptionSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type Data = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: PostSubscriptionBillingDetails;
  currentBillingPeriod: PostSubscriptionCurrentBillingPeriod;
  billingCycle: PostSubscriptionBillingCycle;
  scheduledChange: Array<ScheduledChange>;
  items: Array<PostSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?: PostSubscriptionCustomData | undefined;
  managementUrls: PostSubscriptionManagementUrls;
  discount?: PostSubscriptionDiscount | null | undefined;
};

/**
 * Creates a Subscription
 */
export type PostSubscriptionResponseBody = {
  data: Data;
};

/** @internal */
export const PostSubscriptionStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionStatus
> = z.nativeEnum(PostSubscriptionStatus);

/** @internal */
export const PostSubscriptionStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionStatus
> = PostSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionStatus$ {
  /** @deprecated use `PostSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionStatus$outboundSchema;
}

/** @internal */
export const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown> = z
  .object({
    price_id: z.string(),
    quantity: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "price_id": "priceId",
    });
  });

/** @internal */
export type Items$Outbound = {
  price_id: string;
  quantity: string;
};

/** @internal */
export const Items$outboundSchema: z.ZodType<
  Items$Outbound,
  z.ZodTypeDef,
  Items
> = z.object({
  priceId: z.string(),
  quantity: z.string(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items$ {
  /** @deprecated use `Items$inboundSchema` instead. */
  export const inboundSchema = Items$inboundSchema;
  /** @deprecated use `Items$outboundSchema` instead. */
  export const outboundSchema = Items$outboundSchema;
  /** @deprecated use `Items$Outbound` instead. */
  export type Outbound = Items$Outbound;
}

export function itemsToJSON(items: Items): string {
  return JSON.stringify(Items$outboundSchema.parse(items));
}

export function itemsFromJSON(
  jsonString: string,
): SafeParseResult<Items, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items' from JSON`,
  );
}

/** @internal */
export const PaymentInterval$inboundSchema: z.ZodNativeEnum<
  typeof PaymentInterval
> = z.nativeEnum(PaymentInterval);

/** @internal */
export const PaymentInterval$outboundSchema: z.ZodNativeEnum<
  typeof PaymentInterval
> = PaymentInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentInterval$ {
  /** @deprecated use `PaymentInterval$inboundSchema` instead. */
  export const inboundSchema = PaymentInterval$inboundSchema;
  /** @deprecated use `PaymentInterval$outboundSchema` instead. */
  export const outboundSchema = PaymentInterval$outboundSchema;
}

/** @internal */
export const PaymentTerms$inboundSchema: z.ZodType<
  PaymentTerms,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_interval: PaymentInterval$inboundSchema,
  payment_frequency: z.number(),
}).transform((v) => {
  return remap$(v, {
    "payment_interval": "paymentInterval",
    "payment_frequency": "paymentFrequency",
  });
});

/** @internal */
export type PaymentTerms$Outbound = {
  payment_interval: string;
  payment_frequency: number;
};

/** @internal */
export const PaymentTerms$outboundSchema: z.ZodType<
  PaymentTerms$Outbound,
  z.ZodTypeDef,
  PaymentTerms
> = z.object({
  paymentInterval: PaymentInterval$outboundSchema,
  paymentFrequency: z.number(),
}).transform((v) => {
  return remap$(v, {
    paymentInterval: "payment_interval",
    paymentFrequency: "payment_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentTerms$ {
  /** @deprecated use `PaymentTerms$inboundSchema` instead. */
  export const inboundSchema = PaymentTerms$inboundSchema;
  /** @deprecated use `PaymentTerms$outboundSchema` instead. */
  export const outboundSchema = PaymentTerms$outboundSchema;
  /** @deprecated use `PaymentTerms$Outbound` instead. */
  export type Outbound = PaymentTerms$Outbound;
}

export function paymentTermsToJSON(paymentTerms: PaymentTerms): string {
  return JSON.stringify(PaymentTerms$outboundSchema.parse(paymentTerms));
}

export function paymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<PaymentTerms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentTerms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentTerms' from JSON`,
  );
}

/** @internal */
export const BillingDetails$inboundSchema: z.ZodType<
  BillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_terms: z.lazy(() => PaymentTerms$inboundSchema),
  enable_checkout: z.boolean(),
  additional_information: z.string(),
  purchase_order_number: z.string(),
}).transform((v) => {
  return remap$(v, {
    "payment_terms": "paymentTerms",
    "enable_checkout": "enableCheckout",
    "additional_information": "additionalInformation",
    "purchase_order_number": "purchaseOrderNumber",
  });
});

/** @internal */
export type BillingDetails$Outbound = {
  payment_terms: PaymentTerms$Outbound;
  enable_checkout: boolean;
  additional_information: string;
  purchase_order_number: string;
};

/** @internal */
export const BillingDetails$outboundSchema: z.ZodType<
  BillingDetails$Outbound,
  z.ZodTypeDef,
  BillingDetails
> = z.object({
  paymentTerms: z.lazy(() => PaymentTerms$outboundSchema),
  enableCheckout: z.boolean(),
  additionalInformation: z.string(),
  purchaseOrderNumber: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentTerms: "payment_terms",
    enableCheckout: "enable_checkout",
    additionalInformation: "additional_information",
    purchaseOrderNumber: "purchase_order_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetails$ {
  /** @deprecated use `BillingDetails$inboundSchema` instead. */
  export const inboundSchema = BillingDetails$inboundSchema;
  /** @deprecated use `BillingDetails$outboundSchema` instead. */
  export const outboundSchema = BillingDetails$outboundSchema;
  /** @deprecated use `BillingDetails$Outbound` instead. */
  export type Outbound = BillingDetails$Outbound;
}

export function billingDetailsToJSON(billingDetails: BillingDetails): string {
  return JSON.stringify(BillingDetails$outboundSchema.parse(billingDetails));
}

export function billingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<BillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingDetails' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionRequestBody$inboundSchema: z.ZodType<
  PostSubscriptionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PostSubscriptionStatus$inboundSchema,
  currency_code: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  discount_id: z.nullable(z.string()).optional(),
  items: z.array(z.lazy(() => Items$inboundSchema)),
  billingDetails: z.lazy(() => BillingDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
    "customer_id": "customerId",
    "address_id": "addressId",
    "discount_id": "discountId",
  });
});

/** @internal */
export type PostSubscriptionRequestBody$Outbound = {
  status: string;
  currency_code: string;
  customer_id: string;
  address_id: string;
  discount_id?: string | null | undefined;
  items: Array<Items$Outbound>;
  billingDetails: BillingDetails$Outbound;
};

/** @internal */
export const PostSubscriptionRequestBody$outboundSchema: z.ZodType<
  PostSubscriptionRequestBody$Outbound,
  z.ZodTypeDef,
  PostSubscriptionRequestBody
> = z.object({
  status: PostSubscriptionStatus$outboundSchema,
  currencyCode: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  discountId: z.nullable(z.string()).optional(),
  items: z.array(z.lazy(() => Items$outboundSchema)),
  billingDetails: z.lazy(() => BillingDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
    customerId: "customer_id",
    addressId: "address_id",
    discountId: "discount_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionRequestBody$ {
  /** @deprecated use `PostSubscriptionRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionRequestBody$inboundSchema;
  /** @deprecated use `PostSubscriptionRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionRequestBody$outboundSchema;
  /** @deprecated use `PostSubscriptionRequestBody$Outbound` instead. */
  export type Outbound = PostSubscriptionRequestBody$Outbound;
}

export function postSubscriptionRequestBodyToJSON(
  postSubscriptionRequestBody: PostSubscriptionRequestBody,
): string {
  return JSON.stringify(
    PostSubscriptionRequestBody$outboundSchema.parse(
      postSubscriptionRequestBody,
    ),
  );
}

export function postSubscriptionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionRequestBody' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionInterval$inboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionInterval
> = z.nativeEnum(PostSubscriptionInterval);

/** @internal */
export const PostSubscriptionInterval$outboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionInterval
> = PostSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionInterval$ {
  /** @deprecated use `PostSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionPaymentTerms$inboundSchema: z.ZodType<
  PostSubscriptionPaymentTerms,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: z.nullable(PostSubscriptionInterval$inboundSchema).optional(),
  frequency: z.nullable(z.number()).optional(),
});

/** @internal */
export type PostSubscriptionPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const PostSubscriptionPaymentTerms$outboundSchema: z.ZodType<
  PostSubscriptionPaymentTerms$Outbound,
  z.ZodTypeDef,
  PostSubscriptionPaymentTerms
> = z.object({
  interval: z.nullable(PostSubscriptionInterval$outboundSchema).optional(),
  frequency: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionPaymentTerms$ {
  /** @deprecated use `PostSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `PostSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `PostSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound = PostSubscriptionPaymentTerms$Outbound;
}

export function postSubscriptionPaymentTermsToJSON(
  postSubscriptionPaymentTerms: PostSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    PostSubscriptionPaymentTerms$outboundSchema.parse(
      postSubscriptionPaymentTerms,
    ),
  );
}

export function postSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionPaymentTerms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionPaymentTerms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionBillingDetails$inboundSchema: z.ZodType<
  PostSubscriptionBillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_terms: z.lazy(() => PostSubscriptionPaymentTerms$inboundSchema),
  enable_checkout: z.nullable(z.boolean()).optional(),
  additional_information: z.nullable(z.string()).optional(),
  purchase_order_number: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_terms": "paymentTerms",
    "enable_checkout": "enableCheckout",
    "additional_information": "additionalInformation",
    "purchase_order_number": "purchaseOrderNumber",
  });
});

/** @internal */
export type PostSubscriptionBillingDetails$Outbound = {
  payment_terms: PostSubscriptionPaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const PostSubscriptionBillingDetails$outboundSchema: z.ZodType<
  PostSubscriptionBillingDetails$Outbound,
  z.ZodTypeDef,
  PostSubscriptionBillingDetails
> = z.object({
  paymentTerms: z.lazy(() => PostSubscriptionPaymentTerms$outboundSchema),
  enableCheckout: z.nullable(z.boolean()).optional(),
  additionalInformation: z.nullable(z.string()).optional(),
  purchaseOrderNumber: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentTerms: "payment_terms",
    enableCheckout: "enable_checkout",
    additionalInformation: "additional_information",
    purchaseOrderNumber: "purchase_order_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionBillingDetails$ {
  /** @deprecated use `PostSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `PostSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `PostSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound = PostSubscriptionBillingDetails$Outbound;
}

export function postSubscriptionBillingDetailsToJSON(
  postSubscriptionBillingDetails: PostSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    PostSubscriptionBillingDetails$outboundSchema.parse(
      postSubscriptionBillingDetails,
    ),
  );
}

export function postSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionBillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionBillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionCurrentBillingPeriod$inboundSchema: z.ZodType<
  PostSubscriptionCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.nullable(z.string()),
  ends_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type PostSubscriptionCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const PostSubscriptionCurrentBillingPeriod$outboundSchema: z.ZodType<
  PostSubscriptionCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  PostSubscriptionCurrentBillingPeriod
> = z.object({
  startsAt: z.nullable(z.string()),
  endsAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionCurrentBillingPeriod$ {
  /** @deprecated use `PostSubscriptionCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = PostSubscriptionCurrentBillingPeriod$Outbound;
}

export function postSubscriptionCurrentBillingPeriodToJSON(
  postSubscriptionCurrentBillingPeriod: PostSubscriptionCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionCurrentBillingPeriod$outboundSchema.parse(
      postSubscriptionCurrentBillingPeriod,
    ),
  );
}

export function postSubscriptionCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionBillingCycle$inboundSchema: z.ZodType<
  PostSubscriptionBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/** @internal */
export type PostSubscriptionBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const PostSubscriptionBillingCycle$outboundSchema: z.ZodType<
  PostSubscriptionBillingCycle$Outbound,
  z.ZodTypeDef,
  PostSubscriptionBillingCycle
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionBillingCycle$ {
  /** @deprecated use `PostSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = PostSubscriptionBillingCycle$Outbound;
}

export function postSubscriptionBillingCycleToJSON(
  postSubscriptionBillingCycle: PostSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionBillingCycle$outboundSchema.parse(
      postSubscriptionBillingCycle,
    ),
  );
}

export function postSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const Action$inboundSchema: z.ZodNativeEnum<typeof Action> = z
  .nativeEnum(Action);

/** @internal */
export const Action$outboundSchema: z.ZodNativeEnum<typeof Action> =
  Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionSubscriptionStatus
> = z.nativeEnum(PostSubscriptionSubscriptionStatus);

/** @internal */
export const PostSubscriptionSubscriptionStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionSubscriptionStatus
> = PostSubscriptionSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionSubscriptionStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionStatus$outboundSchema;
}

/** @internal */
export const ScheduledChange$inboundSchema: z.ZodType<
  ScheduledChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  subscription_id: z.string(),
  action: Action$inboundSchema,
  effective_at: z.string(),
  resumes_at: z.nullable(z.string()).optional(),
  status: PostSubscriptionSubscriptionStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "effective_at": "effectiveAt",
    "resumes_at": "resumesAt",
  });
});

/** @internal */
export type ScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const ScheduledChange$outboundSchema: z.ZodType<
  ScheduledChange$Outbound,
  z.ZodTypeDef,
  ScheduledChange
> = z.object({
  id: z.string(),
  subscriptionId: z.string(),
  action: Action$outboundSchema,
  effectiveAt: z.string(),
  resumesAt: z.nullable(z.string()).optional(),
  status: PostSubscriptionSubscriptionStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    effectiveAt: "effective_at",
    resumesAt: "resumes_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledChange$ {
  /** @deprecated use `ScheduledChange$inboundSchema` instead. */
  export const inboundSchema = ScheduledChange$inboundSchema;
  /** @deprecated use `ScheduledChange$outboundSchema` instead. */
  export const outboundSchema = ScheduledChange$outboundSchema;
  /** @deprecated use `ScheduledChange$Outbound` instead. */
  export type Outbound = ScheduledChange$Outbound;
}

export function scheduledChangeToJSON(
  scheduledChange: ScheduledChange,
): string {
  return JSON.stringify(ScheduledChange$outboundSchema.parse(scheduledChange));
}

export function scheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledChange' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionResponseStatus> = z
    .nativeEnum(PostSubscriptionSubscriptionResponseStatus);

/** @internal */
export const PostSubscriptionSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionResponseStatus> =
    PostSubscriptionSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionResponseStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionSubscriptionType
> = z.nativeEnum(PostSubscriptionSubscriptionType);

/** @internal */
export const PostSubscriptionSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionSubscriptionType
> = PostSubscriptionSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionType$ {
  /** @deprecated use `PostSubscriptionSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionSubscriptionType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionType$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionSubscriptionType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionInterval> = z.nativeEnum(
    PostSubscriptionSubscriptionInterval,
  );

/** @internal */
export const PostSubscriptionSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionInterval> =
    PostSubscriptionSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionBillingCycle$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PostSubscriptionSubscriptionInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PostSubscriptionSubscriptionBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostSubscriptionSubscriptionBillingCycle$outboundSchema: z.ZodType<
  PostSubscriptionSubscriptionBillingCycle$Outbound,
  z.ZodTypeDef,
  PostSubscriptionSubscriptionBillingCycle
> = z.object({
  interval: PostSubscriptionSubscriptionInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionBillingCycleToJSON(
  postSubscriptionSubscriptionBillingCycle:
    PostSubscriptionSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionBillingCycle$outboundSchema.parse(
      postSubscriptionSubscriptionBillingCycle,
    ),
  );
}

export function postSubscriptionSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionResponseInterval> = z
    .nativeEnum(PostSubscriptionSubscriptionResponseInterval);

/** @internal */
export const PostSubscriptionSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionResponseInterval> =
    PostSubscriptionSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionResponseInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionTrialPeriod$inboundSchema: z.ZodType<
  PostSubscriptionTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PostSubscriptionSubscriptionResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PostSubscriptionTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostSubscriptionTrialPeriod$outboundSchema: z.ZodType<
  PostSubscriptionTrialPeriod$Outbound,
  z.ZodTypeDef,
  PostSubscriptionTrialPeriod
> = z.object({
  interval: PostSubscriptionSubscriptionResponseInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionTrialPeriod$ {
  /** @deprecated use `PostSubscriptionTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionTrialPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionTrialPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionTrialPeriod$Outbound` instead. */
  export type Outbound = PostSubscriptionTrialPeriod$Outbound;
}

export function postSubscriptionTrialPeriodToJSON(
  postSubscriptionTrialPeriod: PostSubscriptionTrialPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionTrialPeriod$outboundSchema.parse(
      postSubscriptionTrialPeriod,
    ),
  );
}

export function postSubscriptionTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionUnitPrice$inboundSchema: z.ZodType<
  PostSubscriptionUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PostSubscriptionUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PostSubscriptionUnitPrice$outboundSchema: z.ZodType<
  PostSubscriptionUnitPrice$Outbound,
  z.ZodTypeDef,
  PostSubscriptionUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionUnitPrice$ {
  /** @deprecated use `PostSubscriptionUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionUnitPrice$inboundSchema;
  /** @deprecated use `PostSubscriptionUnitPrice$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionUnitPrice$outboundSchema;
  /** @deprecated use `PostSubscriptionUnitPrice$Outbound` instead. */
  export type Outbound = PostSubscriptionUnitPrice$Outbound;
}

export function postSubscriptionUnitPriceToJSON(
  postSubscriptionUnitPrice: PostSubscriptionUnitPrice,
): string {
  return JSON.stringify(
    PostSubscriptionUnitPrice$outboundSchema.parse(postSubscriptionUnitPrice),
  );
}

export function postSubscriptionUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionUnitPrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    PostSubscriptionSubscriptionResponse200ApplicationJSONStatus,
  );

/** @internal */
export const PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionResponse200ApplicationJSONStatus
  > =
    PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionResponseCustomData$Outbound = {};

/** @internal */
export const PostSubscriptionSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionResponseCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionResponseCustomData$Outbound;
}

export function postSubscriptionSubscriptionResponseCustomDataToJSON(
  postSubscriptionSubscriptionResponseCustomData:
    PostSubscriptionSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionResponseCustomData$outboundSchema.parse(
      postSubscriptionSubscriptionResponseCustomData,
    ),
  );
}

export function postSubscriptionSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionPrice$inboundSchema: z.ZodType<
  PostSubscriptionPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostSubscriptionSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    PostSubscriptionSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() => PostSubscriptionTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => PostSubscriptionUnitPrice$inboundSchema),
  status:
    PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$inboundSchema,
  custom_data: z.lazy(() =>
    PostSubscriptionSubscriptionResponseCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostSubscriptionPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: PostSubscriptionSubscriptionBillingCycle$Outbound;
  trial_period: PostSubscriptionTrialPeriod$Outbound;
  unit_price: PostSubscriptionUnitPrice$Outbound;
  status: string;
  custom_data?:
    | PostSubscriptionSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PostSubscriptionPrice$outboundSchema: z.ZodType<
  PostSubscriptionPrice$Outbound,
  z.ZodTypeDef,
  PostSubscriptionPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostSubscriptionSubscriptionType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    PostSubscriptionSubscriptionBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() => PostSubscriptionTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => PostSubscriptionUnitPrice$outboundSchema),
  status:
    PostSubscriptionSubscriptionResponse200ApplicationJSONStatus$outboundSchema,
  customData: z.lazy(() =>
    PostSubscriptionSubscriptionResponseCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionPrice$ {
  /** @deprecated use `PostSubscriptionPrice$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionPrice$inboundSchema;
  /** @deprecated use `PostSubscriptionPrice$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionPrice$outboundSchema;
  /** @deprecated use `PostSubscriptionPrice$Outbound` instead. */
  export type Outbound = PostSubscriptionPrice$Outbound;
}

export function postSubscriptionPriceToJSON(
  postSubscriptionPrice: PostSubscriptionPrice,
): string {
  return JSON.stringify(
    PostSubscriptionPrice$outboundSchema.parse(postSubscriptionPrice),
  );
}

export function postSubscriptionPriceFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionPrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionItems$inboundSchema: z.ZodType<
  PostSubscriptionItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PostSubscriptionSubscriptionResponseStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.lazy(() => PostSubscriptionPrice$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type PostSubscriptionItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: PostSubscriptionPrice$Outbound;
};

/** @internal */
export const PostSubscriptionItems$outboundSchema: z.ZodType<
  PostSubscriptionItems$Outbound,
  z.ZodTypeDef,
  PostSubscriptionItems
> = z.object({
  status: PostSubscriptionSubscriptionResponseStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.lazy(() => PostSubscriptionPrice$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionItems$ {
  /** @deprecated use `PostSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionItems$inboundSchema;
  /** @deprecated use `PostSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionItems$outboundSchema;
  /** @deprecated use `PostSubscriptionItems$Outbound` instead. */
  export type Outbound = PostSubscriptionItems$Outbound;
}

export function postSubscriptionItemsToJSON(
  postSubscriptionItems: PostSubscriptionItems,
): string {
  return JSON.stringify(
    PostSubscriptionItems$outboundSchema.parse(postSubscriptionItems),
  );
}

export function postSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionCustomData$inboundSchema: z.ZodType<
  PostSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostSubscriptionCustomData$Outbound = {};

/** @internal */
export const PostSubscriptionCustomData$outboundSchema: z.ZodType<
  PostSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  PostSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionCustomData$ {
  /** @deprecated use `PostSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionCustomData$Outbound` instead. */
  export type Outbound = PostSubscriptionCustomData$Outbound;
}

export function postSubscriptionCustomDataToJSON(
  postSubscriptionCustomData: PostSubscriptionCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionCustomData$outboundSchema.parse(postSubscriptionCustomData),
  );
}

export function postSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionManagementUrls$inboundSchema: z.ZodType<
  PostSubscriptionManagementUrls,
  z.ZodTypeDef,
  unknown
> = z.object({
  update_payment_method: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "update_payment_method": "updatePaymentMethod",
  });
});

/** @internal */
export type PostSubscriptionManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const PostSubscriptionManagementUrls$outboundSchema: z.ZodType<
  PostSubscriptionManagementUrls$Outbound,
  z.ZodTypeDef,
  PostSubscriptionManagementUrls
> = z.object({
  updatePaymentMethod: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    updatePaymentMethod: "update_payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionManagementUrls$ {
  /** @deprecated use `PostSubscriptionManagementUrls$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionManagementUrls$inboundSchema;
  /** @deprecated use `PostSubscriptionManagementUrls$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionManagementUrls$outboundSchema;
  /** @deprecated use `PostSubscriptionManagementUrls$Outbound` instead. */
  export type Outbound = PostSubscriptionManagementUrls$Outbound;
}

export function postSubscriptionManagementUrlsToJSON(
  postSubscriptionManagementUrls: PostSubscriptionManagementUrls,
): string {
  return JSON.stringify(
    PostSubscriptionManagementUrls$outboundSchema.parse(
      postSubscriptionManagementUrls,
    ),
  );
}

export function postSubscriptionManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionManagementUrls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionManagementUrls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionManagementUrls' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionResponse200Status> = z
    .nativeEnum(PostSubscriptionSubscriptionResponse200Status);

/** @internal */
export const PostSubscriptionSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionResponse200Status> =
    PostSubscriptionSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionResponse200Status$ {
  /** @deprecated use `PostSubscriptionSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const PostSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionType
> = z.nativeEnum(PostSubscriptionType);

/** @internal */
export const PostSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof PostSubscriptionType
> = PostSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionType$ {
  /** @deprecated use `PostSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionType$inboundSchema;
  /** @deprecated use `PostSubscriptionType$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionCustomData$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionCustomData$Outbound = {};

/** @internal */
export const PostSubscriptionSubscriptionCustomData$outboundSchema: z.ZodType<
  PostSubscriptionSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  PostSubscriptionSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionCustomData$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionCustomData$Outbound;
}

export function postSubscriptionSubscriptionCustomDataToJSON(
  postSubscriptionSubscriptionCustomData:
    PostSubscriptionSubscriptionCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionCustomData$outboundSchema.parse(
      postSubscriptionSubscriptionCustomData,
    ),
  );
}

export function postSubscriptionSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionSubscriptionCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionDiscount$inboundSchema: z.ZodType<
  PostSubscriptionDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(
    PostSubscriptionSubscriptionResponse200Status$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: PostSubscriptionType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    PostSubscriptionSubscriptionCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type PostSubscriptionDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data: PostSubscriptionSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PostSubscriptionDiscount$outboundSchema: z.ZodType<
  PostSubscriptionDiscount$Outbound,
  z.ZodTypeDef,
  PostSubscriptionDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(
    PostSubscriptionSubscriptionResponse200Status$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: PostSubscriptionType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PostSubscriptionSubscriptionCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionDiscount$ {
  /** @deprecated use `PostSubscriptionDiscount$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionDiscount$inboundSchema;
  /** @deprecated use `PostSubscriptionDiscount$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionDiscount$outboundSchema;
  /** @deprecated use `PostSubscriptionDiscount$Outbound` instead. */
  export type Outbound = PostSubscriptionDiscount$Outbound;
}

export function postSubscriptionDiscountToJSON(
  postSubscriptionDiscount: PostSubscriptionDiscount,
): string {
  return JSON.stringify(
    PostSubscriptionDiscount$outboundSchema.parse(postSubscriptionDiscount),
  );
}

export function postSubscriptionDiscountFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionDiscount' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    status: z.string(),
    customer_id: z.string(),
    address_id: z.string(),
    currency_code: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    started_at: z.nullable(z.string()),
    first_billed_at: z.nullable(z.string()),
    next_billed_at: z.nullable(z.string()),
    paused_at: z.nullable(z.string()),
    canceled_at: z.nullable(z.string()),
    collection_mode: z.string(),
    billing_details: z.lazy(() => PostSubscriptionBillingDetails$inboundSchema),
    current_billing_period: z.lazy(() =>
      PostSubscriptionCurrentBillingPeriod$inboundSchema
    ),
    billing_cycle: z.lazy(() => PostSubscriptionBillingCycle$inboundSchema),
    scheduled_change: z.array(z.lazy(() => ScheduledChange$inboundSchema)),
    items: z.array(z.lazy(() => PostSubscriptionItems$inboundSchema)),
    custom_data: z.lazy(() => PostSubscriptionCustomData$inboundSchema)
      .optional(),
    management_urls: z.lazy(() => PostSubscriptionManagementUrls$inboundSchema),
    discount: z.nullable(z.lazy(() => PostSubscriptionDiscount$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "customer_id": "customerId",
      "address_id": "addressId",
      "currency_code": "currencyCode",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "started_at": "startedAt",
      "first_billed_at": "firstBilledAt",
      "next_billed_at": "nextBilledAt",
      "paused_at": "pausedAt",
      "canceled_at": "canceledAt",
      "collection_mode": "collectionMode",
      "billing_details": "billingDetails",
      "current_billing_period": "currentBillingPeriod",
      "billing_cycle": "billingCycle",
      "scheduled_change": "scheduledChange",
      "custom_data": "customData",
      "management_urls": "managementUrls",
    });
  });

/** @internal */
export type Data$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: PostSubscriptionBillingDetails$Outbound;
  current_billing_period: PostSubscriptionCurrentBillingPeriod$Outbound;
  billing_cycle: PostSubscriptionBillingCycle$Outbound;
  scheduled_change: Array<ScheduledChange$Outbound>;
  items: Array<PostSubscriptionItems$Outbound>;
  custom_data?: PostSubscriptionCustomData$Outbound | undefined;
  management_urls: PostSubscriptionManagementUrls$Outbound;
  discount?: PostSubscriptionDiscount$Outbound | null | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    status: z.string(),
    customerId: z.string(),
    addressId: z.string(),
    currencyCode: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    startedAt: z.nullable(z.string()),
    firstBilledAt: z.nullable(z.string()),
    nextBilledAt: z.nullable(z.string()),
    pausedAt: z.nullable(z.string()),
    canceledAt: z.nullable(z.string()),
    collectionMode: z.string(),
    billingDetails: z.lazy(() => PostSubscriptionBillingDetails$outboundSchema),
    currentBillingPeriod: z.lazy(() =>
      PostSubscriptionCurrentBillingPeriod$outboundSchema
    ),
    billingCycle: z.lazy(() => PostSubscriptionBillingCycle$outboundSchema),
    scheduledChange: z.array(z.lazy(() => ScheduledChange$outboundSchema)),
    items: z.array(z.lazy(() => PostSubscriptionItems$outboundSchema)),
    customData: z.lazy(() => PostSubscriptionCustomData$outboundSchema)
      .optional(),
    managementUrls: z.lazy(() => PostSubscriptionManagementUrls$outboundSchema),
    discount: z.nullable(z.lazy(() => PostSubscriptionDiscount$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      customerId: "customer_id",
      addressId: "address_id",
      currencyCode: "currency_code",
      createdAt: "created_at",
      updatedAt: "updated_at",
      startedAt: "started_at",
      firstBilledAt: "first_billed_at",
      nextBilledAt: "next_billed_at",
      pausedAt: "paused_at",
      canceledAt: "canceled_at",
      collectionMode: "collection_mode",
      billingDetails: "billing_details",
      currentBillingPeriod: "current_billing_period",
      billingCycle: "billing_cycle",
      scheduledChange: "scheduled_change",
      customData: "custom_data",
      managementUrls: "management_urls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionResponseBody$inboundSchema: z.ZodType<
  PostSubscriptionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type PostSubscriptionResponseBody$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const PostSubscriptionResponseBody$outboundSchema: z.ZodType<
  PostSubscriptionResponseBody$Outbound,
  z.ZodTypeDef,
  PostSubscriptionResponseBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionResponseBody$ {
  /** @deprecated use `PostSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = PostSubscriptionResponseBody$Outbound;
}

export function postSubscriptionResponseBodyToJSON(
  postSubscriptionResponseBody: PostSubscriptionResponseBody,
): string {
  return JSON.stringify(
    PostSubscriptionResponseBody$outboundSchema.parse(
      postSubscriptionResponseBody,
    ),
  );
}

export function postSubscriptionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostSubscriptionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostSubscriptionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionResponseBody' from JSON`,
  );
}
