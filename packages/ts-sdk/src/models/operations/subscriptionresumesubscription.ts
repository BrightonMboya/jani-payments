/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionResumeSubscriptionRequest = {
  subscriptionId: string;
};

export const SubscriptionResumeSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionResumeSubscriptionInterval = ClosedEnum<
  typeof SubscriptionResumeSubscriptionInterval
>;

export type SubscriptionResumeSubscriptionPaymentTerms = {
  interval?: SubscriptionResumeSubscriptionInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type SubscriptionResumeSubscriptionBillingDetails = {
  paymentTerms: SubscriptionResumeSubscriptionPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type SubscriptionResumeSubscriptionCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type SubscriptionResumeSubscriptionBillingCycle = {
  frequency: number;
  interval: string;
};

export const SubscriptionResumeSubscriptionAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type SubscriptionResumeSubscriptionAction = ClosedEnum<
  typeof SubscriptionResumeSubscriptionAction
>;

export const SubscriptionResumeSubscriptionStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type SubscriptionResumeSubscriptionStatus = ClosedEnum<
  typeof SubscriptionResumeSubscriptionStatus
>;

export type SubscriptionResumeSubscriptionScheduledChange = {
  id: string;
  subscriptionId: string;
  action: SubscriptionResumeSubscriptionAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: SubscriptionResumeSubscriptionStatus;
};

export const SubscriptionResumeSubscriptionSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type SubscriptionResumeSubscriptionSubscriptionStatus = ClosedEnum<
  typeof SubscriptionResumeSubscriptionSubscriptionStatus
>;

export const SubscriptionResumeSubscriptionSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type SubscriptionResumeSubscriptionSubscriptionType = ClosedEnum<
  typeof SubscriptionResumeSubscriptionSubscriptionType
>;

export const SubscriptionResumeSubscriptionSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionResumeSubscriptionSubscriptionInterval = ClosedEnum<
  typeof SubscriptionResumeSubscriptionSubscriptionInterval
>;

export type SubscriptionResumeSubscriptionSubscriptionBillingCycle = {
  interval: SubscriptionResumeSubscriptionSubscriptionInterval;
  frequency: number;
};

export const SubscriptionResumeSubscriptionSubscriptionResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionResumeSubscriptionSubscriptionResponseInterval =
  ClosedEnum<typeof SubscriptionResumeSubscriptionSubscriptionResponseInterval>;

export type SubscriptionResumeSubscriptionTrialPeriod = {
  interval: SubscriptionResumeSubscriptionSubscriptionResponseInterval;
  frequency: number;
};

export type SubscriptionResumeSubscriptionUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const SubscriptionResumeSubscriptionSubscriptionResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionResumeSubscriptionSubscriptionResponse200Status =
  ClosedEnum<
    typeof SubscriptionResumeSubscriptionSubscriptionResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type SubscriptionResumeSubscriptionSubscriptionResponseCustomData = {};

export type SubscriptionResumeSubscriptionPrice = {
  productId: string;
  description?: string | null | undefined;
  type: SubscriptionResumeSubscriptionSubscriptionType;
  name: string;
  billingCycle: SubscriptionResumeSubscriptionSubscriptionBillingCycle;
  trialPeriod: SubscriptionResumeSubscriptionTrialPeriod;
  unitPrice: SubscriptionResumeSubscriptionUnitPrice;
  status: SubscriptionResumeSubscriptionSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | SubscriptionResumeSubscriptionSubscriptionResponseCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type SubscriptionResumeSubscriptionItems = {
  status: SubscriptionResumeSubscriptionSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: SubscriptionResumeSubscriptionPrice;
};

/**
 * Any valid JSON value
 */
export type SubscriptionResumeSubscriptionCustomData = {};

export type SubscriptionResumeSubscriptionManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const SubscriptionResumeSubscriptionSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionResumeSubscriptionSubscriptionResponseStatus =
  ClosedEnum<typeof SubscriptionResumeSubscriptionSubscriptionResponseStatus>;

export const SubscriptionResumeSubscriptionType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type SubscriptionResumeSubscriptionType = ClosedEnum<
  typeof SubscriptionResumeSubscriptionType
>;

/**
 * Any valid JSON value
 */
export type SubscriptionResumeSubscriptionSubscriptionCustomData = {};

export type SubscriptionResumeSubscriptionDiscount = {
  id: string;
  status?:
    | SubscriptionResumeSubscriptionSubscriptionResponseStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: SubscriptionResumeSubscriptionType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: SubscriptionResumeSubscriptionSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type SubscriptionResumeSubscriptionData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: SubscriptionResumeSubscriptionBillingDetails;
  currentBillingPeriod: SubscriptionResumeSubscriptionCurrentBillingPeriod;
  billingCycle: SubscriptionResumeSubscriptionBillingCycle;
  scheduledChange: Array<SubscriptionResumeSubscriptionScheduledChange>;
  items: Array<SubscriptionResumeSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionResumeSubscriptionCustomData | undefined;
  managementUrls: SubscriptionResumeSubscriptionManagementUrls;
  discount?: SubscriptionResumeSubscriptionDiscount | null | undefined;
};

/**
 * Resumes a subscription given its id
 */
export type SubscriptionResumeSubscriptionResponseBody = {
  data: SubscriptionResumeSubscriptionData;
};

/** @internal */
export const SubscriptionResumeSubscriptionRequest$inboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
  });
});

/** @internal */
export type SubscriptionResumeSubscriptionRequest$Outbound = {
  subscription_id: string;
};

/** @internal */
export const SubscriptionResumeSubscriptionRequest$outboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionResumeSubscriptionRequest
> = z.object({
  subscriptionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionRequest$ {
  /** @deprecated use `SubscriptionResumeSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionRequest$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionRequest$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionRequest$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionRequest$Outbound;
}

export function subscriptionResumeSubscriptionRequestToJSON(
  subscriptionResumeSubscriptionRequest: SubscriptionResumeSubscriptionRequest,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionRequest$outboundSchema.parse(
      subscriptionResumeSubscriptionRequest,
    ),
  );
}

export function subscriptionResumeSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionResumeSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionResumeSubscriptionRequest' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionInterval> = z.nativeEnum(
    SubscriptionResumeSubscriptionInterval,
  );

/** @internal */
export const SubscriptionResumeSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionInterval> =
    SubscriptionResumeSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionInterval$ {
  /** @deprecated use `SubscriptionResumeSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionPaymentTerms$inboundSchema:
  z.ZodType<SubscriptionResumeSubscriptionPaymentTerms, z.ZodTypeDef, unknown> =
    z.object({
      interval: z.nullable(SubscriptionResumeSubscriptionInterval$inboundSchema)
        .optional(),
      frequency: z.nullable(z.number()).optional(),
    });

/** @internal */
export type SubscriptionResumeSubscriptionPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const SubscriptionResumeSubscriptionPaymentTerms$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionPaymentTerms$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionPaymentTerms
  > = z.object({
    interval: z.nullable(SubscriptionResumeSubscriptionInterval$outboundSchema)
      .optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionPaymentTerms$ {
  /** @deprecated use `SubscriptionResumeSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionPaymentTerms$Outbound;
}

export function subscriptionResumeSubscriptionPaymentTermsToJSON(
  subscriptionResumeSubscriptionPaymentTerms:
    SubscriptionResumeSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionPaymentTerms$outboundSchema.parse(
      subscriptionResumeSubscriptionPaymentTerms,
    ),
  );
}

export function subscriptionResumeSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionPaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionBillingDetails$inboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      SubscriptionResumeSubscriptionPaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type SubscriptionResumeSubscriptionBillingDetails$Outbound = {
  payment_terms: SubscriptionResumeSubscriptionPaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const SubscriptionResumeSubscriptionBillingDetails$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionBillingDetails$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      SubscriptionResumeSubscriptionPaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionBillingDetails$ {
  /** @deprecated use `SubscriptionResumeSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionBillingDetails$Outbound;
}

export function subscriptionResumeSubscriptionBillingDetailsToJSON(
  subscriptionResumeSubscriptionBillingDetails:
    SubscriptionResumeSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionBillingDetails$outboundSchema.parse(
      subscriptionResumeSubscriptionBillingDetails,
    ),
  );
}

export function subscriptionResumeSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string()),
    ends_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type SubscriptionResumeSubscriptionCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const SubscriptionResumeSubscriptionCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.string()),
    endsAt: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionCurrentBillingPeriod$ {
  /** @deprecated use `SubscriptionResumeSubscriptionCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    SubscriptionResumeSubscriptionCurrentBillingPeriod$Outbound;
}

export function subscriptionResumeSubscriptionCurrentBillingPeriodToJSON(
  subscriptionResumeSubscriptionCurrentBillingPeriod:
    SubscriptionResumeSubscriptionCurrentBillingPeriod,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionCurrentBillingPeriod$outboundSchema.parse(
      subscriptionResumeSubscriptionCurrentBillingPeriod,
    ),
  );
}

export function subscriptionResumeSubscriptionCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionBillingCycle$inboundSchema:
  z.ZodType<SubscriptionResumeSubscriptionBillingCycle, z.ZodTypeDef, unknown> =
    z.object({
      frequency: z.number().int(),
      interval: z.string(),
    });

/** @internal */
export type SubscriptionResumeSubscriptionBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const SubscriptionResumeSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionResumeSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionBillingCycle$Outbound;
}

export function subscriptionResumeSubscriptionBillingCycleToJSON(
  subscriptionResumeSubscriptionBillingCycle:
    SubscriptionResumeSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionResumeSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionResumeSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionAction$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionAction> = z.nativeEnum(
    SubscriptionResumeSubscriptionAction,
  );

/** @internal */
export const SubscriptionResumeSubscriptionAction$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionAction> =
    SubscriptionResumeSubscriptionAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionAction$ {
  /** @deprecated use `SubscriptionResumeSubscriptionAction$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionAction$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionAction$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionAction$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionStatus> = z.nativeEnum(
    SubscriptionResumeSubscriptionStatus,
  );

/** @internal */
export const SubscriptionResumeSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionStatus> =
    SubscriptionResumeSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionStatus$ {
  /** @deprecated use `SubscriptionResumeSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionScheduledChange$inboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: SubscriptionResumeSubscriptionAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()).optional(),
    status: SubscriptionResumeSubscriptionStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type SubscriptionResumeSubscriptionScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const SubscriptionResumeSubscriptionScheduledChange$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionScheduledChange$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: SubscriptionResumeSubscriptionAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()).optional(),
    status: SubscriptionResumeSubscriptionStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionScheduledChange$ {
  /** @deprecated use `SubscriptionResumeSubscriptionScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionScheduledChange$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionScheduledChange$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionScheduledChange$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionScheduledChange$Outbound;
}

export function subscriptionResumeSubscriptionScheduledChangeToJSON(
  subscriptionResumeSubscriptionScheduledChange:
    SubscriptionResumeSubscriptionScheduledChange,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionScheduledChange$outboundSchema.parse(
      subscriptionResumeSubscriptionScheduledChange,
    ),
  );
}

export function subscriptionResumeSubscriptionScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionScheduledChange' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionSubscriptionStatus> = z
    .nativeEnum(SubscriptionResumeSubscriptionSubscriptionStatus);

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionSubscriptionStatus> =
    SubscriptionResumeSubscriptionSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionStatus$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionType$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionSubscriptionType> = z
    .nativeEnum(SubscriptionResumeSubscriptionSubscriptionType);

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionType$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionSubscriptionType> =
    SubscriptionResumeSubscriptionSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionType$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionSubscriptionInterval> = z
    .nativeEnum(SubscriptionResumeSubscriptionSubscriptionInterval);

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionResumeSubscriptionSubscriptionInterval> =
    SubscriptionResumeSubscriptionSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionInterval$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: SubscriptionResumeSubscriptionSubscriptionInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type SubscriptionResumeSubscriptionSubscriptionBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionSubscriptionBillingCycle
  > = z.object({
    interval: SubscriptionResumeSubscriptionSubscriptionInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound =
    SubscriptionResumeSubscriptionSubscriptionBillingCycle$Outbound;
}

export function subscriptionResumeSubscriptionSubscriptionBillingCycleToJSON(
  subscriptionResumeSubscriptionSubscriptionBillingCycle:
    SubscriptionResumeSubscriptionSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionResumeSubscriptionSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionResumeSubscriptionSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionSubscriptionBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionResumeSubscriptionSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionResumeSubscriptionSubscriptionResponseInterval
  > = z.nativeEnum(SubscriptionResumeSubscriptionSubscriptionResponseInterval);

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionResumeSubscriptionSubscriptionResponseInterval
  > = SubscriptionResumeSubscriptionSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionResponseInterval$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionTrialPeriod$inboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval:
    SubscriptionResumeSubscriptionSubscriptionResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type SubscriptionResumeSubscriptionTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionResumeSubscriptionTrialPeriod$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionTrialPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionTrialPeriod
  > = z.object({
    interval:
      SubscriptionResumeSubscriptionSubscriptionResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionTrialPeriod$ {
  /** @deprecated use `SubscriptionResumeSubscriptionTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionTrialPeriod$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionTrialPeriod$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionTrialPeriod$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionTrialPeriod$Outbound;
}

export function subscriptionResumeSubscriptionTrialPeriodToJSON(
  subscriptionResumeSubscriptionTrialPeriod:
    SubscriptionResumeSubscriptionTrialPeriod,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionTrialPeriod$outboundSchema.parse(
      subscriptionResumeSubscriptionTrialPeriod,
    ),
  );
}

export function subscriptionResumeSubscriptionTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionTrialPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionUnitPrice$inboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type SubscriptionResumeSubscriptionUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const SubscriptionResumeSubscriptionUnitPrice$outboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionUnitPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionResumeSubscriptionUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionUnitPrice$ {
  /** @deprecated use `SubscriptionResumeSubscriptionUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionUnitPrice$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionUnitPrice$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionUnitPrice$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionUnitPrice$Outbound;
}

export function subscriptionResumeSubscriptionUnitPriceToJSON(
  subscriptionResumeSubscriptionUnitPrice:
    SubscriptionResumeSubscriptionUnitPrice,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionUnitPrice$outboundSchema.parse(
      subscriptionResumeSubscriptionUnitPrice,
    ),
  );
}

export function subscriptionResumeSubscriptionUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionUnitPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionResumeSubscriptionSubscriptionResponse200Status
  > = z.nativeEnum(SubscriptionResumeSubscriptionSubscriptionResponse200Status);

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionResumeSubscriptionSubscriptionResponse200Status
  > = SubscriptionResumeSubscriptionSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionResponse200Status$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionResumeSubscriptionSubscriptionResponseCustomData$Outbound =
  {};

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionResponseCustomData$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData$Outbound;
}

export function subscriptionResumeSubscriptionSubscriptionResponseCustomDataToJSON(
  subscriptionResumeSubscriptionSubscriptionResponseCustomData:
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData$outboundSchema
      .parse(subscriptionResumeSubscriptionSubscriptionResponseCustomData),
  );
}

export function subscriptionResumeSubscriptionSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionSubscriptionResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionResumeSubscriptionSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionPrice$inboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionResumeSubscriptionSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    SubscriptionResumeSubscriptionSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    SubscriptionResumeSubscriptionTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    SubscriptionResumeSubscriptionUnitPrice$inboundSchema
  ),
  status:
    SubscriptionResumeSubscriptionSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SubscriptionResumeSubscriptionPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    SubscriptionResumeSubscriptionSubscriptionBillingCycle$Outbound;
  trial_period: SubscriptionResumeSubscriptionTrialPeriod$Outbound;
  unit_price: SubscriptionResumeSubscriptionUnitPrice$Outbound;
  status: string;
  custom_data?:
    | SubscriptionResumeSubscriptionSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const SubscriptionResumeSubscriptionPrice$outboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionResumeSubscriptionPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionResumeSubscriptionSubscriptionType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    SubscriptionResumeSubscriptionSubscriptionBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    SubscriptionResumeSubscriptionTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() =>
    SubscriptionResumeSubscriptionUnitPrice$outboundSchema
  ),
  status:
    SubscriptionResumeSubscriptionSubscriptionResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    SubscriptionResumeSubscriptionSubscriptionResponseCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionPrice$ {
  /** @deprecated use `SubscriptionResumeSubscriptionPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionPrice$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionPrice$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionPrice$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionPrice$Outbound;
}

export function subscriptionResumeSubscriptionPriceToJSON(
  subscriptionResumeSubscriptionPrice: SubscriptionResumeSubscriptionPrice,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionPrice$outboundSchema.parse(
      subscriptionResumeSubscriptionPrice,
    ),
  );
}

export function subscriptionResumeSubscriptionPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionResumeSubscriptionPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionResumeSubscriptionPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionItems$inboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: SubscriptionResumeSubscriptionSubscriptionStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.lazy(() => SubscriptionResumeSubscriptionPrice$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type SubscriptionResumeSubscriptionItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: SubscriptionResumeSubscriptionPrice$Outbound;
};

/** @internal */
export const SubscriptionResumeSubscriptionItems$outboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionItems$Outbound,
  z.ZodTypeDef,
  SubscriptionResumeSubscriptionItems
> = z.object({
  status: SubscriptionResumeSubscriptionSubscriptionStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.lazy(() => SubscriptionResumeSubscriptionPrice$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionItems$ {
  /** @deprecated use `SubscriptionResumeSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionItems$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionItems$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionItems$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionItems$Outbound;
}

export function subscriptionResumeSubscriptionItemsToJSON(
  subscriptionResumeSubscriptionItems: SubscriptionResumeSubscriptionItems,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionItems$outboundSchema.parse(
      subscriptionResumeSubscriptionItems,
    ),
  );
}

export function subscriptionResumeSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionResumeSubscriptionItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionResumeSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionCustomData$inboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubscriptionResumeSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionResumeSubscriptionCustomData$outboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  SubscriptionResumeSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionResumeSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionCustomData$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionCustomData$Outbound;
}

export function subscriptionResumeSubscriptionCustomDataToJSON(
  subscriptionResumeSubscriptionCustomData:
    SubscriptionResumeSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionCustomData$outboundSchema.parse(
      subscriptionResumeSubscriptionCustomData,
    ),
  );
}

export function subscriptionResumeSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionManagementUrls$inboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type SubscriptionResumeSubscriptionManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const SubscriptionResumeSubscriptionManagementUrls$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionManagementUrls$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionManagementUrls$ {
  /** @deprecated use `SubscriptionResumeSubscriptionManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionManagementUrls$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionManagementUrls$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionManagementUrls$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionManagementUrls$Outbound;
}

export function subscriptionResumeSubscriptionManagementUrlsToJSON(
  subscriptionResumeSubscriptionManagementUrls:
    SubscriptionResumeSubscriptionManagementUrls,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionManagementUrls$outboundSchema.parse(
      subscriptionResumeSubscriptionManagementUrls,
    ),
  );
}

export function subscriptionResumeSubscriptionManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionManagementUrls' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionResumeSubscriptionSubscriptionResponseStatus
  > = z.nativeEnum(SubscriptionResumeSubscriptionSubscriptionResponseStatus);

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionResumeSubscriptionSubscriptionResponseStatus
  > = SubscriptionResumeSubscriptionSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionResponseStatus$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionResumeSubscriptionType
> = z.nativeEnum(SubscriptionResumeSubscriptionType);

/** @internal */
export const SubscriptionResumeSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionResumeSubscriptionType
> = SubscriptionResumeSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionType$ {
  /** @deprecated use `SubscriptionResumeSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = SubscriptionResumeSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionCustomData$inboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionSubscriptionCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionResumeSubscriptionSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionResumeSubscriptionSubscriptionCustomData$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionSubscriptionCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionResumeSubscriptionSubscriptionCustomData$Outbound;
}

export function subscriptionResumeSubscriptionSubscriptionCustomDataToJSON(
  subscriptionResumeSubscriptionSubscriptionCustomData:
    SubscriptionResumeSubscriptionSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionSubscriptionCustomData$outboundSchema.parse(
      subscriptionResumeSubscriptionSubscriptionCustomData,
    ),
  );
}

export function subscriptionResumeSubscriptionSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionDiscount$inboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(
    SubscriptionResumeSubscriptionSubscriptionResponseStatus$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: SubscriptionResumeSubscriptionType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    SubscriptionResumeSubscriptionSubscriptionCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type SubscriptionResumeSubscriptionDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data: SubscriptionResumeSubscriptionSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const SubscriptionResumeSubscriptionDiscount$outboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionResumeSubscriptionDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(
    SubscriptionResumeSubscriptionSubscriptionResponseStatus$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: SubscriptionResumeSubscriptionType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    SubscriptionResumeSubscriptionSubscriptionCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionDiscount$ {
  /** @deprecated use `SubscriptionResumeSubscriptionDiscount$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionDiscount$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionDiscount$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionDiscount$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionDiscount$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionDiscount$Outbound;
}

export function subscriptionResumeSubscriptionDiscountToJSON(
  subscriptionResumeSubscriptionDiscount:
    SubscriptionResumeSubscriptionDiscount,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionDiscount$outboundSchema.parse(
      subscriptionResumeSubscriptionDiscount,
    ),
  );
}

export function subscriptionResumeSubscriptionDiscountFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionResumeSubscriptionDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionResumeSubscriptionDiscount' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionData$inboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  started_at: z.nullable(z.string()),
  first_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  paused_at: z.nullable(z.string()),
  canceled_at: z.nullable(z.string()),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    SubscriptionResumeSubscriptionBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    SubscriptionResumeSubscriptionCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    SubscriptionResumeSubscriptionBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.lazy(() => SubscriptionResumeSubscriptionScheduledChange$inboundSchema),
  ),
  items: z.array(
    z.lazy(() => SubscriptionResumeSubscriptionItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    SubscriptionResumeSubscriptionCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    SubscriptionResumeSubscriptionManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionResumeSubscriptionDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type SubscriptionResumeSubscriptionData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: SubscriptionResumeSubscriptionBillingDetails$Outbound;
  current_billing_period:
    SubscriptionResumeSubscriptionCurrentBillingPeriod$Outbound;
  billing_cycle: SubscriptionResumeSubscriptionBillingCycle$Outbound;
  scheduled_change: Array<
    SubscriptionResumeSubscriptionScheduledChange$Outbound
  >;
  items: Array<SubscriptionResumeSubscriptionItems$Outbound>;
  custom_data?: SubscriptionResumeSubscriptionCustomData$Outbound | undefined;
  management_urls: SubscriptionResumeSubscriptionManagementUrls$Outbound;
  discount?: SubscriptionResumeSubscriptionDiscount$Outbound | null | undefined;
};

/** @internal */
export const SubscriptionResumeSubscriptionData$outboundSchema: z.ZodType<
  SubscriptionResumeSubscriptionData$Outbound,
  z.ZodTypeDef,
  SubscriptionResumeSubscriptionData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startedAt: z.nullable(z.string()),
  firstBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  pausedAt: z.nullable(z.string()),
  canceledAt: z.nullable(z.string()),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    SubscriptionResumeSubscriptionBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    SubscriptionResumeSubscriptionCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    SubscriptionResumeSubscriptionBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.lazy(() => SubscriptionResumeSubscriptionScheduledChange$outboundSchema),
  ),
  items: z.array(
    z.lazy(() => SubscriptionResumeSubscriptionItems$outboundSchema),
  ),
  customData: z.lazy(() =>
    SubscriptionResumeSubscriptionCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    SubscriptionResumeSubscriptionManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionResumeSubscriptionDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionData$ {
  /** @deprecated use `SubscriptionResumeSubscriptionData$inboundSchema` instead. */
  export const inboundSchema = SubscriptionResumeSubscriptionData$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionData$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionData$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionData$Outbound;
}

export function subscriptionResumeSubscriptionDataToJSON(
  subscriptionResumeSubscriptionData: SubscriptionResumeSubscriptionData,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionData$outboundSchema.parse(
      subscriptionResumeSubscriptionData,
    ),
  );
}

export function subscriptionResumeSubscriptionDataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionResumeSubscriptionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionResumeSubscriptionData' from JSON`,
  );
}

/** @internal */
export const SubscriptionResumeSubscriptionResponseBody$inboundSchema:
  z.ZodType<SubscriptionResumeSubscriptionResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      data: z.lazy(() => SubscriptionResumeSubscriptionData$inboundSchema),
    });

/** @internal */
export type SubscriptionResumeSubscriptionResponseBody$Outbound = {
  data: SubscriptionResumeSubscriptionData$Outbound;
};

/** @internal */
export const SubscriptionResumeSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionResumeSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionResumeSubscriptionResponseBody
  > = z.object({
    data: z.lazy(() => SubscriptionResumeSubscriptionData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionResumeSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionResumeSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionResumeSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionResumeSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionResumeSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionResumeSubscriptionResponseBody$Outbound;
}

export function subscriptionResumeSubscriptionResponseBodyToJSON(
  subscriptionResumeSubscriptionResponseBody:
    SubscriptionResumeSubscriptionResponseBody,
): string {
  return JSON.stringify(
    SubscriptionResumeSubscriptionResponseBody$outboundSchema.parse(
      subscriptionResumeSubscriptionResponseBody,
    ),
  );
}

export function subscriptionResumeSubscriptionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionResumeSubscriptionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionResumeSubscriptionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionResumeSubscriptionResponseBody' from JSON`,
  );
}
