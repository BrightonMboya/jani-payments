/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPricesPriceIdRequest = {
  priceId: string;
};

export const GetPricesPriceIdType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type GetPricesPriceIdType = ClosedEnum<typeof GetPricesPriceIdType>;

export const GetPricesPriceIdInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetPricesPriceIdInterval = ClosedEnum<
  typeof GetPricesPriceIdInterval
>;

export type GetPricesPriceIdBillingCycle = {
  interval: GetPricesPriceIdInterval;
  frequency: number;
};

export const GetPricesPriceIdPricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type GetPricesPriceIdPricesInterval = ClosedEnum<
  typeof GetPricesPriceIdPricesInterval
>;

export type GetPricesPriceIdTrialPeriod = {
  interval: GetPricesPriceIdPricesInterval;
  frequency: number;
};

export type GetPricesPriceIdUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const GetPricesPriceIdStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetPricesPriceIdStatus = ClosedEnum<typeof GetPricesPriceIdStatus>;

/**
 * Any valid JSON value
 */
export type GetPricesPriceIdCustomData = {};

/**
 * Returns a Price by its Id
 */
export type GetPricesPriceIdResponseBody = {
  productId: string;
  description?: string | null | undefined;
  type: GetPricesPriceIdType;
  name: string;
  billingCycle: GetPricesPriceIdBillingCycle;
  trialPeriod: GetPricesPriceIdTrialPeriod;
  unitPrice: GetPricesPriceIdUnitPrice;
  status: GetPricesPriceIdStatus;
  /**
   * Any valid JSON value
   */
  customData?: GetPricesPriceIdCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const GetPricesPriceIdRequest$inboundSchema: z.ZodType<
  GetPricesPriceIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
  });
});

/** @internal */
export type GetPricesPriceIdRequest$Outbound = {
  price_id: string;
};

/** @internal */
export const GetPricesPriceIdRequest$outboundSchema: z.ZodType<
  GetPricesPriceIdRequest$Outbound,
  z.ZodTypeDef,
  GetPricesPriceIdRequest
> = z.object({
  priceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdRequest$ {
  /** @deprecated use `GetPricesPriceIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdRequest$inboundSchema;
  /** @deprecated use `GetPricesPriceIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdRequest$outboundSchema;
  /** @deprecated use `GetPricesPriceIdRequest$Outbound` instead. */
  export type Outbound = GetPricesPriceIdRequest$Outbound;
}

export function getPricesPriceIdRequestToJSON(
  getPricesPriceIdRequest: GetPricesPriceIdRequest,
): string {
  return JSON.stringify(
    GetPricesPriceIdRequest$outboundSchema.parse(getPricesPriceIdRequest),
  );
}

export function getPricesPriceIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesPriceIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesPriceIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesPriceIdRequest' from JSON`,
  );
}

/** @internal */
export const GetPricesPriceIdType$inboundSchema: z.ZodNativeEnum<
  typeof GetPricesPriceIdType
> = z.nativeEnum(GetPricesPriceIdType);

/** @internal */
export const GetPricesPriceIdType$outboundSchema: z.ZodNativeEnum<
  typeof GetPricesPriceIdType
> = GetPricesPriceIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdType$ {
  /** @deprecated use `GetPricesPriceIdType$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdType$inboundSchema;
  /** @deprecated use `GetPricesPriceIdType$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdType$outboundSchema;
}

/** @internal */
export const GetPricesPriceIdInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetPricesPriceIdInterval
> = z.nativeEnum(GetPricesPriceIdInterval);

/** @internal */
export const GetPricesPriceIdInterval$outboundSchema: z.ZodNativeEnum<
  typeof GetPricesPriceIdInterval
> = GetPricesPriceIdInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdInterval$ {
  /** @deprecated use `GetPricesPriceIdInterval$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdInterval$inboundSchema;
  /** @deprecated use `GetPricesPriceIdInterval$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdInterval$outboundSchema;
}

/** @internal */
export const GetPricesPriceIdBillingCycle$inboundSchema: z.ZodType<
  GetPricesPriceIdBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetPricesPriceIdInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetPricesPriceIdBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetPricesPriceIdBillingCycle$outboundSchema: z.ZodType<
  GetPricesPriceIdBillingCycle$Outbound,
  z.ZodTypeDef,
  GetPricesPriceIdBillingCycle
> = z.object({
  interval: GetPricesPriceIdInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdBillingCycle$ {
  /** @deprecated use `GetPricesPriceIdBillingCycle$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdBillingCycle$inboundSchema;
  /** @deprecated use `GetPricesPriceIdBillingCycle$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdBillingCycle$outboundSchema;
  /** @deprecated use `GetPricesPriceIdBillingCycle$Outbound` instead. */
  export type Outbound = GetPricesPriceIdBillingCycle$Outbound;
}

export function getPricesPriceIdBillingCycleToJSON(
  getPricesPriceIdBillingCycle: GetPricesPriceIdBillingCycle,
): string {
  return JSON.stringify(
    GetPricesPriceIdBillingCycle$outboundSchema.parse(
      getPricesPriceIdBillingCycle,
    ),
  );
}

export function getPricesPriceIdBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesPriceIdBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesPriceIdBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesPriceIdBillingCycle' from JSON`,
  );
}

/** @internal */
export const GetPricesPriceIdPricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetPricesPriceIdPricesInterval
> = z.nativeEnum(GetPricesPriceIdPricesInterval);

/** @internal */
export const GetPricesPriceIdPricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof GetPricesPriceIdPricesInterval
> = GetPricesPriceIdPricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdPricesInterval$ {
  /** @deprecated use `GetPricesPriceIdPricesInterval$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdPricesInterval$inboundSchema;
  /** @deprecated use `GetPricesPriceIdPricesInterval$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdPricesInterval$outboundSchema;
}

/** @internal */
export const GetPricesPriceIdTrialPeriod$inboundSchema: z.ZodType<
  GetPricesPriceIdTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: GetPricesPriceIdPricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type GetPricesPriceIdTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const GetPricesPriceIdTrialPeriod$outboundSchema: z.ZodType<
  GetPricesPriceIdTrialPeriod$Outbound,
  z.ZodTypeDef,
  GetPricesPriceIdTrialPeriod
> = z.object({
  interval: GetPricesPriceIdPricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdTrialPeriod$ {
  /** @deprecated use `GetPricesPriceIdTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdTrialPeriod$inboundSchema;
  /** @deprecated use `GetPricesPriceIdTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdTrialPeriod$outboundSchema;
  /** @deprecated use `GetPricesPriceIdTrialPeriod$Outbound` instead. */
  export type Outbound = GetPricesPriceIdTrialPeriod$Outbound;
}

export function getPricesPriceIdTrialPeriodToJSON(
  getPricesPriceIdTrialPeriod: GetPricesPriceIdTrialPeriod,
): string {
  return JSON.stringify(
    GetPricesPriceIdTrialPeriod$outboundSchema.parse(
      getPricesPriceIdTrialPeriod,
    ),
  );
}

export function getPricesPriceIdTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesPriceIdTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesPriceIdTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesPriceIdTrialPeriod' from JSON`,
  );
}

/** @internal */
export const GetPricesPriceIdUnitPrice$inboundSchema: z.ZodType<
  GetPricesPriceIdUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type GetPricesPriceIdUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const GetPricesPriceIdUnitPrice$outboundSchema: z.ZodType<
  GetPricesPriceIdUnitPrice$Outbound,
  z.ZodTypeDef,
  GetPricesPriceIdUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdUnitPrice$ {
  /** @deprecated use `GetPricesPriceIdUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdUnitPrice$inboundSchema;
  /** @deprecated use `GetPricesPriceIdUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdUnitPrice$outboundSchema;
  /** @deprecated use `GetPricesPriceIdUnitPrice$Outbound` instead. */
  export type Outbound = GetPricesPriceIdUnitPrice$Outbound;
}

export function getPricesPriceIdUnitPriceToJSON(
  getPricesPriceIdUnitPrice: GetPricesPriceIdUnitPrice,
): string {
  return JSON.stringify(
    GetPricesPriceIdUnitPrice$outboundSchema.parse(getPricesPriceIdUnitPrice),
  );
}

export function getPricesPriceIdUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesPriceIdUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesPriceIdUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesPriceIdUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetPricesPriceIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetPricesPriceIdStatus
> = z.nativeEnum(GetPricesPriceIdStatus);

/** @internal */
export const GetPricesPriceIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetPricesPriceIdStatus
> = GetPricesPriceIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdStatus$ {
  /** @deprecated use `GetPricesPriceIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdStatus$inboundSchema;
  /** @deprecated use `GetPricesPriceIdStatus$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdStatus$outboundSchema;
}

/** @internal */
export const GetPricesPriceIdCustomData$inboundSchema: z.ZodType<
  GetPricesPriceIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetPricesPriceIdCustomData$Outbound = {};

/** @internal */
export const GetPricesPriceIdCustomData$outboundSchema: z.ZodType<
  GetPricesPriceIdCustomData$Outbound,
  z.ZodTypeDef,
  GetPricesPriceIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdCustomData$ {
  /** @deprecated use `GetPricesPriceIdCustomData$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdCustomData$inboundSchema;
  /** @deprecated use `GetPricesPriceIdCustomData$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdCustomData$outboundSchema;
  /** @deprecated use `GetPricesPriceIdCustomData$Outbound` instead. */
  export type Outbound = GetPricesPriceIdCustomData$Outbound;
}

export function getPricesPriceIdCustomDataToJSON(
  getPricesPriceIdCustomData: GetPricesPriceIdCustomData,
): string {
  return JSON.stringify(
    GetPricesPriceIdCustomData$outboundSchema.parse(getPricesPriceIdCustomData),
  );
}

export function getPricesPriceIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesPriceIdCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesPriceIdCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesPriceIdCustomData' from JSON`,
  );
}

/** @internal */
export const GetPricesPriceIdResponseBody$inboundSchema: z.ZodType<
  GetPricesPriceIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetPricesPriceIdType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => GetPricesPriceIdBillingCycle$inboundSchema),
  trial_period: z.lazy(() => GetPricesPriceIdTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => GetPricesPriceIdUnitPrice$inboundSchema),
  status: GetPricesPriceIdStatus$inboundSchema,
  custom_data: z.lazy(() => GetPricesPriceIdCustomData$inboundSchema)
    .optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetPricesPriceIdResponseBody$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: GetPricesPriceIdBillingCycle$Outbound;
  trial_period: GetPricesPriceIdTrialPeriod$Outbound;
  unit_price: GetPricesPriceIdUnitPrice$Outbound;
  status: string;
  custom_data?: GetPricesPriceIdCustomData$Outbound | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetPricesPriceIdResponseBody$outboundSchema: z.ZodType<
  GetPricesPriceIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetPricesPriceIdResponseBody
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: GetPricesPriceIdType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => GetPricesPriceIdBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => GetPricesPriceIdTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => GetPricesPriceIdUnitPrice$outboundSchema),
  status: GetPricesPriceIdStatus$outboundSchema,
  customData: z.lazy(() => GetPricesPriceIdCustomData$outboundSchema)
    .optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPricesPriceIdResponseBody$ {
  /** @deprecated use `GetPricesPriceIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetPricesPriceIdResponseBody$inboundSchema;
  /** @deprecated use `GetPricesPriceIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetPricesPriceIdResponseBody$outboundSchema;
  /** @deprecated use `GetPricesPriceIdResponseBody$Outbound` instead. */
  export type Outbound = GetPricesPriceIdResponseBody$Outbound;
}

export function getPricesPriceIdResponseBodyToJSON(
  getPricesPriceIdResponseBody: GetPricesPriceIdResponseBody,
): string {
  return JSON.stringify(
    GetPricesPriceIdResponseBody$outboundSchema.parse(
      getPricesPriceIdResponseBody,
    ),
  );
}

export function getPricesPriceIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetPricesPriceIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPricesPriceIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPricesPriceIdResponseBody' from JSON`,
  );
}
