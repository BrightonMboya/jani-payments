/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PatchDiscountsDiscountIdStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchDiscountsDiscountIdStatus = ClosedEnum<
  typeof PatchDiscountsDiscountIdStatus
>;

export const PatchDiscountsDiscountIdType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PatchDiscountsDiscountIdType = ClosedEnum<
  typeof PatchDiscountsDiscountIdType
>;

/**
 * Any valid JSON value
 */
export type PatchDiscountsDiscountIdCustomData = {};

export type PatchDiscountsDiscountIdRequestBody = {
  status?: PatchDiscountsDiscountIdStatus | null | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount?: number | undefined;
  currencyCode?: string | undefined;
  type?: PatchDiscountsDiscountIdType | undefined;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PatchDiscountsDiscountIdCustomData | undefined;
  priceIds?: Array<string> | undefined;
};

export type PatchDiscountsDiscountIdRequest = {
  discountId: string;
  requestBody?: PatchDiscountsDiscountIdRequestBody | undefined;
};

export const PatchDiscountsDiscountIdDiscountsStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchDiscountsDiscountIdDiscountsStatus = ClosedEnum<
  typeof PatchDiscountsDiscountIdDiscountsStatus
>;

export const PatchDiscountsDiscountIdDiscountsType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PatchDiscountsDiscountIdDiscountsType = ClosedEnum<
  typeof PatchDiscountsDiscountIdDiscountsType
>;

/**
 * Any valid JSON value
 */
export type PatchDiscountsDiscountIdDiscountsCustomData = {};

/**
 * Updates a Discount by ID
 */
export type PatchDiscountsDiscountIdResponseBody = {
  id: string;
  status?: PatchDiscountsDiscountIdDiscountsStatus | null | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PatchDiscountsDiscountIdDiscountsType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PatchDiscountsDiscountIdDiscountsCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/** @internal */
export const PatchDiscountsDiscountIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchDiscountsDiscountIdStatus
> = z.nativeEnum(PatchDiscountsDiscountIdStatus);

/** @internal */
export const PatchDiscountsDiscountIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchDiscountsDiscountIdStatus
> = PatchDiscountsDiscountIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdStatus$ {
  /** @deprecated use `PatchDiscountsDiscountIdStatus$inboundSchema` instead. */
  export const inboundSchema = PatchDiscountsDiscountIdStatus$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdStatus$outboundSchema` instead. */
  export const outboundSchema = PatchDiscountsDiscountIdStatus$outboundSchema;
}

/** @internal */
export const PatchDiscountsDiscountIdType$inboundSchema: z.ZodNativeEnum<
  typeof PatchDiscountsDiscountIdType
> = z.nativeEnum(PatchDiscountsDiscountIdType);

/** @internal */
export const PatchDiscountsDiscountIdType$outboundSchema: z.ZodNativeEnum<
  typeof PatchDiscountsDiscountIdType
> = PatchDiscountsDiscountIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdType$ {
  /** @deprecated use `PatchDiscountsDiscountIdType$inboundSchema` instead. */
  export const inboundSchema = PatchDiscountsDiscountIdType$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdType$outboundSchema` instead. */
  export const outboundSchema = PatchDiscountsDiscountIdType$outboundSchema;
}

/** @internal */
export const PatchDiscountsDiscountIdCustomData$inboundSchema: z.ZodType<
  PatchDiscountsDiscountIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PatchDiscountsDiscountIdCustomData$Outbound = {};

/** @internal */
export const PatchDiscountsDiscountIdCustomData$outboundSchema: z.ZodType<
  PatchDiscountsDiscountIdCustomData$Outbound,
  z.ZodTypeDef,
  PatchDiscountsDiscountIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdCustomData$ {
  /** @deprecated use `PatchDiscountsDiscountIdCustomData$inboundSchema` instead. */
  export const inboundSchema = PatchDiscountsDiscountIdCustomData$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchDiscountsDiscountIdCustomData$outboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdCustomData$Outbound` instead. */
  export type Outbound = PatchDiscountsDiscountIdCustomData$Outbound;
}

export function patchDiscountsDiscountIdCustomDataToJSON(
  patchDiscountsDiscountIdCustomData: PatchDiscountsDiscountIdCustomData,
): string {
  return JSON.stringify(
    PatchDiscountsDiscountIdCustomData$outboundSchema.parse(
      patchDiscountsDiscountIdCustomData,
    ),
  );
}

export function patchDiscountsDiscountIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchDiscountsDiscountIdCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchDiscountsDiscountIdCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchDiscountsDiscountIdCustomData' from JSON`,
  );
}

/** @internal */
export const PatchDiscountsDiscountIdRequestBody$inboundSchema: z.ZodType<
  PatchDiscountsDiscountIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.nullable(PatchDiscountsDiscountIdStatus$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number().optional(),
  currency_code: z.string().optional(),
  type: PatchDiscountsDiscountIdType$inboundSchema.optional(),
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => PatchDiscountsDiscountIdCustomData$inboundSchema)
    .optional(),
  price_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "price_ids": "priceIds",
  });
});

/** @internal */
export type PatchDiscountsDiscountIdRequestBody$Outbound = {
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount?: number | undefined;
  currency_code?: string | undefined;
  type?: string | undefined;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: PatchDiscountsDiscountIdCustomData$Outbound | undefined;
  price_ids?: Array<string> | undefined;
};

/** @internal */
export const PatchDiscountsDiscountIdRequestBody$outboundSchema: z.ZodType<
  PatchDiscountsDiscountIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchDiscountsDiscountIdRequestBody
> = z.object({
  status: z.nullable(PatchDiscountsDiscountIdStatus$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number().optional(),
  currencyCode: z.string().optional(),
  type: PatchDiscountsDiscountIdType$outboundSchema.optional(),
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() => PatchDiscountsDiscountIdCustomData$outboundSchema)
    .optional(),
  priceIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    priceIds: "price_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdRequestBody$ {
  /** @deprecated use `PatchDiscountsDiscountIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchDiscountsDiscountIdRequestBody$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchDiscountsDiscountIdRequestBody$outboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdRequestBody$Outbound` instead. */
  export type Outbound = PatchDiscountsDiscountIdRequestBody$Outbound;
}

export function patchDiscountsDiscountIdRequestBodyToJSON(
  patchDiscountsDiscountIdRequestBody: PatchDiscountsDiscountIdRequestBody,
): string {
  return JSON.stringify(
    PatchDiscountsDiscountIdRequestBody$outboundSchema.parse(
      patchDiscountsDiscountIdRequestBody,
    ),
  );
}

export function patchDiscountsDiscountIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchDiscountsDiscountIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchDiscountsDiscountIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchDiscountsDiscountIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchDiscountsDiscountIdRequest$inboundSchema: z.ZodType<
  PatchDiscountsDiscountIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  discount_id: z.string(),
  RequestBody: z.lazy(() => PatchDiscountsDiscountIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "discount_id": "discountId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchDiscountsDiscountIdRequest$Outbound = {
  discount_id: string;
  RequestBody?: PatchDiscountsDiscountIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchDiscountsDiscountIdRequest$outboundSchema: z.ZodType<
  PatchDiscountsDiscountIdRequest$Outbound,
  z.ZodTypeDef,
  PatchDiscountsDiscountIdRequest
> = z.object({
  discountId: z.string(),
  requestBody: z.lazy(() => PatchDiscountsDiscountIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    discountId: "discount_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdRequest$ {
  /** @deprecated use `PatchDiscountsDiscountIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchDiscountsDiscountIdRequest$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchDiscountsDiscountIdRequest$outboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdRequest$Outbound` instead. */
  export type Outbound = PatchDiscountsDiscountIdRequest$Outbound;
}

export function patchDiscountsDiscountIdRequestToJSON(
  patchDiscountsDiscountIdRequest: PatchDiscountsDiscountIdRequest,
): string {
  return JSON.stringify(
    PatchDiscountsDiscountIdRequest$outboundSchema.parse(
      patchDiscountsDiscountIdRequest,
    ),
  );
}

export function patchDiscountsDiscountIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchDiscountsDiscountIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchDiscountsDiscountIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchDiscountsDiscountIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchDiscountsDiscountIdDiscountsStatus$inboundSchema:
  z.ZodNativeEnum<typeof PatchDiscountsDiscountIdDiscountsStatus> = z
    .nativeEnum(PatchDiscountsDiscountIdDiscountsStatus);

/** @internal */
export const PatchDiscountsDiscountIdDiscountsStatus$outboundSchema:
  z.ZodNativeEnum<typeof PatchDiscountsDiscountIdDiscountsStatus> =
    PatchDiscountsDiscountIdDiscountsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdDiscountsStatus$ {
  /** @deprecated use `PatchDiscountsDiscountIdDiscountsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchDiscountsDiscountIdDiscountsStatus$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdDiscountsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchDiscountsDiscountIdDiscountsStatus$outboundSchema;
}

/** @internal */
export const PatchDiscountsDiscountIdDiscountsType$inboundSchema:
  z.ZodNativeEnum<typeof PatchDiscountsDiscountIdDiscountsType> = z.nativeEnum(
    PatchDiscountsDiscountIdDiscountsType,
  );

/** @internal */
export const PatchDiscountsDiscountIdDiscountsType$outboundSchema:
  z.ZodNativeEnum<typeof PatchDiscountsDiscountIdDiscountsType> =
    PatchDiscountsDiscountIdDiscountsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdDiscountsType$ {
  /** @deprecated use `PatchDiscountsDiscountIdDiscountsType$inboundSchema` instead. */
  export const inboundSchema =
    PatchDiscountsDiscountIdDiscountsType$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdDiscountsType$outboundSchema` instead. */
  export const outboundSchema =
    PatchDiscountsDiscountIdDiscountsType$outboundSchema;
}

/** @internal */
export const PatchDiscountsDiscountIdDiscountsCustomData$inboundSchema:
  z.ZodType<
    PatchDiscountsDiscountIdDiscountsCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchDiscountsDiscountIdDiscountsCustomData$Outbound = {};

/** @internal */
export const PatchDiscountsDiscountIdDiscountsCustomData$outboundSchema:
  z.ZodType<
    PatchDiscountsDiscountIdDiscountsCustomData$Outbound,
    z.ZodTypeDef,
    PatchDiscountsDiscountIdDiscountsCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdDiscountsCustomData$ {
  /** @deprecated use `PatchDiscountsDiscountIdDiscountsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchDiscountsDiscountIdDiscountsCustomData$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdDiscountsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchDiscountsDiscountIdDiscountsCustomData$outboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdDiscountsCustomData$Outbound` instead. */
  export type Outbound = PatchDiscountsDiscountIdDiscountsCustomData$Outbound;
}

export function patchDiscountsDiscountIdDiscountsCustomDataToJSON(
  patchDiscountsDiscountIdDiscountsCustomData:
    PatchDiscountsDiscountIdDiscountsCustomData,
): string {
  return JSON.stringify(
    PatchDiscountsDiscountIdDiscountsCustomData$outboundSchema.parse(
      patchDiscountsDiscountIdDiscountsCustomData,
    ),
  );
}

export function patchDiscountsDiscountIdDiscountsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchDiscountsDiscountIdDiscountsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchDiscountsDiscountIdDiscountsCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchDiscountsDiscountIdDiscountsCustomData' from JSON`,
  );
}

/** @internal */
export const PatchDiscountsDiscountIdResponseBody$inboundSchema: z.ZodType<
  PatchDiscountsDiscountIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(PatchDiscountsDiscountIdDiscountsStatus$inboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: PatchDiscountsDiscountIdDiscountsType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    PatchDiscountsDiscountIdDiscountsCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type PatchDiscountsDiscountIdResponseBody$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data: PatchDiscountsDiscountIdDiscountsCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PatchDiscountsDiscountIdResponseBody$outboundSchema: z.ZodType<
  PatchDiscountsDiscountIdResponseBody$Outbound,
  z.ZodTypeDef,
  PatchDiscountsDiscountIdResponseBody
> = z.object({
  id: z.string(),
  status: z.nullable(PatchDiscountsDiscountIdDiscountsStatus$outboundSchema)
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: PatchDiscountsDiscountIdDiscountsType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PatchDiscountsDiscountIdDiscountsCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchDiscountsDiscountIdResponseBody$ {
  /** @deprecated use `PatchDiscountsDiscountIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchDiscountsDiscountIdResponseBody$inboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchDiscountsDiscountIdResponseBody$outboundSchema;
  /** @deprecated use `PatchDiscountsDiscountIdResponseBody$Outbound` instead. */
  export type Outbound = PatchDiscountsDiscountIdResponseBody$Outbound;
}

export function patchDiscountsDiscountIdResponseBodyToJSON(
  patchDiscountsDiscountIdResponseBody: PatchDiscountsDiscountIdResponseBody,
): string {
  return JSON.stringify(
    PatchDiscountsDiscountIdResponseBody$outboundSchema.parse(
      patchDiscountsDiscountIdResponseBody,
    ),
  );
}

export function patchDiscountsDiscountIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchDiscountsDiscountIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchDiscountsDiscountIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchDiscountsDiscountIdResponseBody' from JSON`,
  );
}
