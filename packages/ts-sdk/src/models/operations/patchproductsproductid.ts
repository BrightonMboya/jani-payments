/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PatchProductsProductIdStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchProductsProductIdStatus = ClosedEnum<
  typeof PatchProductsProductIdStatus
>;

/**
 * Any valid JSON value
 */
export type PatchProductsProductIdCustomData = {};

export type PatchProductsProductIdRequestBody = {
  name?: string | undefined;
  description?: string | undefined;
  status?: PatchProductsProductIdStatus | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PatchProductsProductIdCustomData | undefined;
};

export type PatchProductsProductIdRequest = {
  productId: string;
  requestBody?: PatchProductsProductIdRequestBody | undefined;
};

export const PatchProductsProductIdProductsStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchProductsProductIdProductsStatus = ClosedEnum<
  typeof PatchProductsProductIdProductsStatus
>;

/**
 * Any valid JSON value
 */
export type PatchProductsProductIdProductsCustomData = {};

/**
 * Returns the updated Product
 */
export type PatchProductsProductIdResponseBody = {
  id: string;
  name: string;
  description: string;
  status: PatchProductsProductIdProductsStatus;
  createdAt: string;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData: PatchProductsProductIdProductsCustomData;
};

/** @internal */
export const PatchProductsProductIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchProductsProductIdStatus
> = z.nativeEnum(PatchProductsProductIdStatus);

/** @internal */
export const PatchProductsProductIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchProductsProductIdStatus
> = PatchProductsProductIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProductsProductIdStatus$ {
  /** @deprecated use `PatchProductsProductIdStatus$inboundSchema` instead. */
  export const inboundSchema = PatchProductsProductIdStatus$inboundSchema;
  /** @deprecated use `PatchProductsProductIdStatus$outboundSchema` instead. */
  export const outboundSchema = PatchProductsProductIdStatus$outboundSchema;
}

/** @internal */
export const PatchProductsProductIdCustomData$inboundSchema: z.ZodType<
  PatchProductsProductIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PatchProductsProductIdCustomData$Outbound = {};

/** @internal */
export const PatchProductsProductIdCustomData$outboundSchema: z.ZodType<
  PatchProductsProductIdCustomData$Outbound,
  z.ZodTypeDef,
  PatchProductsProductIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProductsProductIdCustomData$ {
  /** @deprecated use `PatchProductsProductIdCustomData$inboundSchema` instead. */
  export const inboundSchema = PatchProductsProductIdCustomData$inboundSchema;
  /** @deprecated use `PatchProductsProductIdCustomData$outboundSchema` instead. */
  export const outboundSchema = PatchProductsProductIdCustomData$outboundSchema;
  /** @deprecated use `PatchProductsProductIdCustomData$Outbound` instead. */
  export type Outbound = PatchProductsProductIdCustomData$Outbound;
}

export function patchProductsProductIdCustomDataToJSON(
  patchProductsProductIdCustomData: PatchProductsProductIdCustomData,
): string {
  return JSON.stringify(
    PatchProductsProductIdCustomData$outboundSchema.parse(
      patchProductsProductIdCustomData,
    ),
  );
}

export function patchProductsProductIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchProductsProductIdCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchProductsProductIdCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchProductsProductIdCustomData' from JSON`,
  );
}

/** @internal */
export const PatchProductsProductIdRequestBody$inboundSchema: z.ZodType<
  PatchProductsProductIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  status: PatchProductsProductIdStatus$inboundSchema.optional(),
  custom_data: z.lazy(() => PatchProductsProductIdCustomData$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type PatchProductsProductIdRequestBody$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  status?: string | undefined;
  custom_data?: PatchProductsProductIdCustomData$Outbound | undefined;
};

/** @internal */
export const PatchProductsProductIdRequestBody$outboundSchema: z.ZodType<
  PatchProductsProductIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchProductsProductIdRequestBody
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  status: PatchProductsProductIdStatus$outboundSchema.optional(),
  customData: z.lazy(() => PatchProductsProductIdCustomData$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProductsProductIdRequestBody$ {
  /** @deprecated use `PatchProductsProductIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchProductsProductIdRequestBody$inboundSchema;
  /** @deprecated use `PatchProductsProductIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchProductsProductIdRequestBody$outboundSchema;
  /** @deprecated use `PatchProductsProductIdRequestBody$Outbound` instead. */
  export type Outbound = PatchProductsProductIdRequestBody$Outbound;
}

export function patchProductsProductIdRequestBodyToJSON(
  patchProductsProductIdRequestBody: PatchProductsProductIdRequestBody,
): string {
  return JSON.stringify(
    PatchProductsProductIdRequestBody$outboundSchema.parse(
      patchProductsProductIdRequestBody,
    ),
  );
}

export function patchProductsProductIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchProductsProductIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchProductsProductIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchProductsProductIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchProductsProductIdRequest$inboundSchema: z.ZodType<
  PatchProductsProductIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  RequestBody: z.lazy(() => PatchProductsProductIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchProductsProductIdRequest$Outbound = {
  product_id: string;
  RequestBody?: PatchProductsProductIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchProductsProductIdRequest$outboundSchema: z.ZodType<
  PatchProductsProductIdRequest$Outbound,
  z.ZodTypeDef,
  PatchProductsProductIdRequest
> = z.object({
  productId: z.string(),
  requestBody: z.lazy(() => PatchProductsProductIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProductsProductIdRequest$ {
  /** @deprecated use `PatchProductsProductIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchProductsProductIdRequest$inboundSchema;
  /** @deprecated use `PatchProductsProductIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchProductsProductIdRequest$outboundSchema;
  /** @deprecated use `PatchProductsProductIdRequest$Outbound` instead. */
  export type Outbound = PatchProductsProductIdRequest$Outbound;
}

export function patchProductsProductIdRequestToJSON(
  patchProductsProductIdRequest: PatchProductsProductIdRequest,
): string {
  return JSON.stringify(
    PatchProductsProductIdRequest$outboundSchema.parse(
      patchProductsProductIdRequest,
    ),
  );
}

export function patchProductsProductIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchProductsProductIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchProductsProductIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchProductsProductIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchProductsProductIdProductsStatus$inboundSchema:
  z.ZodNativeEnum<typeof PatchProductsProductIdProductsStatus> = z.nativeEnum(
    PatchProductsProductIdProductsStatus,
  );

/** @internal */
export const PatchProductsProductIdProductsStatus$outboundSchema:
  z.ZodNativeEnum<typeof PatchProductsProductIdProductsStatus> =
    PatchProductsProductIdProductsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProductsProductIdProductsStatus$ {
  /** @deprecated use `PatchProductsProductIdProductsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchProductsProductIdProductsStatus$inboundSchema;
  /** @deprecated use `PatchProductsProductIdProductsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchProductsProductIdProductsStatus$outboundSchema;
}

/** @internal */
export const PatchProductsProductIdProductsCustomData$inboundSchema: z.ZodType<
  PatchProductsProductIdProductsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PatchProductsProductIdProductsCustomData$Outbound = {};

/** @internal */
export const PatchProductsProductIdProductsCustomData$outboundSchema: z.ZodType<
  PatchProductsProductIdProductsCustomData$Outbound,
  z.ZodTypeDef,
  PatchProductsProductIdProductsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProductsProductIdProductsCustomData$ {
  /** @deprecated use `PatchProductsProductIdProductsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchProductsProductIdProductsCustomData$inboundSchema;
  /** @deprecated use `PatchProductsProductIdProductsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchProductsProductIdProductsCustomData$outboundSchema;
  /** @deprecated use `PatchProductsProductIdProductsCustomData$Outbound` instead. */
  export type Outbound = PatchProductsProductIdProductsCustomData$Outbound;
}

export function patchProductsProductIdProductsCustomDataToJSON(
  patchProductsProductIdProductsCustomData:
    PatchProductsProductIdProductsCustomData,
): string {
  return JSON.stringify(
    PatchProductsProductIdProductsCustomData$outboundSchema.parse(
      patchProductsProductIdProductsCustomData,
    ),
  );
}

export function patchProductsProductIdProductsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchProductsProductIdProductsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchProductsProductIdProductsCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchProductsProductIdProductsCustomData' from JSON`,
  );
}

/** @internal */
export const PatchProductsProductIdResponseBody$inboundSchema: z.ZodType<
  PatchProductsProductIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status: PatchProductsProductIdProductsStatus$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  custom_data: z.lazy(() =>
    PatchProductsProductIdProductsCustomData$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type PatchProductsProductIdResponseBody$Outbound = {
  id: string;
  name: string;
  description: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  custom_data: PatchProductsProductIdProductsCustomData$Outbound;
};

/** @internal */
export const PatchProductsProductIdResponseBody$outboundSchema: z.ZodType<
  PatchProductsProductIdResponseBody$Outbound,
  z.ZodTypeDef,
  PatchProductsProductIdResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status: PatchProductsProductIdProductsStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  customData: z.lazy(() =>
    PatchProductsProductIdProductsCustomData$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProductsProductIdResponseBody$ {
  /** @deprecated use `PatchProductsProductIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = PatchProductsProductIdResponseBody$inboundSchema;
  /** @deprecated use `PatchProductsProductIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchProductsProductIdResponseBody$outboundSchema;
  /** @deprecated use `PatchProductsProductIdResponseBody$Outbound` instead. */
  export type Outbound = PatchProductsProductIdResponseBody$Outbound;
}

export function patchProductsProductIdResponseBodyToJSON(
  patchProductsProductIdResponseBody: PatchProductsProductIdResponseBody,
): string {
  return JSON.stringify(
    PatchProductsProductIdResponseBody$outboundSchema.parse(
      patchProductsProductIdResponseBody,
    ),
  );
}

export function patchProductsProductIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchProductsProductIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchProductsProductIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchProductsProductIdResponseBody' from JSON`,
  );
}
