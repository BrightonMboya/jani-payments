/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const EffectiveFrom = {
  Immediately: "immediately",
  NextBillingPeriod: "next_billing_period",
} as const;
export type EffectiveFrom = ClosedEnum<typeof EffectiveFrom>;

export type SubscriptionCancelSubscriptionRequestBody = {
  effectiveFrom?: EffectiveFrom | undefined;
};

export type SubscriptionCancelSubscriptionRequest = {
  subscriptionId: string;
  requestBody?: SubscriptionCancelSubscriptionRequestBody | undefined;
};

export const SubscriptionCancelSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionCancelSubscriptionInterval = ClosedEnum<
  typeof SubscriptionCancelSubscriptionInterval
>;

export type SubscriptionCancelSubscriptionPaymentTerms = {
  interval?: SubscriptionCancelSubscriptionInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type SubscriptionCancelSubscriptionBillingDetails = {
  paymentTerms: SubscriptionCancelSubscriptionPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type SubscriptionCancelSubscriptionCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type SubscriptionCancelSubscriptionBillingCycle = {
  frequency: number;
  interval: string;
};

export const SubscriptionCancelSubscriptionAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type SubscriptionCancelSubscriptionAction = ClosedEnum<
  typeof SubscriptionCancelSubscriptionAction
>;

export const SubscriptionCancelSubscriptionStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type SubscriptionCancelSubscriptionStatus = ClosedEnum<
  typeof SubscriptionCancelSubscriptionStatus
>;

export type SubscriptionCancelSubscriptionScheduledChange = {
  id: string;
  subscriptionId: string;
  action: SubscriptionCancelSubscriptionAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: SubscriptionCancelSubscriptionStatus;
};

export const SubscriptionCancelSubscriptionSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type SubscriptionCancelSubscriptionSubscriptionStatus = ClosedEnum<
  typeof SubscriptionCancelSubscriptionSubscriptionStatus
>;

export const SubscriptionCancelSubscriptionSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type SubscriptionCancelSubscriptionSubscriptionType = ClosedEnum<
  typeof SubscriptionCancelSubscriptionSubscriptionType
>;

export const SubscriptionCancelSubscriptionSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionCancelSubscriptionSubscriptionInterval = ClosedEnum<
  typeof SubscriptionCancelSubscriptionSubscriptionInterval
>;

export type SubscriptionCancelSubscriptionSubscriptionBillingCycle = {
  interval: SubscriptionCancelSubscriptionSubscriptionInterval;
  frequency: number;
};

export const SubscriptionCancelSubscriptionSubscriptionResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionCancelSubscriptionSubscriptionResponseInterval =
  ClosedEnum<typeof SubscriptionCancelSubscriptionSubscriptionResponseInterval>;

export type SubscriptionCancelSubscriptionTrialPeriod = {
  interval: SubscriptionCancelSubscriptionSubscriptionResponseInterval;
  frequency: number;
};

export type SubscriptionCancelSubscriptionUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const SubscriptionCancelSubscriptionSubscriptionResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionCancelSubscriptionSubscriptionResponse200Status =
  ClosedEnum<
    typeof SubscriptionCancelSubscriptionSubscriptionResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type SubscriptionCancelSubscriptionSubscriptionResponseCustomData = {};

export type SubscriptionCancelSubscriptionPrice = {
  productId: string;
  description?: string | null | undefined;
  type: SubscriptionCancelSubscriptionSubscriptionType;
  name: string;
  billingCycle: SubscriptionCancelSubscriptionSubscriptionBillingCycle;
  trialPeriod: SubscriptionCancelSubscriptionTrialPeriod;
  unitPrice: SubscriptionCancelSubscriptionUnitPrice;
  status: SubscriptionCancelSubscriptionSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | SubscriptionCancelSubscriptionSubscriptionResponseCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type SubscriptionCancelSubscriptionItems = {
  status: SubscriptionCancelSubscriptionSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: SubscriptionCancelSubscriptionPrice;
};

/**
 * Any valid JSON value
 */
export type SubscriptionCancelSubscriptionCustomData = {};

export type SubscriptionCancelSubscriptionManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const SubscriptionCancelSubscriptionSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionCancelSubscriptionSubscriptionResponseStatus =
  ClosedEnum<typeof SubscriptionCancelSubscriptionSubscriptionResponseStatus>;

export const SubscriptionCancelSubscriptionType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type SubscriptionCancelSubscriptionType = ClosedEnum<
  typeof SubscriptionCancelSubscriptionType
>;

/**
 * Any valid JSON value
 */
export type SubscriptionCancelSubscriptionSubscriptionCustomData = {};

export type SubscriptionCancelSubscriptionDiscount = {
  id: string;
  status?:
    | SubscriptionCancelSubscriptionSubscriptionResponseStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: SubscriptionCancelSubscriptionType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: SubscriptionCancelSubscriptionSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type SubscriptionCancelSubscriptionData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: SubscriptionCancelSubscriptionBillingDetails;
  currentBillingPeriod: SubscriptionCancelSubscriptionCurrentBillingPeriod;
  billingCycle: SubscriptionCancelSubscriptionBillingCycle;
  scheduledChange: Array<SubscriptionCancelSubscriptionScheduledChange>;
  items: Array<SubscriptionCancelSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionCancelSubscriptionCustomData | undefined;
  managementUrls: SubscriptionCancelSubscriptionManagementUrls;
  discount?: SubscriptionCancelSubscriptionDiscount | null | undefined;
};

/**
 * Cancels an active subscription given its id
 */
export type SubscriptionCancelSubscriptionResponseBody = {
  data: SubscriptionCancelSubscriptionData;
};

/** @internal */
export const EffectiveFrom$inboundSchema: z.ZodNativeEnum<
  typeof EffectiveFrom
> = z.nativeEnum(EffectiveFrom);

/** @internal */
export const EffectiveFrom$outboundSchema: z.ZodNativeEnum<
  typeof EffectiveFrom
> = EffectiveFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EffectiveFrom$ {
  /** @deprecated use `EffectiveFrom$inboundSchema` instead. */
  export const inboundSchema = EffectiveFrom$inboundSchema;
  /** @deprecated use `EffectiveFrom$outboundSchema` instead. */
  export const outboundSchema = EffectiveFrom$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionRequestBody$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  effective_from: EffectiveFrom$inboundSchema.default("next_billing_period"),
}).transform((v) => {
  return remap$(v, {
    "effective_from": "effectiveFrom",
  });
});

/** @internal */
export type SubscriptionCancelSubscriptionRequestBody$Outbound = {
  effective_from: string;
};

/** @internal */
export const SubscriptionCancelSubscriptionRequestBody$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionRequestBody$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionRequestBody
  > = z.object({
    effectiveFrom: EffectiveFrom$outboundSchema.default("next_billing_period"),
  }).transform((v) => {
    return remap$(v, {
      effectiveFrom: "effective_from",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionRequestBody$ {
  /** @deprecated use `SubscriptionCancelSubscriptionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionRequestBody$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionRequestBody$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionRequestBody$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionRequestBody$Outbound;
}

export function subscriptionCancelSubscriptionRequestBodyToJSON(
  subscriptionCancelSubscriptionRequestBody:
    SubscriptionCancelSubscriptionRequestBody,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionRequestBody$outboundSchema.parse(
      subscriptionCancelSubscriptionRequestBody,
    ),
  );
}

export function subscriptionCancelSubscriptionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionRequestBody' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionRequest$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
  RequestBody: z.lazy(() =>
    SubscriptionCancelSubscriptionRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SubscriptionCancelSubscriptionRequest$Outbound = {
  subscription_id: string;
  RequestBody?: SubscriptionCancelSubscriptionRequestBody$Outbound | undefined;
};

/** @internal */
export const SubscriptionCancelSubscriptionRequest$outboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionCancelSubscriptionRequest
> = z.object({
  subscriptionId: z.string(),
  requestBody: z.lazy(() =>
    SubscriptionCancelSubscriptionRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionRequest$ {
  /** @deprecated use `SubscriptionCancelSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionRequest$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionRequest$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionRequest$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionRequest$Outbound;
}

export function subscriptionCancelSubscriptionRequestToJSON(
  subscriptionCancelSubscriptionRequest: SubscriptionCancelSubscriptionRequest,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionRequest$outboundSchema.parse(
      subscriptionCancelSubscriptionRequest,
    ),
  );
}

export function subscriptionCancelSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCancelSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCancelSubscriptionRequest' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionInterval> = z.nativeEnum(
    SubscriptionCancelSubscriptionInterval,
  );

/** @internal */
export const SubscriptionCancelSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionInterval> =
    SubscriptionCancelSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionInterval$ {
  /** @deprecated use `SubscriptionCancelSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionPaymentTerms$inboundSchema:
  z.ZodType<SubscriptionCancelSubscriptionPaymentTerms, z.ZodTypeDef, unknown> =
    z.object({
      interval: z.nullable(SubscriptionCancelSubscriptionInterval$inboundSchema)
        .optional(),
      frequency: z.nullable(z.number()).optional(),
    });

/** @internal */
export type SubscriptionCancelSubscriptionPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const SubscriptionCancelSubscriptionPaymentTerms$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionPaymentTerms$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionPaymentTerms
  > = z.object({
    interval: z.nullable(SubscriptionCancelSubscriptionInterval$outboundSchema)
      .optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionPaymentTerms$ {
  /** @deprecated use `SubscriptionCancelSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionPaymentTerms$Outbound;
}

export function subscriptionCancelSubscriptionPaymentTermsToJSON(
  subscriptionCancelSubscriptionPaymentTerms:
    SubscriptionCancelSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionPaymentTerms$outboundSchema.parse(
      subscriptionCancelSubscriptionPaymentTerms,
    ),
  );
}

export function subscriptionCancelSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionPaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionBillingDetails$inboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      SubscriptionCancelSubscriptionPaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type SubscriptionCancelSubscriptionBillingDetails$Outbound = {
  payment_terms: SubscriptionCancelSubscriptionPaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const SubscriptionCancelSubscriptionBillingDetails$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionBillingDetails$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      SubscriptionCancelSubscriptionPaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionBillingDetails$ {
  /** @deprecated use `SubscriptionCancelSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionBillingDetails$Outbound;
}

export function subscriptionCancelSubscriptionBillingDetailsToJSON(
  subscriptionCancelSubscriptionBillingDetails:
    SubscriptionCancelSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionBillingDetails$outboundSchema.parse(
      subscriptionCancelSubscriptionBillingDetails,
    ),
  );
}

export function subscriptionCancelSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string()),
    ends_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type SubscriptionCancelSubscriptionCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const SubscriptionCancelSubscriptionCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.string()),
    endsAt: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionCurrentBillingPeriod$ {
  /** @deprecated use `SubscriptionCancelSubscriptionCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    SubscriptionCancelSubscriptionCurrentBillingPeriod$Outbound;
}

export function subscriptionCancelSubscriptionCurrentBillingPeriodToJSON(
  subscriptionCancelSubscriptionCurrentBillingPeriod:
    SubscriptionCancelSubscriptionCurrentBillingPeriod,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionCurrentBillingPeriod$outboundSchema.parse(
      subscriptionCancelSubscriptionCurrentBillingPeriod,
    ),
  );
}

export function subscriptionCancelSubscriptionCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionBillingCycle$inboundSchema:
  z.ZodType<SubscriptionCancelSubscriptionBillingCycle, z.ZodTypeDef, unknown> =
    z.object({
      frequency: z.number().int(),
      interval: z.string(),
    });

/** @internal */
export type SubscriptionCancelSubscriptionBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const SubscriptionCancelSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionCancelSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionBillingCycle$Outbound;
}

export function subscriptionCancelSubscriptionBillingCycleToJSON(
  subscriptionCancelSubscriptionBillingCycle:
    SubscriptionCancelSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionCancelSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionCancelSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionAction$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionAction> = z.nativeEnum(
    SubscriptionCancelSubscriptionAction,
  );

/** @internal */
export const SubscriptionCancelSubscriptionAction$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionAction> =
    SubscriptionCancelSubscriptionAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionAction$ {
  /** @deprecated use `SubscriptionCancelSubscriptionAction$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionAction$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionAction$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionAction$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionStatus> = z.nativeEnum(
    SubscriptionCancelSubscriptionStatus,
  );

/** @internal */
export const SubscriptionCancelSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionStatus> =
    SubscriptionCancelSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionStatus$ {
  /** @deprecated use `SubscriptionCancelSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionScheduledChange$inboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: SubscriptionCancelSubscriptionAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()).optional(),
    status: SubscriptionCancelSubscriptionStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type SubscriptionCancelSubscriptionScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const SubscriptionCancelSubscriptionScheduledChange$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionScheduledChange$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: SubscriptionCancelSubscriptionAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()).optional(),
    status: SubscriptionCancelSubscriptionStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionScheduledChange$ {
  /** @deprecated use `SubscriptionCancelSubscriptionScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionScheduledChange$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionScheduledChange$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionScheduledChange$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionScheduledChange$Outbound;
}

export function subscriptionCancelSubscriptionScheduledChangeToJSON(
  subscriptionCancelSubscriptionScheduledChange:
    SubscriptionCancelSubscriptionScheduledChange,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionScheduledChange$outboundSchema.parse(
      subscriptionCancelSubscriptionScheduledChange,
    ),
  );
}

export function subscriptionCancelSubscriptionScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionScheduledChange' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionSubscriptionStatus> = z
    .nativeEnum(SubscriptionCancelSubscriptionSubscriptionStatus);

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionSubscriptionStatus> =
    SubscriptionCancelSubscriptionSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionStatus$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionType$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionSubscriptionType> = z
    .nativeEnum(SubscriptionCancelSubscriptionSubscriptionType);

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionType$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionSubscriptionType> =
    SubscriptionCancelSubscriptionSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionType$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionSubscriptionInterval> = z
    .nativeEnum(SubscriptionCancelSubscriptionSubscriptionInterval);

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCancelSubscriptionSubscriptionInterval> =
    SubscriptionCancelSubscriptionSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionInterval$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: SubscriptionCancelSubscriptionSubscriptionInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type SubscriptionCancelSubscriptionSubscriptionBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionSubscriptionBillingCycle
  > = z.object({
    interval: SubscriptionCancelSubscriptionSubscriptionInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound =
    SubscriptionCancelSubscriptionSubscriptionBillingCycle$Outbound;
}

export function subscriptionCancelSubscriptionSubscriptionBillingCycleToJSON(
  subscriptionCancelSubscriptionSubscriptionBillingCycle:
    SubscriptionCancelSubscriptionSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionCancelSubscriptionSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionCancelSubscriptionSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionSubscriptionBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCancelSubscriptionSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionCancelSubscriptionSubscriptionResponseInterval
  > = z.nativeEnum(SubscriptionCancelSubscriptionSubscriptionResponseInterval);

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionCancelSubscriptionSubscriptionResponseInterval
  > = SubscriptionCancelSubscriptionSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionResponseInterval$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionTrialPeriod$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval:
    SubscriptionCancelSubscriptionSubscriptionResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type SubscriptionCancelSubscriptionTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionCancelSubscriptionTrialPeriod$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionTrialPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionTrialPeriod
  > = z.object({
    interval:
      SubscriptionCancelSubscriptionSubscriptionResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionTrialPeriod$ {
  /** @deprecated use `SubscriptionCancelSubscriptionTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionTrialPeriod$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionTrialPeriod$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionTrialPeriod$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionTrialPeriod$Outbound;
}

export function subscriptionCancelSubscriptionTrialPeriodToJSON(
  subscriptionCancelSubscriptionTrialPeriod:
    SubscriptionCancelSubscriptionTrialPeriod,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionTrialPeriod$outboundSchema.parse(
      subscriptionCancelSubscriptionTrialPeriod,
    ),
  );
}

export function subscriptionCancelSubscriptionTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionTrialPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionUnitPrice$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type SubscriptionCancelSubscriptionUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const SubscriptionCancelSubscriptionUnitPrice$outboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionUnitPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionCancelSubscriptionUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionUnitPrice$ {
  /** @deprecated use `SubscriptionCancelSubscriptionUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionUnitPrice$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionUnitPrice$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionUnitPrice$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionUnitPrice$Outbound;
}

export function subscriptionCancelSubscriptionUnitPriceToJSON(
  subscriptionCancelSubscriptionUnitPrice:
    SubscriptionCancelSubscriptionUnitPrice,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionUnitPrice$outboundSchema.parse(
      subscriptionCancelSubscriptionUnitPrice,
    ),
  );
}

export function subscriptionCancelSubscriptionUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionUnitPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionCancelSubscriptionSubscriptionResponse200Status
  > = z.nativeEnum(SubscriptionCancelSubscriptionSubscriptionResponse200Status);

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionCancelSubscriptionSubscriptionResponse200Status
  > = SubscriptionCancelSubscriptionSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionResponse200Status$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionCancelSubscriptionSubscriptionResponseCustomData$Outbound =
  {};

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionResponseCustomData$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData$Outbound;
}

export function subscriptionCancelSubscriptionSubscriptionResponseCustomDataToJSON(
  subscriptionCancelSubscriptionSubscriptionResponseCustomData:
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData$outboundSchema
      .parse(subscriptionCancelSubscriptionSubscriptionResponseCustomData),
  );
}

export function subscriptionCancelSubscriptionSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionSubscriptionResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCancelSubscriptionSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionPrice$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionCancelSubscriptionSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    SubscriptionCancelSubscriptionSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    SubscriptionCancelSubscriptionTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    SubscriptionCancelSubscriptionUnitPrice$inboundSchema
  ),
  status:
    SubscriptionCancelSubscriptionSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SubscriptionCancelSubscriptionPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    SubscriptionCancelSubscriptionSubscriptionBillingCycle$Outbound;
  trial_period: SubscriptionCancelSubscriptionTrialPeriod$Outbound;
  unit_price: SubscriptionCancelSubscriptionUnitPrice$Outbound;
  status: string;
  custom_data?:
    | SubscriptionCancelSubscriptionSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const SubscriptionCancelSubscriptionPrice$outboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionCancelSubscriptionPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionCancelSubscriptionSubscriptionType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    SubscriptionCancelSubscriptionSubscriptionBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    SubscriptionCancelSubscriptionTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() =>
    SubscriptionCancelSubscriptionUnitPrice$outboundSchema
  ),
  status:
    SubscriptionCancelSubscriptionSubscriptionResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    SubscriptionCancelSubscriptionSubscriptionResponseCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionPrice$ {
  /** @deprecated use `SubscriptionCancelSubscriptionPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionPrice$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionPrice$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionPrice$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionPrice$Outbound;
}

export function subscriptionCancelSubscriptionPriceToJSON(
  subscriptionCancelSubscriptionPrice: SubscriptionCancelSubscriptionPrice,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionPrice$outboundSchema.parse(
      subscriptionCancelSubscriptionPrice,
    ),
  );
}

export function subscriptionCancelSubscriptionPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCancelSubscriptionPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCancelSubscriptionPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionItems$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: SubscriptionCancelSubscriptionSubscriptionStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.lazy(() => SubscriptionCancelSubscriptionPrice$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type SubscriptionCancelSubscriptionItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: SubscriptionCancelSubscriptionPrice$Outbound;
};

/** @internal */
export const SubscriptionCancelSubscriptionItems$outboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionItems$Outbound,
  z.ZodTypeDef,
  SubscriptionCancelSubscriptionItems
> = z.object({
  status: SubscriptionCancelSubscriptionSubscriptionStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.lazy(() => SubscriptionCancelSubscriptionPrice$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionItems$ {
  /** @deprecated use `SubscriptionCancelSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionItems$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionItems$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionItems$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionItems$Outbound;
}

export function subscriptionCancelSubscriptionItemsToJSON(
  subscriptionCancelSubscriptionItems: SubscriptionCancelSubscriptionItems,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionItems$outboundSchema.parse(
      subscriptionCancelSubscriptionItems,
    ),
  );
}

export function subscriptionCancelSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCancelSubscriptionItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCancelSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionCustomData$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubscriptionCancelSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionCancelSubscriptionCustomData$outboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  SubscriptionCancelSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionCancelSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionCustomData$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionCustomData$Outbound;
}

export function subscriptionCancelSubscriptionCustomDataToJSON(
  subscriptionCancelSubscriptionCustomData:
    SubscriptionCancelSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionCustomData$outboundSchema.parse(
      subscriptionCancelSubscriptionCustomData,
    ),
  );
}

export function subscriptionCancelSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionManagementUrls$inboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type SubscriptionCancelSubscriptionManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const SubscriptionCancelSubscriptionManagementUrls$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionManagementUrls$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionManagementUrls$ {
  /** @deprecated use `SubscriptionCancelSubscriptionManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionManagementUrls$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionManagementUrls$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionManagementUrls$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionManagementUrls$Outbound;
}

export function subscriptionCancelSubscriptionManagementUrlsToJSON(
  subscriptionCancelSubscriptionManagementUrls:
    SubscriptionCancelSubscriptionManagementUrls,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionManagementUrls$outboundSchema.parse(
      subscriptionCancelSubscriptionManagementUrls,
    ),
  );
}

export function subscriptionCancelSubscriptionManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionManagementUrls' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionCancelSubscriptionSubscriptionResponseStatus
  > = z.nativeEnum(SubscriptionCancelSubscriptionSubscriptionResponseStatus);

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionCancelSubscriptionSubscriptionResponseStatus
  > = SubscriptionCancelSubscriptionSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionResponseStatus$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCancelSubscriptionType
> = z.nativeEnum(SubscriptionCancelSubscriptionType);

/** @internal */
export const SubscriptionCancelSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCancelSubscriptionType
> = SubscriptionCancelSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionType$ {
  /** @deprecated use `SubscriptionCancelSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCancelSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionCustomData$inboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionSubscriptionCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionCancelSubscriptionSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionCustomData$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionCancelSubscriptionSubscriptionCustomData$Outbound;
}

export function subscriptionCancelSubscriptionSubscriptionCustomDataToJSON(
  subscriptionCancelSubscriptionSubscriptionCustomData:
    SubscriptionCancelSubscriptionSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionSubscriptionCustomData$outboundSchema.parse(
      subscriptionCancelSubscriptionSubscriptionCustomData,
    ),
  );
}

export function subscriptionCancelSubscriptionSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionDiscount$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(
    SubscriptionCancelSubscriptionSubscriptionResponseStatus$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: SubscriptionCancelSubscriptionType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    SubscriptionCancelSubscriptionSubscriptionCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type SubscriptionCancelSubscriptionDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data: SubscriptionCancelSubscriptionSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const SubscriptionCancelSubscriptionDiscount$outboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionCancelSubscriptionDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(
    SubscriptionCancelSubscriptionSubscriptionResponseStatus$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: SubscriptionCancelSubscriptionType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    SubscriptionCancelSubscriptionSubscriptionCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionDiscount$ {
  /** @deprecated use `SubscriptionCancelSubscriptionDiscount$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionDiscount$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionDiscount$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionDiscount$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionDiscount$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionDiscount$Outbound;
}

export function subscriptionCancelSubscriptionDiscountToJSON(
  subscriptionCancelSubscriptionDiscount:
    SubscriptionCancelSubscriptionDiscount,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionDiscount$outboundSchema.parse(
      subscriptionCancelSubscriptionDiscount,
    ),
  );
}

export function subscriptionCancelSubscriptionDiscountFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCancelSubscriptionDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCancelSubscriptionDiscount' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionData$inboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  started_at: z.nullable(z.string()),
  first_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  paused_at: z.nullable(z.string()),
  canceled_at: z.nullable(z.string()),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    SubscriptionCancelSubscriptionBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    SubscriptionCancelSubscriptionCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    SubscriptionCancelSubscriptionBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.lazy(() => SubscriptionCancelSubscriptionScheduledChange$inboundSchema),
  ),
  items: z.array(
    z.lazy(() => SubscriptionCancelSubscriptionItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    SubscriptionCancelSubscriptionCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    SubscriptionCancelSubscriptionManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionCancelSubscriptionDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type SubscriptionCancelSubscriptionData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: SubscriptionCancelSubscriptionBillingDetails$Outbound;
  current_billing_period:
    SubscriptionCancelSubscriptionCurrentBillingPeriod$Outbound;
  billing_cycle: SubscriptionCancelSubscriptionBillingCycle$Outbound;
  scheduled_change: Array<
    SubscriptionCancelSubscriptionScheduledChange$Outbound
  >;
  items: Array<SubscriptionCancelSubscriptionItems$Outbound>;
  custom_data?: SubscriptionCancelSubscriptionCustomData$Outbound | undefined;
  management_urls: SubscriptionCancelSubscriptionManagementUrls$Outbound;
  discount?: SubscriptionCancelSubscriptionDiscount$Outbound | null | undefined;
};

/** @internal */
export const SubscriptionCancelSubscriptionData$outboundSchema: z.ZodType<
  SubscriptionCancelSubscriptionData$Outbound,
  z.ZodTypeDef,
  SubscriptionCancelSubscriptionData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startedAt: z.nullable(z.string()),
  firstBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  pausedAt: z.nullable(z.string()),
  canceledAt: z.nullable(z.string()),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    SubscriptionCancelSubscriptionBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    SubscriptionCancelSubscriptionCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    SubscriptionCancelSubscriptionBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.lazy(() => SubscriptionCancelSubscriptionScheduledChange$outboundSchema),
  ),
  items: z.array(
    z.lazy(() => SubscriptionCancelSubscriptionItems$outboundSchema),
  ),
  customData: z.lazy(() =>
    SubscriptionCancelSubscriptionCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    SubscriptionCancelSubscriptionManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionCancelSubscriptionDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionData$ {
  /** @deprecated use `SubscriptionCancelSubscriptionData$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCancelSubscriptionData$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionData$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionData$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionData$Outbound;
}

export function subscriptionCancelSubscriptionDataToJSON(
  subscriptionCancelSubscriptionData: SubscriptionCancelSubscriptionData,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionData$outboundSchema.parse(
      subscriptionCancelSubscriptionData,
    ),
  );
}

export function subscriptionCancelSubscriptionDataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCancelSubscriptionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCancelSubscriptionData' from JSON`,
  );
}

/** @internal */
export const SubscriptionCancelSubscriptionResponseBody$inboundSchema:
  z.ZodType<SubscriptionCancelSubscriptionResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      data: z.lazy(() => SubscriptionCancelSubscriptionData$inboundSchema),
    });

/** @internal */
export type SubscriptionCancelSubscriptionResponseBody$Outbound = {
  data: SubscriptionCancelSubscriptionData$Outbound;
};

/** @internal */
export const SubscriptionCancelSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionResponseBody
  > = z.object({
    data: z.lazy(() => SubscriptionCancelSubscriptionData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionCancelSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionResponseBody$Outbound;
}

export function subscriptionCancelSubscriptionResponseBodyToJSON(
  subscriptionCancelSubscriptionResponseBody:
    SubscriptionCancelSubscriptionResponseBody,
): string {
  return JSON.stringify(
    SubscriptionCancelSubscriptionResponseBody$outboundSchema.parse(
      subscriptionCancelSubscriptionResponseBody,
    ),
  );
}

export function subscriptionCancelSubscriptionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCancelSubscriptionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCancelSubscriptionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCancelSubscriptionResponseBody' from JSON`,
  );
}
