/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAddressesAddressIdRequest = {
  addressId: string;
};

/**
 * Any valid JSON value
 */
export type GetAddressesAddressIdCustomData = {};

export const GetAddressesAddressIdStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetAddressesAddressIdStatus = ClosedEnum<
  typeof GetAddressesAddressIdStatus
>;

/**
 * Get an Address
 */
export type GetAddressesAddressIdResponseBody = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetAddressesAddressIdCustomData;
  city?: string | null | undefined;
  status?: GetAddressesAddressIdStatus | null | undefined;
  createdAt: string;
  updatedAt: string;
  customerId?: string | null | undefined;
};

/** @internal */
export const GetAddressesAddressIdRequest$inboundSchema: z.ZodType<
  GetAddressesAddressIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  address_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "address_id": "addressId",
  });
});

/** @internal */
export type GetAddressesAddressIdRequest$Outbound = {
  address_id: string;
};

/** @internal */
export const GetAddressesAddressIdRequest$outboundSchema: z.ZodType<
  GetAddressesAddressIdRequest$Outbound,
  z.ZodTypeDef,
  GetAddressesAddressIdRequest
> = z.object({
  addressId: z.string(),
}).transform((v) => {
  return remap$(v, {
    addressId: "address_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAddressesAddressIdRequest$ {
  /** @deprecated use `GetAddressesAddressIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetAddressesAddressIdRequest$inboundSchema;
  /** @deprecated use `GetAddressesAddressIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetAddressesAddressIdRequest$outboundSchema;
  /** @deprecated use `GetAddressesAddressIdRequest$Outbound` instead. */
  export type Outbound = GetAddressesAddressIdRequest$Outbound;
}

export function getAddressesAddressIdRequestToJSON(
  getAddressesAddressIdRequest: GetAddressesAddressIdRequest,
): string {
  return JSON.stringify(
    GetAddressesAddressIdRequest$outboundSchema.parse(
      getAddressesAddressIdRequest,
    ),
  );
}

export function getAddressesAddressIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAddressesAddressIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAddressesAddressIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAddressesAddressIdRequest' from JSON`,
  );
}

/** @internal */
export const GetAddressesAddressIdCustomData$inboundSchema: z.ZodType<
  GetAddressesAddressIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetAddressesAddressIdCustomData$Outbound = {};

/** @internal */
export const GetAddressesAddressIdCustomData$outboundSchema: z.ZodType<
  GetAddressesAddressIdCustomData$Outbound,
  z.ZodTypeDef,
  GetAddressesAddressIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAddressesAddressIdCustomData$ {
  /** @deprecated use `GetAddressesAddressIdCustomData$inboundSchema` instead. */
  export const inboundSchema = GetAddressesAddressIdCustomData$inboundSchema;
  /** @deprecated use `GetAddressesAddressIdCustomData$outboundSchema` instead. */
  export const outboundSchema = GetAddressesAddressIdCustomData$outboundSchema;
  /** @deprecated use `GetAddressesAddressIdCustomData$Outbound` instead. */
  export type Outbound = GetAddressesAddressIdCustomData$Outbound;
}

export function getAddressesAddressIdCustomDataToJSON(
  getAddressesAddressIdCustomData: GetAddressesAddressIdCustomData,
): string {
  return JSON.stringify(
    GetAddressesAddressIdCustomData$outboundSchema.parse(
      getAddressesAddressIdCustomData,
    ),
  );
}

export function getAddressesAddressIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetAddressesAddressIdCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAddressesAddressIdCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAddressesAddressIdCustomData' from JSON`,
  );
}

/** @internal */
export const GetAddressesAddressIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAddressesAddressIdStatus
> = z.nativeEnum(GetAddressesAddressIdStatus);

/** @internal */
export const GetAddressesAddressIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAddressesAddressIdStatus
> = GetAddressesAddressIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAddressesAddressIdStatus$ {
  /** @deprecated use `GetAddressesAddressIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetAddressesAddressIdStatus$inboundSchema;
  /** @deprecated use `GetAddressesAddressIdStatus$outboundSchema` instead. */
  export const outboundSchema = GetAddressesAddressIdStatus$outboundSchema;
}

/** @internal */
export const GetAddressesAddressIdResponseBody$inboundSchema: z.ZodType<
  GetAddressesAddressIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  first_line: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => GetAddressesAddressIdCustomData$inboundSchema),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(GetAddressesAddressIdStatus$inboundSchema).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_line": "firstLine",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type GetAddressesAddressIdResponseBody$Outbound = {
  id: string;
  description?: string | null | undefined;
  first_line?: string | null | undefined;
  custom_data: GetAddressesAddressIdCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | null | undefined;
  created_at: string;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const GetAddressesAddressIdResponseBody$outboundSchema: z.ZodType<
  GetAddressesAddressIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetAddressesAddressIdResponseBody
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() => GetAddressesAddressIdCustomData$outboundSchema),
  city: z.nullable(z.string()).optional(),
  status: z.nullable(GetAddressesAddressIdStatus$outboundSchema).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstLine: "first_line",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAddressesAddressIdResponseBody$ {
  /** @deprecated use `GetAddressesAddressIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAddressesAddressIdResponseBody$inboundSchema;
  /** @deprecated use `GetAddressesAddressIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetAddressesAddressIdResponseBody$outboundSchema;
  /** @deprecated use `GetAddressesAddressIdResponseBody$Outbound` instead. */
  export type Outbound = GetAddressesAddressIdResponseBody$Outbound;
}

export function getAddressesAddressIdResponseBodyToJSON(
  getAddressesAddressIdResponseBody: GetAddressesAddressIdResponseBody,
): string {
  return JSON.stringify(
    GetAddressesAddressIdResponseBody$outboundSchema.parse(
      getAddressesAddressIdResponseBody,
    ),
  );
}

export function getAddressesAddressIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAddressesAddressIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAddressesAddressIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAddressesAddressIdResponseBody' from JSON`,
  );
}
