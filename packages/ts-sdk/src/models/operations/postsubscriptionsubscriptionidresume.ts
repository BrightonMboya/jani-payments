/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostSubscriptionSubscriptionIdResumeRequest = {
  subscriptionId: string;
};

export const PostSubscriptionSubscriptionIdResumeInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdResumeInterval = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdResumeInterval
>;

export type PostSubscriptionSubscriptionIdResumePaymentTerms = {
  interval?: PostSubscriptionSubscriptionIdResumeInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type PostSubscriptionSubscriptionIdResumeBillingDetails = {
  paymentTerms: PostSubscriptionSubscriptionIdResumePaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type PostSubscriptionSubscriptionIdResumeBillingCycle = {
  frequency: number;
  interval: string;
};

export const PostSubscriptionSubscriptionIdResumeAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type PostSubscriptionSubscriptionIdResumeAction = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdResumeAction
>;

export const PostSubscriptionSubscriptionIdResumeStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type PostSubscriptionSubscriptionIdResumeStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdResumeStatus
>;

export type PostSubscriptionSubscriptionIdResumeScheduledChange = {
  id: string;
  subscriptionId: string;
  action: PostSubscriptionSubscriptionIdResumeAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: PostSubscriptionSubscriptionIdResumeStatus;
};

export const PostSubscriptionSubscriptionIdResumeSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type PostSubscriptionSubscriptionIdResumeSubscriptionStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdResumeSubscriptionStatus
>;

export const PostSubscriptionSubscriptionIdResumeSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PostSubscriptionSubscriptionIdResumeSubscriptionType = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdResumeSubscriptionType
>;

export const PostSubscriptionSubscriptionIdResumeSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdResumeSubscriptionInterval =
  ClosedEnum<typeof PostSubscriptionSubscriptionIdResumeSubscriptionInterval>;

export type PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle = {
  interval: PostSubscriptionSubscriptionIdResumeSubscriptionInterval;
  frequency: number;
};

export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval =
  {
    Day: "day",
    Week: "week",
    Month: "month",
    Year: "year",
  } as const;
export type PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval
  >;

export type PostSubscriptionSubscriptionIdResumeTrialPeriod = {
  interval: PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval;
  frequency: number;
};

export type PostSubscriptionSubscriptionIdResumeUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData =
  {};

export type PostSubscriptionSubscriptionIdResumePrice = {
  productId: string;
  description?: string | null | undefined;
  type: PostSubscriptionSubscriptionIdResumeSubscriptionType;
  name: string;
  billingCycle: PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle;
  trialPeriod: PostSubscriptionSubscriptionIdResumeTrialPeriod;
  unitPrice: PostSubscriptionSubscriptionIdResumeUnitPrice;
  status: PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type PostSubscriptionSubscriptionIdResumeItems = {
  status: PostSubscriptionSubscriptionIdResumeSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: PostSubscriptionSubscriptionIdResumePrice;
};

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdResumeCustomData = {};

export type PostSubscriptionSubscriptionIdResumeManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus
  >;

export const PostSubscriptionSubscriptionIdResumeType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PostSubscriptionSubscriptionIdResumeType = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdResumeType
>;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdResumeSubscriptionCustomData = {};

export type PostSubscriptionSubscriptionIdResumeDiscount = {
  id: string;
  status?:
    | PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PostSubscriptionSubscriptionIdResumeType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostSubscriptionSubscriptionIdResumeSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type PostSubscriptionSubscriptionIdResumeData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: PostSubscriptionSubscriptionIdResumeBillingDetails;
  currentBillingPeriod:
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod;
  billingCycle: PostSubscriptionSubscriptionIdResumeBillingCycle;
  scheduledChange: Array<PostSubscriptionSubscriptionIdResumeScheduledChange>;
  items: Array<PostSubscriptionSubscriptionIdResumeItems>;
  /**
   * Any valid JSON value
   */
  customData?: PostSubscriptionSubscriptionIdResumeCustomData | undefined;
  managementUrls: PostSubscriptionSubscriptionIdResumeManagementUrls;
  discount?: PostSubscriptionSubscriptionIdResumeDiscount | null | undefined;
};

/**
 * Resumes a subscription given its id
 */
export type PostSubscriptionSubscriptionIdResumeResponseBody = {
  data: PostSubscriptionSubscriptionIdResumeData;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeRequest$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscription_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeRequest$Outbound = {
  subscription_id: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeRequest$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeRequest$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeRequest
  > = z.object({
    subscriptionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeRequest$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeRequest$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeRequest$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeRequest$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdResumeRequest$Outbound;
}

export function postSubscriptionSubscriptionIdResumeRequestToJSON(
  postSubscriptionSubscriptionIdResumeRequest:
    PostSubscriptionSubscriptionIdResumeRequest,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeRequest$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeRequest,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeRequest' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeInterval$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeInterval> = z
    .nativeEnum(PostSubscriptionSubscriptionIdResumeInterval);

/** @internal */
export const PostSubscriptionSubscriptionIdResumeInterval$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeInterval> =
    PostSubscriptionSubscriptionIdResumeInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumePaymentTerms$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumePaymentTerms,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: z.nullable(
      PostSubscriptionSubscriptionIdResumeInterval$inboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumePaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumePaymentTerms$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumePaymentTerms$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumePaymentTerms
  > = z.object({
    interval: z.nullable(
      PostSubscriptionSubscriptionIdResumeInterval$outboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumePaymentTerms$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumePaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumePaymentTerms$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumePaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumePaymentTerms$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumePaymentTerms$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumePaymentTerms$Outbound;
}

export function postSubscriptionSubscriptionIdResumePaymentTermsToJSON(
  postSubscriptionSubscriptionIdResumePaymentTerms:
    PostSubscriptionSubscriptionIdResumePaymentTerms,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumePaymentTerms$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumePaymentTerms,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumePaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumePaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumePaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumePaymentTerms' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeBillingDetails$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumePaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeBillingDetails$Outbound = {
  payment_terms: PostSubscriptionSubscriptionIdResumePaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeBillingDetails$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeBillingDetails$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumePaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeBillingDetails$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeBillingDetails$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeBillingDetails$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeBillingDetails$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeBillingDetails$Outbound;
}

export function postSubscriptionSubscriptionIdResumeBillingDetailsToJSON(
  postSubscriptionSubscriptionIdResumeBillingDetails:
    PostSubscriptionSubscriptionIdResumeBillingDetails,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeBillingDetails$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeBillingDetails,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeBillingDetails' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string()),
    ends_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$Outbound =
  {
    starts_at: string | null;
    ends_at: string | null;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.string()),
    endsAt: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$Outbound;
}

export function postSubscriptionSubscriptionIdResumeCurrentBillingPeriodToJSON(
  postSubscriptionSubscriptionIdResumeCurrentBillingPeriod:
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$outboundSchema
      .parse(postSubscriptionSubscriptionIdResumeCurrentBillingPeriod),
  );
}

export function postSubscriptionSubscriptionIdResumeCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeBillingCycle$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeBillingCycle$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeBillingCycle$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeBillingCycle$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionIdResumeBillingCycleToJSON(
  postSubscriptionSubscriptionIdResumeBillingCycle:
    PostSubscriptionSubscriptionIdResumeBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeBillingCycle$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeBillingCycle,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeAction$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeAction> = z
    .nativeEnum(PostSubscriptionSubscriptionIdResumeAction);

/** @internal */
export const PostSubscriptionSubscriptionIdResumeAction$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeAction> =
    PostSubscriptionSubscriptionIdResumeAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeAction$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeAction$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeAction$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeAction$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeAction$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeStatus> = z
    .nativeEnum(PostSubscriptionSubscriptionIdResumeStatus);

/** @internal */
export const PostSubscriptionSubscriptionIdResumeStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeStatus> =
    PostSubscriptionSubscriptionIdResumeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeScheduledChange$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: PostSubscriptionSubscriptionIdResumeAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()).optional(),
    status: PostSubscriptionSubscriptionIdResumeStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeScheduledChange$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeScheduledChange$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: PostSubscriptionSubscriptionIdResumeAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()).optional(),
    status: PostSubscriptionSubscriptionIdResumeStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeScheduledChange$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeScheduledChange$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeScheduledChange$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeScheduledChange$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeScheduledChange$Outbound;
}

export function postSubscriptionSubscriptionIdResumeScheduledChangeToJSON(
  postSubscriptionSubscriptionIdResumeScheduledChange:
    PostSubscriptionSubscriptionIdResumeScheduledChange,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeScheduledChange$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeScheduledChange,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeScheduledChange' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionStatus
  > = z.nativeEnum(PostSubscriptionSubscriptionIdResumeSubscriptionStatus);

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionStatus
  > = PostSubscriptionSubscriptionIdResumeSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionType$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeSubscriptionType> =
    z.nativeEnum(PostSubscriptionSubscriptionIdResumeSubscriptionType);

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionType$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeSubscriptionType> =
    PostSubscriptionSubscriptionIdResumeSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionType$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionInterval
  > = z.nativeEnum(PostSubscriptionSubscriptionIdResumeSubscriptionInterval);

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionInterval
  > = PostSubscriptionSubscriptionIdResumeSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdResumeSubscriptionInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$Outbound =
  {
    interval: string;
    frequency: number;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdResumeSubscriptionInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionIdResumeSubscriptionBillingCycleToJSON(
  postSubscriptionSubscriptionIdResumeSubscriptionBillingCycle:
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$outboundSchema
      .parse(postSubscriptionSubscriptionIdResumeSubscriptionBillingCycle),
  );
}

export function postSubscriptionSubscriptionIdResumeSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval
  > =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeTrialPeriod$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeTrialPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeTrialPeriod$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeTrialPeriod$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeTrialPeriod
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdResumeSubscriptionResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeTrialPeriod$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeTrialPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeTrialPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeTrialPeriod$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeTrialPeriod$Outbound;
}

export function postSubscriptionSubscriptionIdResumeTrialPeriodToJSON(
  postSubscriptionSubscriptionIdResumeTrialPeriod:
    PostSubscriptionSubscriptionIdResumeTrialPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeTrialPeriod$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeTrialPeriod,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeUnitPrice$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeUnitPrice,
    z.ZodTypeDef,
    unknown
  > = z.object({
    amount: z.number(),
    currency_code: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "currency_code": "currencyCode",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeUnitPrice$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeUnitPrice$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeUnitPrice
  > = z.object({
    amount: z.number(),
    currencyCode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      currencyCode: "currency_code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeUnitPrice$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeUnitPrice$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeUnitPrice$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeUnitPrice$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdResumeUnitPrice$Outbound;
}

export function postSubscriptionSubscriptionIdResumeUnitPriceToJSON(
  postSubscriptionSubscriptionIdResumeUnitPrice:
    PostSubscriptionSubscriptionIdResumeUnitPrice,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeUnitPrice$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeUnitPrice,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeUnitPrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status
  > =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$Outbound =
  {};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdResumeSubscriptionResponseCustomDataToJSON(
  postSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData:
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$outboundSchema
      .parse(
        postSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData,
      ),
  );
}

export function postSubscriptionSubscriptionIdResumeSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumePrice$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdResumePrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostSubscriptionSubscriptionIdResumeSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeUnitPrice$inboundSchema
  ),
  status:
    PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdResumePrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$Outbound;
  trial_period: PostSubscriptionSubscriptionIdResumeTrialPeriod$Outbound;
  unit_price: PostSubscriptionSubscriptionIdResumeUnitPrice$Outbound;
  status: string;
  custom_data?:
    | PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumePrice$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumePrice$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumePrice
  > = z.object({
    productId: z.string(),
    description: z.nullable(z.string()).optional(),
    type: PostSubscriptionSubscriptionIdResumeSubscriptionType$outboundSchema,
    name: z.string(),
    billingCycle: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumeSubscriptionBillingCycle$outboundSchema
    ),
    trialPeriod: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumeTrialPeriod$outboundSchema
    ),
    unitPrice: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumeUnitPrice$outboundSchema
    ),
    status:
      PostSubscriptionSubscriptionIdResumeSubscriptionResponse200Status$outboundSchema,
    customData: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumeSubscriptionResponseCustomData$outboundSchema
    ).optional(),
    id: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
  }).transform((v) => {
    return remap$(v, {
      productId: "product_id",
      billingCycle: "billing_cycle",
      trialPeriod: "trial_period",
      unitPrice: "unit_price",
      customData: "custom_data",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumePrice$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumePrice$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumePrice$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumePrice$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumePrice$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumePrice$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdResumePrice$Outbound;
}

export function postSubscriptionSubscriptionIdResumePriceToJSON(
  postSubscriptionSubscriptionIdResumePrice:
    PostSubscriptionSubscriptionIdResumePrice,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumePrice$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumePrice,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumePriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumePrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumePrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumePrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeItems$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdResumeItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PostSubscriptionSubscriptionIdResumeSubscriptionStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.lazy(() => PostSubscriptionSubscriptionIdResumePrice$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdResumeItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: PostSubscriptionSubscriptionIdResumePrice$Outbound;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeItems$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeItems$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeItems
  > = z.object({
    status:
      PostSubscriptionSubscriptionIdResumeSubscriptionStatus$outboundSchema,
    priceId: z.string(),
    quantity: z.number().int(),
    id: z.string(),
    subscriptionId: z.string(),
    recurring: z.boolean(),
    createdAt: z.string(),
    updatedAt: z.string(),
    previouslyBilledAt: z.nullable(z.string()),
    nextBilledAt: z.nullable(z.string()),
    trialStartedAt: z.nullable(z.string()),
    trialEndedAt: z.nullable(z.string()),
    customData: z.nullable(z.any()).optional(),
    price: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumePrice$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      priceId: "price_id",
      subscriptionId: "subscription_id",
      createdAt: "created_at",
      updatedAt: "updated_at",
      previouslyBilledAt: "previously_billed_at",
      nextBilledAt: "next_billed_at",
      trialStartedAt: "trial_started_at",
      trialEndedAt: "trial_ended_at",
      customData: "custom_data",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeItems$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeItems$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeItems$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeItems$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeItems$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeItems$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdResumeItems$Outbound;
}

export function postSubscriptionSubscriptionIdResumeItemsToJSON(
  postSubscriptionSubscriptionIdResumeItems:
    PostSubscriptionSubscriptionIdResumeItems,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeItems$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeItems,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeItemsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeItems,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeItems$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeItems' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdResumeCustomData$Outbound = {};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdResumeCustomDataToJSON(
  postSubscriptionSubscriptionIdResumeCustomData:
    PostSubscriptionSubscriptionIdResumeCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeCustomData$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeCustomData,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeManagementUrls$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeManagementUrls$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeManagementUrls$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeManagementUrls$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeManagementUrls$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeManagementUrls$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeManagementUrls$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeManagementUrls$Outbound;
}

export function postSubscriptionSubscriptionIdResumeManagementUrlsToJSON(
  postSubscriptionSubscriptionIdResumeManagementUrls:
    PostSubscriptionSubscriptionIdResumeManagementUrls,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeManagementUrls$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeManagementUrls,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeManagementUrls' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus
  > =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeType$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeType> = z
    .nativeEnum(PostSubscriptionSubscriptionIdResumeType);

/** @internal */
export const PostSubscriptionSubscriptionIdResumeType$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdResumeType> =
    PostSubscriptionSubscriptionIdResumeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeType$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeType$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeType$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$Outbound =
  {};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdResumeSubscriptionCustomDataToJSON(
  postSubscriptionSubscriptionIdResumeSubscriptionCustomData:
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$outboundSchema
      .parse(postSubscriptionSubscriptionIdResumeSubscriptionCustomData),
  );
}

export function postSubscriptionSubscriptionIdResumeSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeDiscount$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeDiscount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    status: z.nullable(
      PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$inboundSchema,
    ).optional(),
    description: z.nullable(z.string()).optional(),
    enabled_for_checkout: z.nullable(z.boolean()).optional(),
    amount: z.number(),
    currency_code: z.string(),
    type: PostSubscriptionSubscriptionIdResumeType$inboundSchema,
    recur: z.nullable(z.boolean()).optional(),
    max_recurring_intervals: z.nullable(z.number()).optional(),
    usage_limit: z.nullable(z.number().int()).optional(),
    expires_at: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$inboundSchema
    ),
    times_used: z.nullable(z.number().int()).optional(),
    created_at: z.string(),
    updated_at: z.string(),
    restricted_to: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "enabled_for_checkout": "enabledForCheckout",
      "currency_code": "currencyCode",
      "max_recurring_intervals": "maxRecurringIntervals",
      "usage_limit": "usageLimit",
      "expires_at": "expiresAt",
      "custom_data": "customData",
      "times_used": "timesUsed",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "restricted_to": "restrictedTo",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeDiscount$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeDiscount$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeDiscount
  > = z.object({
    id: z.string(),
    status: z.nullable(
      PostSubscriptionSubscriptionIdResumeSubscriptionResponseStatus$outboundSchema,
    ).optional(),
    description: z.nullable(z.string()).optional(),
    enabledForCheckout: z.nullable(z.boolean()).optional(),
    amount: z.number(),
    currencyCode: z.string(),
    type: PostSubscriptionSubscriptionIdResumeType$outboundSchema,
    recur: z.nullable(z.boolean()).optional(),
    maxRecurringIntervals: z.nullable(z.number()).optional(),
    usageLimit: z.nullable(z.number().int()).optional(),
    expiresAt: z.nullable(z.string()).optional(),
    customData: z.lazy(() =>
      PostSubscriptionSubscriptionIdResumeSubscriptionCustomData$outboundSchema
    ),
    timesUsed: z.nullable(z.number().int()).optional(),
    createdAt: z.string(),
    updatedAt: z.string(),
    restrictedTo: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      enabledForCheckout: "enabled_for_checkout",
      currencyCode: "currency_code",
      maxRecurringIntervals: "max_recurring_intervals",
      usageLimit: "usage_limit",
      expiresAt: "expires_at",
      customData: "custom_data",
      timesUsed: "times_used",
      createdAt: "created_at",
      updatedAt: "updated_at",
      restrictedTo: "restricted_to",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeDiscount$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeDiscount$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeDiscount$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeDiscount$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeDiscount$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeDiscount$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdResumeDiscount$Outbound;
}

export function postSubscriptionSubscriptionIdResumeDiscountToJSON(
  postSubscriptionSubscriptionIdResumeDiscount:
    PostSubscriptionSubscriptionIdResumeDiscount,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeDiscount$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeDiscount,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeDiscountFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeDiscount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeDiscount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeDiscount' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeData$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdResumeData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  started_at: z.nullable(z.string()),
  first_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  paused_at: z.nullable(z.string()),
  canceled_at: z.nullable(z.string()),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.lazy(() =>
      PostSubscriptionSubscriptionIdResumeScheduledChange$inboundSchema
    ),
  ),
  items: z.array(
    z.lazy(() => PostSubscriptionSubscriptionIdResumeItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => PostSubscriptionSubscriptionIdResumeDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdResumeData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: PostSubscriptionSubscriptionIdResumeBillingDetails$Outbound;
  current_billing_period:
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$Outbound;
  billing_cycle: PostSubscriptionSubscriptionIdResumeBillingCycle$Outbound;
  scheduled_change: Array<
    PostSubscriptionSubscriptionIdResumeScheduledChange$Outbound
  >;
  items: Array<PostSubscriptionSubscriptionIdResumeItems$Outbound>;
  custom_data?:
    | PostSubscriptionSubscriptionIdResumeCustomData$Outbound
    | undefined;
  management_urls: PostSubscriptionSubscriptionIdResumeManagementUrls$Outbound;
  discount?:
    | PostSubscriptionSubscriptionIdResumeDiscount$Outbound
    | null
    | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeData$outboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdResumeData$Outbound,
  z.ZodTypeDef,
  PostSubscriptionSubscriptionIdResumeData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startedAt: z.nullable(z.string()),
  firstBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  pausedAt: z.nullable(z.string()),
  canceledAt: z.nullable(z.string()),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.lazy(() =>
      PostSubscriptionSubscriptionIdResumeScheduledChange$outboundSchema
    ),
  ),
  items: z.array(
    z.lazy(() => PostSubscriptionSubscriptionIdResumeItems$outboundSchema),
  ),
  customData: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    PostSubscriptionSubscriptionIdResumeManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => PostSubscriptionSubscriptionIdResumeDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeData$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdResumeData$Outbound;
}

export function postSubscriptionSubscriptionIdResumeDataToJSON(
  postSubscriptionSubscriptionIdResumeData:
    PostSubscriptionSubscriptionIdResumeData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeData$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeData,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeResponseBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => PostSubscriptionSubscriptionIdResumeData$inboundSchema),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeResponseBody$Outbound = {
  data: PostSubscriptionSubscriptionIdResumeData$Outbound;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeResponseBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeResponseBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeResponseBody
  > = z.object({
    data: z.lazy(() => PostSubscriptionSubscriptionIdResumeData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeResponseBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeResponseBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeResponseBody$Outbound;
}

export function postSubscriptionSubscriptionIdResumeResponseBodyToJSON(
  postSubscriptionSubscriptionIdResumeResponseBody:
    PostSubscriptionSubscriptionIdResumeResponseBody,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdResumeResponseBody$outboundSchema.parse(
      postSubscriptionSubscriptionIdResumeResponseBody,
    ),
  );
}

export function postSubscriptionSubscriptionIdResumeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdResumeResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdResumeResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdResumeResponseBody' from JSON`,
  );
}
