/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type Status = ClosedEnum<typeof Status>;

/**
 * Any valid JSON value
 */
export type CustomData = {};

export type PostProductsRequestBody = {
  name: string;
  description: string;
  status: Status;
  /**
   * Any valid JSON value
   */
  customData?: CustomData | undefined;
};

export const PostProductsStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostProductsStatus = ClosedEnum<typeof PostProductsStatus>;

/**
 * Any valid JSON value
 */
export type PostProductsCustomData = {};

/**
 * Creating Product endpoint
 */
export type PostProductsResponseBody = {
  id: string;
  name: string;
  description: string;
  status: PostProductsStatus;
  createdAt: string;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData: PostProductsCustomData;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const CustomData$inboundSchema: z.ZodType<
  CustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomData$Outbound = {};

/** @internal */
export const CustomData$outboundSchema: z.ZodType<
  CustomData$Outbound,
  z.ZodTypeDef,
  CustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomData$ {
  /** @deprecated use `CustomData$inboundSchema` instead. */
  export const inboundSchema = CustomData$inboundSchema;
  /** @deprecated use `CustomData$outboundSchema` instead. */
  export const outboundSchema = CustomData$outboundSchema;
  /** @deprecated use `CustomData$Outbound` instead. */
  export type Outbound = CustomData$Outbound;
}

export function customDataToJSON(customData: CustomData): string {
  return JSON.stringify(CustomData$outboundSchema.parse(customData));
}

export function customDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomData' from JSON`,
  );
}

/** @internal */
export const PostProductsRequestBody$inboundSchema: z.ZodType<
  PostProductsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  status: Status$inboundSchema,
  custom_data: z.lazy(() => CustomData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type PostProductsRequestBody$Outbound = {
  name: string;
  description: string;
  status: string;
  custom_data?: CustomData$Outbound | undefined;
};

/** @internal */
export const PostProductsRequestBody$outboundSchema: z.ZodType<
  PostProductsRequestBody$Outbound,
  z.ZodTypeDef,
  PostProductsRequestBody
> = z.object({
  name: z.string(),
  description: z.string(),
  status: Status$outboundSchema,
  customData: z.lazy(() => CustomData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProductsRequestBody$ {
  /** @deprecated use `PostProductsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostProductsRequestBody$inboundSchema;
  /** @deprecated use `PostProductsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostProductsRequestBody$outboundSchema;
  /** @deprecated use `PostProductsRequestBody$Outbound` instead. */
  export type Outbound = PostProductsRequestBody$Outbound;
}

export function postProductsRequestBodyToJSON(
  postProductsRequestBody: PostProductsRequestBody,
): string {
  return JSON.stringify(
    PostProductsRequestBody$outboundSchema.parse(postProductsRequestBody),
  );
}

export function postProductsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostProductsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostProductsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProductsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostProductsStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostProductsStatus
> = z.nativeEnum(PostProductsStatus);

/** @internal */
export const PostProductsStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostProductsStatus
> = PostProductsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProductsStatus$ {
  /** @deprecated use `PostProductsStatus$inboundSchema` instead. */
  export const inboundSchema = PostProductsStatus$inboundSchema;
  /** @deprecated use `PostProductsStatus$outboundSchema` instead. */
  export const outboundSchema = PostProductsStatus$outboundSchema;
}

/** @internal */
export const PostProductsCustomData$inboundSchema: z.ZodType<
  PostProductsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostProductsCustomData$Outbound = {};

/** @internal */
export const PostProductsCustomData$outboundSchema: z.ZodType<
  PostProductsCustomData$Outbound,
  z.ZodTypeDef,
  PostProductsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProductsCustomData$ {
  /** @deprecated use `PostProductsCustomData$inboundSchema` instead. */
  export const inboundSchema = PostProductsCustomData$inboundSchema;
  /** @deprecated use `PostProductsCustomData$outboundSchema` instead. */
  export const outboundSchema = PostProductsCustomData$outboundSchema;
  /** @deprecated use `PostProductsCustomData$Outbound` instead. */
  export type Outbound = PostProductsCustomData$Outbound;
}

export function postProductsCustomDataToJSON(
  postProductsCustomData: PostProductsCustomData,
): string {
  return JSON.stringify(
    PostProductsCustomData$outboundSchema.parse(postProductsCustomData),
  );
}

export function postProductsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PostProductsCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostProductsCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProductsCustomData' from JSON`,
  );
}

/** @internal */
export const PostProductsResponseBody$inboundSchema: z.ZodType<
  PostProductsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status: PostProductsStatus$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  custom_data: z.lazy(() => PostProductsCustomData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type PostProductsResponseBody$Outbound = {
  id: string;
  name: string;
  description: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  custom_data: PostProductsCustomData$Outbound;
};

/** @internal */
export const PostProductsResponseBody$outboundSchema: z.ZodType<
  PostProductsResponseBody$Outbound,
  z.ZodTypeDef,
  PostProductsResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status: PostProductsStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  customData: z.lazy(() => PostProductsCustomData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostProductsResponseBody$ {
  /** @deprecated use `PostProductsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostProductsResponseBody$inboundSchema;
  /** @deprecated use `PostProductsResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostProductsResponseBody$outboundSchema;
  /** @deprecated use `PostProductsResponseBody$Outbound` instead. */
  export type Outbound = PostProductsResponseBody$Outbound;
}

export function postProductsResponseBodyToJSON(
  postProductsResponseBody: PostProductsResponseBody,
): string {
  return JSON.stringify(
    PostProductsResponseBody$outboundSchema.parse(postProductsResponseBody),
  );
}

export function postProductsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostProductsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostProductsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostProductsResponseBody' from JSON`,
  );
}
