/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type CollectionMode = ClosedEnum<typeof CollectionMode>;

export const PatchSubscriptionSubscriptionIdEffectiveFrom = {
  Immediately: "immediately",
  NextBillingPeriod: "next_billing_period",
} as const;
export type PatchSubscriptionSubscriptionIdEffectiveFrom = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdEffectiveFrom
>;

export type Discount = {
  id: string;
  effectiveFrom?: PatchSubscriptionSubscriptionIdEffectiveFrom | undefined;
};

export const PatchSubscriptionSubscriptionIdPaymentInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchSubscriptionSubscriptionIdPaymentInterval = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdPaymentInterval
>;

export type PatchSubscriptionSubscriptionIdPaymentTerms = {
  paymentInterval: PatchSubscriptionSubscriptionIdPaymentInterval;
  paymentFrequency: number;
};

export type PatchSubscriptionSubscriptionIdBillingDetails = {
  paymentTerms?: PatchSubscriptionSubscriptionIdPaymentTerms | null | undefined;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type CurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type PatchSubscriptionSubscriptionIdItems = {
  priceId: string;
  quantity?: number | null | undefined;
};

/**
 * Any valid JSON value
 */
export type PatchSubscriptionSubscriptionIdCustomData = {};

export type ManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export type PatchSubscriptionSubscriptionIdRequestBody = {
  customerId?: string | null | undefined;
  addressId?: string | null | undefined;
  currencyCode?: string | null | undefined;
  nextBilledAt?: RFCDate | null | undefined;
  collectionMode?: CollectionMode | null | undefined;
  discount?: Discount | null | undefined;
  billingDetails: PatchSubscriptionSubscriptionIdBillingDetails;
  currentBillingPeriod?: CurrentBillingPeriod | null | undefined;
  items: Array<PatchSubscriptionSubscriptionIdItems>;
  /**
   * Any valid JSON value
   */
  customData?: PatchSubscriptionSubscriptionIdCustomData | undefined;
  managementUrls?: ManagementUrls | null | undefined;
};

export type PatchSubscriptionSubscriptionIdRequest = {
  subscriptionId: string;
  requestBody?: PatchSubscriptionSubscriptionIdRequestBody | undefined;
};

export const PatchSubscriptionSubscriptionIdInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchSubscriptionSubscriptionIdInterval = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdInterval
>;

export type PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms = {
  interval?: PatchSubscriptionSubscriptionIdInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type PatchSubscriptionSubscriptionIdSubscriptionBillingDetails = {
  paymentTerms: PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type PatchSubscriptionSubscriptionIdCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type PatchSubscriptionSubscriptionIdBillingCycle = {
  frequency: number;
  interval: string;
};

export const PatchSubscriptionSubscriptionIdAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type PatchSubscriptionSubscriptionIdAction = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdAction
>;

export const PatchSubscriptionSubscriptionIdStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type PatchSubscriptionSubscriptionIdStatus = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdStatus
>;

export type PatchSubscriptionSubscriptionIdScheduledChange = {
  id: string;
  subscriptionId: string;
  action: PatchSubscriptionSubscriptionIdAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: PatchSubscriptionSubscriptionIdStatus;
};

export const PatchSubscriptionSubscriptionIdSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type PatchSubscriptionSubscriptionIdSubscriptionStatus = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdSubscriptionStatus
>;

export const PatchSubscriptionSubscriptionIdSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PatchSubscriptionSubscriptionIdSubscriptionType = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdSubscriptionType
>;

export const PatchSubscriptionSubscriptionIdSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchSubscriptionSubscriptionIdSubscriptionInterval = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdSubscriptionInterval
>;

export type PatchSubscriptionSubscriptionIdSubscriptionBillingCycle = {
  interval: PatchSubscriptionSubscriptionIdSubscriptionInterval;
  frequency: number;
};

export const PatchSubscriptionSubscriptionIdSubscriptionResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PatchSubscriptionSubscriptionIdSubscriptionResponseInterval =
  ClosedEnum<
    typeof PatchSubscriptionSubscriptionIdSubscriptionResponseInterval
  >;

export type PatchSubscriptionSubscriptionIdTrialPeriod = {
  interval: PatchSubscriptionSubscriptionIdSubscriptionResponseInterval;
  frequency: number;
};

export type PatchSubscriptionSubscriptionIdUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PatchSubscriptionSubscriptionIdSubscriptionResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchSubscriptionSubscriptionIdSubscriptionResponse200Status =
  ClosedEnum<
    typeof PatchSubscriptionSubscriptionIdSubscriptionResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData =
  {};

export type PatchSubscriptionSubscriptionIdPrice = {
  productId: string;
  description?: string | null | undefined;
  type: PatchSubscriptionSubscriptionIdSubscriptionType;
  name: string;
  billingCycle: PatchSubscriptionSubscriptionIdSubscriptionBillingCycle;
  trialPeriod: PatchSubscriptionSubscriptionIdTrialPeriod;
  unitPrice: PatchSubscriptionSubscriptionIdUnitPrice;
  status: PatchSubscriptionSubscriptionIdSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type PatchSubscriptionSubscriptionIdSubscriptionItems = {
  status: PatchSubscriptionSubscriptionIdSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: PatchSubscriptionSubscriptionIdPrice;
};

/**
 * Any valid JSON value
 */
export type PatchSubscriptionSubscriptionIdSubscriptionCustomData = {};

export type PatchSubscriptionSubscriptionIdManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const PatchSubscriptionSubscriptionIdSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PatchSubscriptionSubscriptionIdSubscriptionResponseStatus =
  ClosedEnum<typeof PatchSubscriptionSubscriptionIdSubscriptionResponseStatus>;

export const PatchSubscriptionSubscriptionIdType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PatchSubscriptionSubscriptionIdType = ClosedEnum<
  typeof PatchSubscriptionSubscriptionIdType
>;

/**
 * Any valid JSON value
 */
export type PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData = {};

export type PatchSubscriptionSubscriptionIdDiscount = {
  id: string;
  status?:
    | PatchSubscriptionSubscriptionIdSubscriptionResponseStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PatchSubscriptionSubscriptionIdType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type PatchSubscriptionSubscriptionIdData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: PatchSubscriptionSubscriptionIdSubscriptionBillingDetails;
  currentBillingPeriod: PatchSubscriptionSubscriptionIdCurrentBillingPeriod;
  billingCycle: PatchSubscriptionSubscriptionIdBillingCycle;
  scheduledChange: Array<PatchSubscriptionSubscriptionIdScheduledChange>;
  items: Array<PatchSubscriptionSubscriptionIdSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?:
    | PatchSubscriptionSubscriptionIdSubscriptionCustomData
    | undefined;
  managementUrls: PatchSubscriptionSubscriptionIdManagementUrls;
  discount?: PatchSubscriptionSubscriptionIdDiscount | null | undefined;
};

/**
 * Updates a Subscription given its Id
 */
export type PatchSubscriptionSubscriptionIdResponseBody = {
  data: PatchSubscriptionSubscriptionIdData;
};

/** @internal */
export const CollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof CollectionMode
> = z.nativeEnum(CollectionMode);

/** @internal */
export const CollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof CollectionMode
> = CollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionMode$ {
  /** @deprecated use `CollectionMode$inboundSchema` instead. */
  export const inboundSchema = CollectionMode$inboundSchema;
  /** @deprecated use `CollectionMode$outboundSchema` instead. */
  export const outboundSchema = CollectionMode$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdEffectiveFrom$inboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdEffectiveFrom> = z
    .nativeEnum(PatchSubscriptionSubscriptionIdEffectiveFrom);

/** @internal */
export const PatchSubscriptionSubscriptionIdEffectiveFrom$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdEffectiveFrom> =
    PatchSubscriptionSubscriptionIdEffectiveFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdEffectiveFrom$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdEffectiveFrom$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdEffectiveFrom$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdEffectiveFrom$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdEffectiveFrom$outboundSchema;
}

/** @internal */
export const Discount$inboundSchema: z.ZodType<
  Discount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  effective_from: PatchSubscriptionSubscriptionIdEffectiveFrom$inboundSchema
    .default("next_billing_period"),
}).transform((v) => {
  return remap$(v, {
    "effective_from": "effectiveFrom",
  });
});

/** @internal */
export type Discount$Outbound = {
  id: string;
  effective_from: string;
};

/** @internal */
export const Discount$outboundSchema: z.ZodType<
  Discount$Outbound,
  z.ZodTypeDef,
  Discount
> = z.object({
  id: z.string(),
  effectiveFrom: PatchSubscriptionSubscriptionIdEffectiveFrom$outboundSchema
    .default("next_billing_period"),
}).transform((v) => {
  return remap$(v, {
    effectiveFrom: "effective_from",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Discount$ {
  /** @deprecated use `Discount$inboundSchema` instead. */
  export const inboundSchema = Discount$inboundSchema;
  /** @deprecated use `Discount$outboundSchema` instead. */
  export const outboundSchema = Discount$outboundSchema;
  /** @deprecated use `Discount$Outbound` instead. */
  export type Outbound = Discount$Outbound;
}

export function discountToJSON(discount: Discount): string {
  return JSON.stringify(Discount$outboundSchema.parse(discount));
}

export function discountFromJSON(
  jsonString: string,
): SafeParseResult<Discount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Discount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Discount' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdPaymentInterval$inboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdPaymentInterval> = z
    .nativeEnum(PatchSubscriptionSubscriptionIdPaymentInterval);

/** @internal */
export const PatchSubscriptionSubscriptionIdPaymentInterval$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdPaymentInterval> =
    PatchSubscriptionSubscriptionIdPaymentInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdPaymentInterval$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdPaymentInterval$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdPaymentInterval$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdPaymentInterval$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdPaymentInterval$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdPaymentTerms$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdPaymentTerms,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_interval:
      PatchSubscriptionSubscriptionIdPaymentInterval$inboundSchema,
    payment_frequency: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "payment_interval": "paymentInterval",
      "payment_frequency": "paymentFrequency",
    });
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdPaymentTerms$Outbound = {
  payment_interval: string;
  payment_frequency: number;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdPaymentTerms$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdPaymentTerms$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdPaymentTerms
  > = z.object({
    paymentInterval:
      PatchSubscriptionSubscriptionIdPaymentInterval$outboundSchema,
    paymentFrequency: z.number(),
  }).transform((v) => {
    return remap$(v, {
      paymentInterval: "payment_interval",
      paymentFrequency: "payment_frequency",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdPaymentTerms$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdPaymentTerms$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdPaymentTerms$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdPaymentTerms$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdPaymentTerms$Outbound;
}

export function patchSubscriptionSubscriptionIdPaymentTermsToJSON(
  patchSubscriptionSubscriptionIdPaymentTerms:
    PatchSubscriptionSubscriptionIdPaymentTerms,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdPaymentTerms$outboundSchema.parse(
      patchSubscriptionSubscriptionIdPaymentTerms,
    ),
  );
}

export function patchSubscriptionSubscriptionIdPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdPaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdPaymentTerms' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdBillingDetails$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.nullable(
      z.lazy(() => PatchSubscriptionSubscriptionIdPaymentTerms$inboundSchema),
    ).optional(),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdBillingDetails$Outbound = {
  payment_terms?:
    | PatchSubscriptionSubscriptionIdPaymentTerms$Outbound
    | null
    | undefined;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdBillingDetails$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdBillingDetails$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdBillingDetails
  > = z.object({
    paymentTerms: z.nullable(
      z.lazy(() => PatchSubscriptionSubscriptionIdPaymentTerms$outboundSchema),
    ).optional(),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdBillingDetails$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdBillingDetails$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdBillingDetails$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdBillingDetails$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdBillingDetails$Outbound;
}

export function patchSubscriptionSubscriptionIdBillingDetailsToJSON(
  patchSubscriptionSubscriptionIdBillingDetails:
    PatchSubscriptionSubscriptionIdBillingDetails,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdBillingDetails$outboundSchema.parse(
      patchSubscriptionSubscriptionIdBillingDetails,
    ),
  );
}

export function patchSubscriptionSubscriptionIdBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdBillingDetails' from JSON`,
  );
}

/** @internal */
export const CurrentBillingPeriod$inboundSchema: z.ZodType<
  CurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.nullable(z.string()),
  ends_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type CurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const CurrentBillingPeriod$outboundSchema: z.ZodType<
  CurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  CurrentBillingPeriod
> = z.object({
  startsAt: z.nullable(z.string()),
  endsAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentBillingPeriod$ {
  /** @deprecated use `CurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema = CurrentBillingPeriod$inboundSchema;
  /** @deprecated use `CurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema = CurrentBillingPeriod$outboundSchema;
  /** @deprecated use `CurrentBillingPeriod$Outbound` instead. */
  export type Outbound = CurrentBillingPeriod$Outbound;
}

export function currentBillingPeriodToJSON(
  currentBillingPeriod: CurrentBillingPeriod,
): string {
  return JSON.stringify(
    CurrentBillingPeriod$outboundSchema.parse(currentBillingPeriod),
  );
}

export function currentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<CurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdItems$inboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_id: z.string(),
  quantity: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
  });
});

/** @internal */
export type PatchSubscriptionSubscriptionIdItems$Outbound = {
  price_id: string;
  quantity?: number | null | undefined;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdItems$outboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdItems$Outbound,
  z.ZodTypeDef,
  PatchSubscriptionSubscriptionIdItems
> = z.object({
  priceId: z.string(),
  quantity: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdItems$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdItems$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdItems$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdItems$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdItems$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdItems$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdItems$Outbound;
}

export function patchSubscriptionSubscriptionIdItemsToJSON(
  patchSubscriptionSubscriptionIdItems: PatchSubscriptionSubscriptionIdItems,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdItems$outboundSchema.parse(
      patchSubscriptionSubscriptionIdItems,
    ),
  );
}

export function patchSubscriptionSubscriptionIdItemsFromJSON(
  jsonString: string,
): SafeParseResult<PatchSubscriptionSubscriptionIdItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdItems' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdCustomData$inboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PatchSubscriptionSubscriptionIdCustomData$Outbound = {};

/** @internal */
export const PatchSubscriptionSubscriptionIdCustomData$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdCustomData$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdCustomData$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdCustomData$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdCustomData$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdCustomData$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdCustomData$Outbound;
}

export function patchSubscriptionSubscriptionIdCustomDataToJSON(
  patchSubscriptionSubscriptionIdCustomData:
    PatchSubscriptionSubscriptionIdCustomData,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdCustomData$outboundSchema.parse(
      patchSubscriptionSubscriptionIdCustomData,
    ),
  );
}

export function patchSubscriptionSubscriptionIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdCustomData' from JSON`,
  );
}

/** @internal */
export const ManagementUrls$inboundSchema: z.ZodType<
  ManagementUrls,
  z.ZodTypeDef,
  unknown
> = z.object({
  update_payment_method: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "update_payment_method": "updatePaymentMethod",
  });
});

/** @internal */
export type ManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const ManagementUrls$outboundSchema: z.ZodType<
  ManagementUrls$Outbound,
  z.ZodTypeDef,
  ManagementUrls
> = z.object({
  updatePaymentMethod: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    updatePaymentMethod: "update_payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManagementUrls$ {
  /** @deprecated use `ManagementUrls$inboundSchema` instead. */
  export const inboundSchema = ManagementUrls$inboundSchema;
  /** @deprecated use `ManagementUrls$outboundSchema` instead. */
  export const outboundSchema = ManagementUrls$outboundSchema;
  /** @deprecated use `ManagementUrls$Outbound` instead. */
  export type Outbound = ManagementUrls$Outbound;
}

export function managementUrlsToJSON(managementUrls: ManagementUrls): string {
  return JSON.stringify(ManagementUrls$outboundSchema.parse(managementUrls));
}

export function managementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<ManagementUrls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ManagementUrls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ManagementUrls' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdRequestBody$inboundSchema:
  z.ZodType<PatchSubscriptionSubscriptionIdRequestBody, z.ZodTypeDef, unknown> =
    z.object({
      customer_id: z.nullable(z.string()).optional(),
      address_id: z.nullable(z.string()).optional(),
      currency_code: z.nullable(z.string()).optional(),
      next_billed_at: z.nullable(z.string().transform(v => new RFCDate(v)))
        .optional(),
      collection_mode: z.nullable(CollectionMode$inboundSchema).optional(),
      discount: z.nullable(z.lazy(() => Discount$inboundSchema)).optional(),
      billing_details: z.lazy(() =>
        PatchSubscriptionSubscriptionIdBillingDetails$inboundSchema
      ),
      current_billing_period: z.nullable(
        z.lazy(() => CurrentBillingPeriod$inboundSchema),
      ).optional(),
      items: z.array(
        z.lazy(() => PatchSubscriptionSubscriptionIdItems$inboundSchema),
      ),
      custom_data: z.lazy(() =>
        PatchSubscriptionSubscriptionIdCustomData$inboundSchema
      ).optional(),
      management_urls: z.nullable(z.lazy(() => ManagementUrls$inboundSchema))
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "customer_id": "customerId",
        "address_id": "addressId",
        "currency_code": "currencyCode",
        "next_billed_at": "nextBilledAt",
        "collection_mode": "collectionMode",
        "billing_details": "billingDetails",
        "current_billing_period": "currentBillingPeriod",
        "custom_data": "customData",
        "management_urls": "managementUrls",
      });
    });

/** @internal */
export type PatchSubscriptionSubscriptionIdRequestBody$Outbound = {
  customer_id?: string | null | undefined;
  address_id?: string | null | undefined;
  currency_code?: string | null | undefined;
  next_billed_at?: string | null | undefined;
  collection_mode?: string | null | undefined;
  discount?: Discount$Outbound | null | undefined;
  billing_details: PatchSubscriptionSubscriptionIdBillingDetails$Outbound;
  current_billing_period?: CurrentBillingPeriod$Outbound | null | undefined;
  items: Array<PatchSubscriptionSubscriptionIdItems$Outbound>;
  custom_data?: PatchSubscriptionSubscriptionIdCustomData$Outbound | undefined;
  management_urls?: ManagementUrls$Outbound | null | undefined;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdRequestBody$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdRequestBody$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdRequestBody
  > = z.object({
    customerId: z.nullable(z.string()).optional(),
    addressId: z.nullable(z.string()).optional(),
    currencyCode: z.nullable(z.string()).optional(),
    nextBilledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    collectionMode: z.nullable(CollectionMode$outboundSchema).optional(),
    discount: z.nullable(z.lazy(() => Discount$outboundSchema)).optional(),
    billingDetails: z.lazy(() =>
      PatchSubscriptionSubscriptionIdBillingDetails$outboundSchema
    ),
    currentBillingPeriod: z.nullable(
      z.lazy(() => CurrentBillingPeriod$outboundSchema),
    ).optional(),
    items: z.array(
      z.lazy(() => PatchSubscriptionSubscriptionIdItems$outboundSchema),
    ),
    customData: z.lazy(() =>
      PatchSubscriptionSubscriptionIdCustomData$outboundSchema
    ).optional(),
    managementUrls: z.nullable(z.lazy(() => ManagementUrls$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      customerId: "customer_id",
      addressId: "address_id",
      currencyCode: "currency_code",
      nextBilledAt: "next_billed_at",
      collectionMode: "collection_mode",
      billingDetails: "billing_details",
      currentBillingPeriod: "current_billing_period",
      customData: "custom_data",
      managementUrls: "management_urls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdRequestBody$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdRequestBody$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdRequestBody$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdRequestBody$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdRequestBody$Outbound;
}

export function patchSubscriptionSubscriptionIdRequestBodyToJSON(
  patchSubscriptionSubscriptionIdRequestBody:
    PatchSubscriptionSubscriptionIdRequestBody,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdRequestBody$outboundSchema.parse(
      patchSubscriptionSubscriptionIdRequestBody,
    ),
  );
}

export function patchSubscriptionSubscriptionIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdRequest$inboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
  RequestBody: z.lazy(() =>
    PatchSubscriptionSubscriptionIdRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchSubscriptionSubscriptionIdRequest$Outbound = {
  subscription_id: string;
  RequestBody?: PatchSubscriptionSubscriptionIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdRequest$outboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdRequest$Outbound,
  z.ZodTypeDef,
  PatchSubscriptionSubscriptionIdRequest
> = z.object({
  subscriptionId: z.string(),
  requestBody: z.lazy(() =>
    PatchSubscriptionSubscriptionIdRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdRequest$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdRequest$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdRequest$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdRequest$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdRequest$Outbound;
}

export function patchSubscriptionSubscriptionIdRequestToJSON(
  patchSubscriptionSubscriptionIdRequest:
    PatchSubscriptionSubscriptionIdRequest,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdRequest$outboundSchema.parse(
      patchSubscriptionSubscriptionIdRequest,
    ),
  );
}

export function patchSubscriptionSubscriptionIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchSubscriptionSubscriptionIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdInterval$inboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdInterval> = z
    .nativeEnum(PatchSubscriptionSubscriptionIdInterval);

/** @internal */
export const PatchSubscriptionSubscriptionIdInterval$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdInterval> =
    PatchSubscriptionSubscriptionIdInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdInterval$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdInterval$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdInterval$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdInterval$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdInterval$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: z.nullable(PatchSubscriptionSubscriptionIdInterval$inboundSchema)
      .optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms
  > = z.object({
    interval: z.nullable(PatchSubscriptionSubscriptionIdInterval$outboundSchema)
      .optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$Outbound;
}

export function patchSubscriptionSubscriptionIdSubscriptionPaymentTermsToJSON(
  patchSubscriptionSubscriptionIdSubscriptionPaymentTerms:
    PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$outboundSchema
      .parse(patchSubscriptionSubscriptionIdSubscriptionPaymentTerms),
  );
}

export function patchSubscriptionSubscriptionIdSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$Outbound =
  {
    payment_terms:
      PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$Outbound;
    enable_checkout?: boolean | null | undefined;
    additional_information?: string | null | undefined;
    purchase_order_number?: string | null | undefined;
  };

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      PatchSubscriptionSubscriptionIdSubscriptionPaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$Outbound;
}

export function patchSubscriptionSubscriptionIdSubscriptionBillingDetailsToJSON(
  patchSubscriptionSubscriptionIdSubscriptionBillingDetails:
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$outboundSchema
      .parse(patchSubscriptionSubscriptionIdSubscriptionBillingDetails),
  );
}

export function patchSubscriptionSubscriptionIdSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdSubscriptionBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string()),
    ends_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.string()),
    endsAt: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdCurrentBillingPeriod$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod$Outbound;
}

export function patchSubscriptionSubscriptionIdCurrentBillingPeriodToJSON(
  patchSubscriptionSubscriptionIdCurrentBillingPeriod:
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod$outboundSchema.parse(
      patchSubscriptionSubscriptionIdCurrentBillingPeriod,
    ),
  );
}

export function patchSubscriptionSubscriptionIdCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdBillingCycle$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdBillingCycle$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdBillingCycle$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdBillingCycle$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdBillingCycle$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdBillingCycle$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdBillingCycle$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdBillingCycle$Outbound;
}

export function patchSubscriptionSubscriptionIdBillingCycleToJSON(
  patchSubscriptionSubscriptionIdBillingCycle:
    PatchSubscriptionSubscriptionIdBillingCycle,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdBillingCycle$outboundSchema.parse(
      patchSubscriptionSubscriptionIdBillingCycle,
    ),
  );
}

export function patchSubscriptionSubscriptionIdBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdBillingCycle' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdAction$inboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdAction> = z.nativeEnum(
    PatchSubscriptionSubscriptionIdAction,
  );

/** @internal */
export const PatchSubscriptionSubscriptionIdAction$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdAction> =
    PatchSubscriptionSubscriptionIdAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdAction$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdAction$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdAction$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdAction$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdAction$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdStatus$inboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdStatus> = z.nativeEnum(
    PatchSubscriptionSubscriptionIdStatus,
  );

/** @internal */
export const PatchSubscriptionSubscriptionIdStatus$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdStatus> =
    PatchSubscriptionSubscriptionIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdStatus$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdStatus$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdStatus$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdScheduledChange$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: PatchSubscriptionSubscriptionIdAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()).optional(),
    status: PatchSubscriptionSubscriptionIdStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdScheduledChange$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdScheduledChange$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: PatchSubscriptionSubscriptionIdAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()).optional(),
    status: PatchSubscriptionSubscriptionIdStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdScheduledChange$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdScheduledChange$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdScheduledChange$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdScheduledChange$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdScheduledChange$Outbound;
}

export function patchSubscriptionSubscriptionIdScheduledChangeToJSON(
  patchSubscriptionSubscriptionIdScheduledChange:
    PatchSubscriptionSubscriptionIdScheduledChange,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdScheduledChange$outboundSchema.parse(
      patchSubscriptionSubscriptionIdScheduledChange,
    ),
  );
}

export function patchSubscriptionSubscriptionIdScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdScheduledChange' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdSubscriptionStatus> = z
    .nativeEnum(PatchSubscriptionSubscriptionIdSubscriptionStatus);

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdSubscriptionStatus> =
    PatchSubscriptionSubscriptionIdSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionStatus$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionStatus$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionStatus$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionType$inboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdSubscriptionType> = z
    .nativeEnum(PatchSubscriptionSubscriptionIdSubscriptionType);

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionType$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdSubscriptionType> =
    PatchSubscriptionSubscriptionIdSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionType$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionType$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionType$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdSubscriptionInterval> =
    z.nativeEnum(PatchSubscriptionSubscriptionIdSubscriptionInterval);

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdSubscriptionInterval> =
    PatchSubscriptionSubscriptionIdSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionInterval$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionInterval$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionInterval$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: PatchSubscriptionSubscriptionIdSubscriptionInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle
  > = z.object({
    interval:
      PatchSubscriptionSubscriptionIdSubscriptionInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$Outbound;
}

export function patchSubscriptionSubscriptionIdSubscriptionBillingCycleToJSON(
  patchSubscriptionSubscriptionIdSubscriptionBillingCycle:
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$outboundSchema
      .parse(patchSubscriptionSubscriptionIdSubscriptionBillingCycle),
  );
}

export function patchSubscriptionSubscriptionIdSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchSubscriptionSubscriptionIdSubscriptionResponseInterval
  > = z.nativeEnum(PatchSubscriptionSubscriptionIdSubscriptionResponseInterval);

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchSubscriptionSubscriptionIdSubscriptionResponseInterval
  > = PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdTrialPeriod$inboundSchema:
  z.ZodType<PatchSubscriptionSubscriptionIdTrialPeriod, z.ZodTypeDef, unknown> =
    z.object({
      interval:
        PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$inboundSchema,
      frequency: z.number(),
    });

/** @internal */
export type PatchSubscriptionSubscriptionIdTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdTrialPeriod$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdTrialPeriod$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdTrialPeriod
  > = z.object({
    interval:
      PatchSubscriptionSubscriptionIdSubscriptionResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdTrialPeriod$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdTrialPeriod$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdTrialPeriod$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdTrialPeriod$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdTrialPeriod$Outbound;
}

export function patchSubscriptionSubscriptionIdTrialPeriodToJSON(
  patchSubscriptionSubscriptionIdTrialPeriod:
    PatchSubscriptionSubscriptionIdTrialPeriod,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdTrialPeriod$outboundSchema.parse(
      patchSubscriptionSubscriptionIdTrialPeriod,
    ),
  );
}

export function patchSubscriptionSubscriptionIdTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdUnitPrice$inboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PatchSubscriptionSubscriptionIdUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdUnitPrice$outboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdUnitPrice$Outbound,
  z.ZodTypeDef,
  PatchSubscriptionSubscriptionIdUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdUnitPrice$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdUnitPrice$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdUnitPrice$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdUnitPrice$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdUnitPrice$Outbound;
}

export function patchSubscriptionSubscriptionIdUnitPriceToJSON(
  patchSubscriptionSubscriptionIdUnitPrice:
    PatchSubscriptionSubscriptionIdUnitPrice,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdUnitPrice$outboundSchema.parse(
      patchSubscriptionSubscriptionIdUnitPrice,
    ),
  );
}

export function patchSubscriptionSubscriptionIdUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdUnitPrice' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchSubscriptionSubscriptionIdSubscriptionResponse200Status
  > = z.nativeEnum(
    PatchSubscriptionSubscriptionIdSubscriptionResponse200Status,
  );

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchSubscriptionSubscriptionIdSubscriptionResponse200Status
  > =
    PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$Outbound =
  {};

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$Outbound;
}

export function patchSubscriptionSubscriptionIdSubscriptionResponse200CustomDataToJSON(
  patchSubscriptionSubscriptionIdSubscriptionResponse200CustomData:
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$outboundSchema
      .parse(patchSubscriptionSubscriptionIdSubscriptionResponse200CustomData),
  );
}

export function patchSubscriptionSubscriptionIdSubscriptionResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdPrice$inboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PatchSubscriptionSubscriptionIdSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    PatchSubscriptionSubscriptionIdTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    PatchSubscriptionSubscriptionIdUnitPrice$inboundSchema
  ),
  status:
    PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PatchSubscriptionSubscriptionIdPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$Outbound;
  trial_period: PatchSubscriptionSubscriptionIdTrialPeriod$Outbound;
  unit_price: PatchSubscriptionSubscriptionIdUnitPrice$Outbound;
  status: string;
  custom_data?:
    | PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdPrice$outboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdPrice$Outbound,
  z.ZodTypeDef,
  PatchSubscriptionSubscriptionIdPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PatchSubscriptionSubscriptionIdSubscriptionType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    PatchSubscriptionSubscriptionIdTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() =>
    PatchSubscriptionSubscriptionIdUnitPrice$outboundSchema
  ),
  status:
    PatchSubscriptionSubscriptionIdSubscriptionResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionResponse200CustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdPrice$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdPrice$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdPrice$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdPrice$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdPrice$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdPrice$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdPrice$Outbound;
}

export function patchSubscriptionSubscriptionIdPriceToJSON(
  patchSubscriptionSubscriptionIdPrice: PatchSubscriptionSubscriptionIdPrice,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdPrice$outboundSchema.parse(
      patchSubscriptionSubscriptionIdPrice,
    ),
  );
}

export function patchSubscriptionSubscriptionIdPriceFromJSON(
  jsonString: string,
): SafeParseResult<PatchSubscriptionSubscriptionIdPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdPrice' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionItems$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionItems,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status: PatchSubscriptionSubscriptionIdSubscriptionStatus$inboundSchema,
    price_id: z.string(),
    quantity: z.number().int(),
    id: z.string(),
    subscription_id: z.string(),
    recurring: z.boolean(),
    created_at: z.string(),
    updated_at: z.string(),
    previously_billed_at: z.nullable(z.string()),
    next_billed_at: z.nullable(z.string()),
    trial_started_at: z.nullable(z.string()),
    trial_ended_at: z.nullable(z.string()),
    custom_data: z.nullable(z.any()).optional(),
    price: z.lazy(() => PatchSubscriptionSubscriptionIdPrice$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "price_id": "priceId",
      "subscription_id": "subscriptionId",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "previously_billed_at": "previouslyBilledAt",
      "next_billed_at": "nextBilledAt",
      "trial_started_at": "trialStartedAt",
      "trial_ended_at": "trialEndedAt",
      "custom_data": "customData",
    });
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdSubscriptionItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: PatchSubscriptionSubscriptionIdPrice$Outbound;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionItems$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionItems$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdSubscriptionItems
  > = z.object({
    status: PatchSubscriptionSubscriptionIdSubscriptionStatus$outboundSchema,
    priceId: z.string(),
    quantity: z.number().int(),
    id: z.string(),
    subscriptionId: z.string(),
    recurring: z.boolean(),
    createdAt: z.string(),
    updatedAt: z.string(),
    previouslyBilledAt: z.nullable(z.string()),
    nextBilledAt: z.nullable(z.string()),
    trialStartedAt: z.nullable(z.string()),
    trialEndedAt: z.nullable(z.string()),
    customData: z.nullable(z.any()).optional(),
    price: z.lazy(() => PatchSubscriptionSubscriptionIdPrice$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      priceId: "price_id",
      subscriptionId: "subscription_id",
      createdAt: "created_at",
      updatedAt: "updated_at",
      previouslyBilledAt: "previously_billed_at",
      nextBilledAt: "next_billed_at",
      trialStartedAt: "trial_started_at",
      trialEndedAt: "trial_ended_at",
      customData: "custom_data",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionItems$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionItems$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionItems$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionItems$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdSubscriptionItems$Outbound;
}

export function patchSubscriptionSubscriptionIdSubscriptionItemsToJSON(
  patchSubscriptionSubscriptionIdSubscriptionItems:
    PatchSubscriptionSubscriptionIdSubscriptionItems,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdSubscriptionItems$outboundSchema.parse(
      patchSubscriptionSubscriptionIdSubscriptionItems,
    ),
  );
}

export function patchSubscriptionSubscriptionIdSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdSubscriptionItems,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdSubscriptionItems$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionCustomData$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchSubscriptionSubscriptionIdSubscriptionCustomData$Outbound = {};

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionCustomData$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionCustomData$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionCustomData$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionCustomData$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionCustomData$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdSubscriptionCustomData$Outbound;
}

export function patchSubscriptionSubscriptionIdSubscriptionCustomDataToJSON(
  patchSubscriptionSubscriptionIdSubscriptionCustomData:
    PatchSubscriptionSubscriptionIdSubscriptionCustomData,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdSubscriptionCustomData$outboundSchema.parse(
      patchSubscriptionSubscriptionIdSubscriptionCustomData,
    ),
  );
}

export function patchSubscriptionSubscriptionIdSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdManagementUrls$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdManagementUrls$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdManagementUrls$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdManagementUrls$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdManagementUrls$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdManagementUrls$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdManagementUrls$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdManagementUrls$Outbound;
}

export function patchSubscriptionSubscriptionIdManagementUrlsToJSON(
  patchSubscriptionSubscriptionIdManagementUrls:
    PatchSubscriptionSubscriptionIdManagementUrls,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdManagementUrls$outboundSchema.parse(
      patchSubscriptionSubscriptionIdManagementUrls,
    ),
  );
}

export function patchSubscriptionSubscriptionIdManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdManagementUrls' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchSubscriptionSubscriptionIdSubscriptionResponseStatus
  > = z.nativeEnum(PatchSubscriptionSubscriptionIdSubscriptionResponseStatus);

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchSubscriptionSubscriptionIdSubscriptionResponseStatus
  > = PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdType$inboundSchema: z.ZodNativeEnum<
  typeof PatchSubscriptionSubscriptionIdType
> = z.nativeEnum(PatchSubscriptionSubscriptionIdType);

/** @internal */
export const PatchSubscriptionSubscriptionIdType$outboundSchema:
  z.ZodNativeEnum<typeof PatchSubscriptionSubscriptionIdType> =
    PatchSubscriptionSubscriptionIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdType$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdType$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdType$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdType$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdType$outboundSchema;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$Outbound =
  {};

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$Outbound;
}

export function patchSubscriptionSubscriptionIdSubscriptionResponseCustomDataToJSON(
  patchSubscriptionSubscriptionIdSubscriptionResponseCustomData:
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$outboundSchema
      .parse(patchSubscriptionSubscriptionIdSubscriptionResponseCustomData),
  );
}

export function patchSubscriptionSubscriptionIdSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdDiscount$inboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(
    PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$inboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: PatchSubscriptionSubscriptionIdType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$inboundSchema
  ),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type PatchSubscriptionSubscriptionIdDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdDiscount$outboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdDiscount$Outbound,
  z.ZodTypeDef,
  PatchSubscriptionSubscriptionIdDiscount
> = z.object({
  id: z.string(),
  status: z.nullable(
    PatchSubscriptionSubscriptionIdSubscriptionResponseStatus$outboundSchema,
  ).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: PatchSubscriptionSubscriptionIdType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionResponseCustomData$outboundSchema
  ),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdDiscount$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdDiscount$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdDiscount$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdDiscount$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdDiscount$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdDiscount$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdDiscount$Outbound;
}

export function patchSubscriptionSubscriptionIdDiscountToJSON(
  patchSubscriptionSubscriptionIdDiscount:
    PatchSubscriptionSubscriptionIdDiscount,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdDiscount$outboundSchema.parse(
      patchSubscriptionSubscriptionIdDiscount,
    ),
  );
}

export function patchSubscriptionSubscriptionIdDiscountFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdDiscount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdDiscount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdDiscount' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdData$inboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  started_at: z.nullable(z.string()),
  first_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  paused_at: z.nullable(z.string()),
  canceled_at: z.nullable(z.string()),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    PatchSubscriptionSubscriptionIdBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.lazy(() => PatchSubscriptionSubscriptionIdScheduledChange$inboundSchema),
  ),
  items: z.array(
    z.lazy(() =>
      PatchSubscriptionSubscriptionIdSubscriptionItems$inboundSchema
    ),
  ),
  custom_data: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    PatchSubscriptionSubscriptionIdManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => PatchSubscriptionSubscriptionIdDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type PatchSubscriptionSubscriptionIdData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details:
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$Outbound;
  current_billing_period:
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod$Outbound;
  billing_cycle: PatchSubscriptionSubscriptionIdBillingCycle$Outbound;
  scheduled_change: Array<
    PatchSubscriptionSubscriptionIdScheduledChange$Outbound
  >;
  items: Array<PatchSubscriptionSubscriptionIdSubscriptionItems$Outbound>;
  custom_data?:
    | PatchSubscriptionSubscriptionIdSubscriptionCustomData$Outbound
    | undefined;
  management_urls: PatchSubscriptionSubscriptionIdManagementUrls$Outbound;
  discount?:
    | PatchSubscriptionSubscriptionIdDiscount$Outbound
    | null
    | undefined;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdData$outboundSchema: z.ZodType<
  PatchSubscriptionSubscriptionIdData$Outbound,
  z.ZodTypeDef,
  PatchSubscriptionSubscriptionIdData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startedAt: z.nullable(z.string()),
  firstBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  pausedAt: z.nullable(z.string()),
  canceledAt: z.nullable(z.string()),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    PatchSubscriptionSubscriptionIdCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    PatchSubscriptionSubscriptionIdBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.lazy(() => PatchSubscriptionSubscriptionIdScheduledChange$outboundSchema),
  ),
  items: z.array(
    z.lazy(() =>
      PatchSubscriptionSubscriptionIdSubscriptionItems$outboundSchema
    ),
  ),
  customData: z.lazy(() =>
    PatchSubscriptionSubscriptionIdSubscriptionCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    PatchSubscriptionSubscriptionIdManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => PatchSubscriptionSubscriptionIdDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdData$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdData$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdData$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdData$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdData$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdData$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdData$Outbound;
}

export function patchSubscriptionSubscriptionIdDataToJSON(
  patchSubscriptionSubscriptionIdData: PatchSubscriptionSubscriptionIdData,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdData$outboundSchema.parse(
      patchSubscriptionSubscriptionIdData,
    ),
  );
}

export function patchSubscriptionSubscriptionIdDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchSubscriptionSubscriptionIdData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriptionSubscriptionIdData' from JSON`,
  );
}

/** @internal */
export const PatchSubscriptionSubscriptionIdResponseBody$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => PatchSubscriptionSubscriptionIdData$inboundSchema),
  });

/** @internal */
export type PatchSubscriptionSubscriptionIdResponseBody$Outbound = {
  data: PatchSubscriptionSubscriptionIdData$Outbound;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdResponseBody$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdResponseBody$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdResponseBody
  > = z.object({
    data: z.lazy(() => PatchSubscriptionSubscriptionIdData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdResponseBody$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdResponseBody$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdResponseBody$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdResponseBody$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdResponseBody$Outbound;
}

export function patchSubscriptionSubscriptionIdResponseBodyToJSON(
  patchSubscriptionSubscriptionIdResponseBody:
    PatchSubscriptionSubscriptionIdResponseBody,
): string {
  return JSON.stringify(
    PatchSubscriptionSubscriptionIdResponseBody$outboundSchema.parse(
      patchSubscriptionSubscriptionIdResponseBody,
    ),
  );
}

export function patchSubscriptionSubscriptionIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchSubscriptionSubscriptionIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSubscriptionSubscriptionIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchSubscriptionSubscriptionIdResponseBody' from JSON`,
  );
}
