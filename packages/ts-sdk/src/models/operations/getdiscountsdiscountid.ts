/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDiscountsDiscountIdRequest = {
  discountId: string;
};

export const GetDiscountsDiscountIdStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type GetDiscountsDiscountIdStatus = ClosedEnum<
  typeof GetDiscountsDiscountIdStatus
>;

export const GetDiscountsDiscountIdType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type GetDiscountsDiscountIdType = ClosedEnum<
  typeof GetDiscountsDiscountIdType
>;

/**
 * Any valid JSON value
 */
export type GetDiscountsDiscountIdCustomData = {};

/**
 * Returns a Discount by ID
 */
export type GetDiscountsDiscountIdResponseBody = {
  id: string;
  status?: GetDiscountsDiscountIdStatus | null | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: GetDiscountsDiscountIdType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: GetDiscountsDiscountIdCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/** @internal */
export const GetDiscountsDiscountIdRequest$inboundSchema: z.ZodType<
  GetDiscountsDiscountIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  discount_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "discount_id": "discountId",
  });
});

/** @internal */
export type GetDiscountsDiscountIdRequest$Outbound = {
  discount_id: string;
};

/** @internal */
export const GetDiscountsDiscountIdRequest$outboundSchema: z.ZodType<
  GetDiscountsDiscountIdRequest$Outbound,
  z.ZodTypeDef,
  GetDiscountsDiscountIdRequest
> = z.object({
  discountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    discountId: "discount_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDiscountsDiscountIdRequest$ {
  /** @deprecated use `GetDiscountsDiscountIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetDiscountsDiscountIdRequest$inboundSchema;
  /** @deprecated use `GetDiscountsDiscountIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetDiscountsDiscountIdRequest$outboundSchema;
  /** @deprecated use `GetDiscountsDiscountIdRequest$Outbound` instead. */
  export type Outbound = GetDiscountsDiscountIdRequest$Outbound;
}

export function getDiscountsDiscountIdRequestToJSON(
  getDiscountsDiscountIdRequest: GetDiscountsDiscountIdRequest,
): string {
  return JSON.stringify(
    GetDiscountsDiscountIdRequest$outboundSchema.parse(
      getDiscountsDiscountIdRequest,
    ),
  );
}

export function getDiscountsDiscountIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDiscountsDiscountIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDiscountsDiscountIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDiscountsDiscountIdRequest' from JSON`,
  );
}

/** @internal */
export const GetDiscountsDiscountIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetDiscountsDiscountIdStatus
> = z.nativeEnum(GetDiscountsDiscountIdStatus);

/** @internal */
export const GetDiscountsDiscountIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetDiscountsDiscountIdStatus
> = GetDiscountsDiscountIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDiscountsDiscountIdStatus$ {
  /** @deprecated use `GetDiscountsDiscountIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetDiscountsDiscountIdStatus$inboundSchema;
  /** @deprecated use `GetDiscountsDiscountIdStatus$outboundSchema` instead. */
  export const outboundSchema = GetDiscountsDiscountIdStatus$outboundSchema;
}

/** @internal */
export const GetDiscountsDiscountIdType$inboundSchema: z.ZodNativeEnum<
  typeof GetDiscountsDiscountIdType
> = z.nativeEnum(GetDiscountsDiscountIdType);

/** @internal */
export const GetDiscountsDiscountIdType$outboundSchema: z.ZodNativeEnum<
  typeof GetDiscountsDiscountIdType
> = GetDiscountsDiscountIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDiscountsDiscountIdType$ {
  /** @deprecated use `GetDiscountsDiscountIdType$inboundSchema` instead. */
  export const inboundSchema = GetDiscountsDiscountIdType$inboundSchema;
  /** @deprecated use `GetDiscountsDiscountIdType$outboundSchema` instead. */
  export const outboundSchema = GetDiscountsDiscountIdType$outboundSchema;
}

/** @internal */
export const GetDiscountsDiscountIdCustomData$inboundSchema: z.ZodType<
  GetDiscountsDiscountIdCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDiscountsDiscountIdCustomData$Outbound = {};

/** @internal */
export const GetDiscountsDiscountIdCustomData$outboundSchema: z.ZodType<
  GetDiscountsDiscountIdCustomData$Outbound,
  z.ZodTypeDef,
  GetDiscountsDiscountIdCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDiscountsDiscountIdCustomData$ {
  /** @deprecated use `GetDiscountsDiscountIdCustomData$inboundSchema` instead. */
  export const inboundSchema = GetDiscountsDiscountIdCustomData$inboundSchema;
  /** @deprecated use `GetDiscountsDiscountIdCustomData$outboundSchema` instead. */
  export const outboundSchema = GetDiscountsDiscountIdCustomData$outboundSchema;
  /** @deprecated use `GetDiscountsDiscountIdCustomData$Outbound` instead. */
  export type Outbound = GetDiscountsDiscountIdCustomData$Outbound;
}

export function getDiscountsDiscountIdCustomDataToJSON(
  getDiscountsDiscountIdCustomData: GetDiscountsDiscountIdCustomData,
): string {
  return JSON.stringify(
    GetDiscountsDiscountIdCustomData$outboundSchema.parse(
      getDiscountsDiscountIdCustomData,
    ),
  );
}

export function getDiscountsDiscountIdCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<GetDiscountsDiscountIdCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDiscountsDiscountIdCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDiscountsDiscountIdCustomData' from JSON`,
  );
}

/** @internal */
export const GetDiscountsDiscountIdResponseBody$inboundSchema: z.ZodType<
  GetDiscountsDiscountIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.nullable(GetDiscountsDiscountIdStatus$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currency_code: z.string(),
  type: GetDiscountsDiscountIdType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.number()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => GetDiscountsDiscountIdCustomData$inboundSchema),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type GetDiscountsDiscountIdResponseBody$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data: GetDiscountsDiscountIdCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const GetDiscountsDiscountIdResponseBody$outboundSchema: z.ZodType<
  GetDiscountsDiscountIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetDiscountsDiscountIdResponseBody
> = z.object({
  id: z.string(),
  status: z.nullable(GetDiscountsDiscountIdStatus$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.number(),
  currencyCode: z.string(),
  type: GetDiscountsDiscountIdType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.number()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.lazy(() => GetDiscountsDiscountIdCustomData$outboundSchema),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDiscountsDiscountIdResponseBody$ {
  /** @deprecated use `GetDiscountsDiscountIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDiscountsDiscountIdResponseBody$inboundSchema;
  /** @deprecated use `GetDiscountsDiscountIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetDiscountsDiscountIdResponseBody$outboundSchema;
  /** @deprecated use `GetDiscountsDiscountIdResponseBody$Outbound` instead. */
  export type Outbound = GetDiscountsDiscountIdResponseBody$Outbound;
}

export function getDiscountsDiscountIdResponseBodyToJSON(
  getDiscountsDiscountIdResponseBody: GetDiscountsDiscountIdResponseBody,
): string {
  return JSON.stringify(
    GetDiscountsDiscountIdResponseBody$outboundSchema.parse(
      getDiscountsDiscountIdResponseBody,
    ),
  );
}

export function getDiscountsDiscountIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDiscountsDiscountIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDiscountsDiscountIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDiscountsDiscountIdResponseBody' from JSON`,
  );
}
