/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostSubscriptionSubscriptionIdActivateRequest = {
  subscriptionId: string;
};

export const PostSubscriptionSubscriptionIdActivateInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdActivateInterval = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdActivateInterval
>;

export type PostSubscriptionSubscriptionIdActivatePaymentTerms = {
  interval?: PostSubscriptionSubscriptionIdActivateInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type PostSubscriptionSubscriptionIdActivateBillingDetails = {
  paymentTerms: PostSubscriptionSubscriptionIdActivatePaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type PostSubscriptionSubscriptionIdActivateBillingCycle = {
  frequency: number;
  interval: string;
};

export const PostSubscriptionSubscriptionIdActivateAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type PostSubscriptionSubscriptionIdActivateAction = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdActivateAction
>;

export const PostSubscriptionSubscriptionIdActivateStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type PostSubscriptionSubscriptionIdActivateStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdActivateStatus
>;

export type PostSubscriptionSubscriptionIdActivateScheduledChange = {
  id: string;
  subscriptionId: string;
  action: PostSubscriptionSubscriptionIdActivateAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: PostSubscriptionSubscriptionIdActivateStatus;
};

export const PostSubscriptionSubscriptionIdActivateSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type PostSubscriptionSubscriptionIdActivateSubscriptionStatus =
  ClosedEnum<typeof PostSubscriptionSubscriptionIdActivateSubscriptionStatus>;

export const PostSubscriptionSubscriptionIdActivateSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PostSubscriptionSubscriptionIdActivateSubscriptionType = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdActivateSubscriptionType
>;

export const PostSubscriptionSubscriptionIdActivateSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdActivateSubscriptionInterval =
  ClosedEnum<typeof PostSubscriptionSubscriptionIdActivateSubscriptionInterval>;

export type PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle = {
  interval: PostSubscriptionSubscriptionIdActivateSubscriptionInterval;
  frequency: number;
};

export const PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval =
  {
    Day: "day",
    Week: "week",
    Month: "month",
    Year: "year",
  } as const;
export type PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval
  >;

export type PostSubscriptionSubscriptionIdActivateTrialPeriod = {
  interval: PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval;
  frequency: number;
};

export type PostSubscriptionSubscriptionIdActivateUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData =
  {};

export type PostSubscriptionSubscriptionIdActivatePrice = {
  productId: string;
  description?: string | null | undefined;
  type: PostSubscriptionSubscriptionIdActivateSubscriptionType;
  name: string;
  billingCycle: PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle;
  trialPeriod: PostSubscriptionSubscriptionIdActivateTrialPeriod;
  unitPrice: PostSubscriptionSubscriptionIdActivateUnitPrice;
  status: PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type PostSubscriptionSubscriptionIdActivateItems = {
  status: PostSubscriptionSubscriptionIdActivateSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: PostSubscriptionSubscriptionIdActivatePrice;
};

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdActivateCustomData = {};

export type PostSubscriptionSubscriptionIdActivateManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus
  >;

export const PostSubscriptionSubscriptionIdActivateType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PostSubscriptionSubscriptionIdActivateType = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdActivateType
>;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdActivateSubscriptionCustomData = {};

export type PostSubscriptionSubscriptionIdActivateDiscount = {
  id: string;
  status?:
    | PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PostSubscriptionSubscriptionIdActivateType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostSubscriptionSubscriptionIdActivateSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type PostSubscriptionSubscriptionIdActivateData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: PostSubscriptionSubscriptionIdActivateBillingDetails;
  currentBillingPeriod:
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod;
  billingCycle: PostSubscriptionSubscriptionIdActivateBillingCycle;
  scheduledChange: Array<PostSubscriptionSubscriptionIdActivateScheduledChange>;
  items: Array<PostSubscriptionSubscriptionIdActivateItems>;
  /**
   * Any valid JSON value
   */
  customData?: PostSubscriptionSubscriptionIdActivateCustomData | undefined;
  managementUrls: PostSubscriptionSubscriptionIdActivateManagementUrls;
  discount?: PostSubscriptionSubscriptionIdActivateDiscount | null | undefined;
};

/**
 * Activates a subscription given its id
 */
export type PostSubscriptionSubscriptionIdActivateResponseBody = {
  data: PostSubscriptionSubscriptionIdActivateData;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateRequest$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscription_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateRequest$Outbound = {
  subscription_id: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateRequest$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateRequest$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateRequest
  > = z.object({
    subscriptionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateRequest$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateRequest$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateRequest$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateRequest$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdActivateRequest$Outbound;
}

export function postSubscriptionSubscriptionIdActivateRequestToJSON(
  postSubscriptionSubscriptionIdActivateRequest:
    PostSubscriptionSubscriptionIdActivateRequest,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateRequest$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateRequest,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateRequest' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateInterval$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdActivateInterval> = z
    .nativeEnum(PostSubscriptionSubscriptionIdActivateInterval);

/** @internal */
export const PostSubscriptionSubscriptionIdActivateInterval$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdActivateInterval> =
    PostSubscriptionSubscriptionIdActivateInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivatePaymentTerms$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivatePaymentTerms,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: z.nullable(
      PostSubscriptionSubscriptionIdActivateInterval$inboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivatePaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivatePaymentTerms$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivatePaymentTerms$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivatePaymentTerms
  > = z.object({
    interval: z.nullable(
      PostSubscriptionSubscriptionIdActivateInterval$outboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivatePaymentTerms$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivatePaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivatePaymentTerms$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivatePaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivatePaymentTerms$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivatePaymentTerms$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivatePaymentTerms$Outbound;
}

export function postSubscriptionSubscriptionIdActivatePaymentTermsToJSON(
  postSubscriptionSubscriptionIdActivatePaymentTerms:
    PostSubscriptionSubscriptionIdActivatePaymentTerms,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivatePaymentTerms$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivatePaymentTerms,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivatePaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivatePaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivatePaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivatePaymentTerms' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateBillingDetails$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivatePaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateBillingDetails$Outbound = {
  payment_terms: PostSubscriptionSubscriptionIdActivatePaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateBillingDetails$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateBillingDetails$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivatePaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateBillingDetails$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateBillingDetails$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateBillingDetails$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateBillingDetails$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateBillingDetails$Outbound;
}

export function postSubscriptionSubscriptionIdActivateBillingDetailsToJSON(
  postSubscriptionSubscriptionIdActivateBillingDetails:
    PostSubscriptionSubscriptionIdActivateBillingDetails,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateBillingDetails$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateBillingDetails,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateBillingDetails' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string()),
    ends_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$Outbound =
  {
    starts_at: string | null;
    ends_at: string | null;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.string()),
    endsAt: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$Outbound;
}

export function postSubscriptionSubscriptionIdActivateCurrentBillingPeriodToJSON(
  postSubscriptionSubscriptionIdActivateCurrentBillingPeriod:
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$outboundSchema
      .parse(postSubscriptionSubscriptionIdActivateCurrentBillingPeriod),
  );
}

export function postSubscriptionSubscriptionIdActivateCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateBillingCycle$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateBillingCycle$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateBillingCycle$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateBillingCycle$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionIdActivateBillingCycleToJSON(
  postSubscriptionSubscriptionIdActivateBillingCycle:
    PostSubscriptionSubscriptionIdActivateBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateBillingCycle$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateBillingCycle,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateAction$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdActivateAction> = z
    .nativeEnum(PostSubscriptionSubscriptionIdActivateAction);

/** @internal */
export const PostSubscriptionSubscriptionIdActivateAction$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdActivateAction> =
    PostSubscriptionSubscriptionIdActivateAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateAction$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateAction$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateAction$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateAction$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateAction$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdActivateStatus> = z
    .nativeEnum(PostSubscriptionSubscriptionIdActivateStatus);

/** @internal */
export const PostSubscriptionSubscriptionIdActivateStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdActivateStatus> =
    PostSubscriptionSubscriptionIdActivateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateScheduledChange$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: PostSubscriptionSubscriptionIdActivateAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()).optional(),
    status: PostSubscriptionSubscriptionIdActivateStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateScheduledChange$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateScheduledChange$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: PostSubscriptionSubscriptionIdActivateAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()).optional(),
    status: PostSubscriptionSubscriptionIdActivateStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateScheduledChange$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateScheduledChange$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateScheduledChange$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateScheduledChange$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateScheduledChange$Outbound;
}

export function postSubscriptionSubscriptionIdActivateScheduledChangeToJSON(
  postSubscriptionSubscriptionIdActivateScheduledChange:
    PostSubscriptionSubscriptionIdActivateScheduledChange,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateScheduledChange$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateScheduledChange,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateScheduledChange' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionStatus
  > = z.nativeEnum(PostSubscriptionSubscriptionIdActivateSubscriptionStatus);

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionStatus
  > = PostSubscriptionSubscriptionIdActivateSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionType$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionType
  > = z.nativeEnum(PostSubscriptionSubscriptionIdActivateSubscriptionType);

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionType$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionType
  > = PostSubscriptionSubscriptionIdActivateSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionType$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionInterval
  > = z.nativeEnum(PostSubscriptionSubscriptionIdActivateSubscriptionInterval);

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionInterval
  > = PostSubscriptionSubscriptionIdActivateSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdActivateSubscriptionInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$Outbound =
  {
    interval: string;
    frequency: number;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdActivateSubscriptionInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionIdActivateSubscriptionBillingCycleToJSON(
  postSubscriptionSubscriptionIdActivateSubscriptionBillingCycle:
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$outboundSchema
      .parse(postSubscriptionSubscriptionIdActivateSubscriptionBillingCycle),
  );
}

export function postSubscriptionSubscriptionIdActivateSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval
  > =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateTrialPeriod$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateTrialPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateTrialPeriod$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateTrialPeriod$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateTrialPeriod
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdActivateSubscriptionResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateTrialPeriod$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateTrialPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateTrialPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateTrialPeriod$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateTrialPeriod$Outbound;
}

export function postSubscriptionSubscriptionIdActivateTrialPeriodToJSON(
  postSubscriptionSubscriptionIdActivateTrialPeriod:
    PostSubscriptionSubscriptionIdActivateTrialPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateTrialPeriod$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateTrialPeriod,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateUnitPrice$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateUnitPrice,
    z.ZodTypeDef,
    unknown
  > = z.object({
    amount: z.number(),
    currency_code: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "currency_code": "currencyCode",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateUnitPrice$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateUnitPrice$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateUnitPrice
  > = z.object({
    amount: z.number(),
    currencyCode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      currencyCode: "currency_code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateUnitPrice$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateUnitPrice$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateUnitPrice$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateUnitPrice$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateUnitPrice$Outbound;
}

export function postSubscriptionSubscriptionIdActivateUnitPriceToJSON(
  postSubscriptionSubscriptionIdActivateUnitPrice:
    PostSubscriptionSubscriptionIdActivateUnitPrice,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateUnitPrice$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateUnitPrice,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateUnitPrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status
  > =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$Outbound =
  {};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdActivateSubscriptionResponseCustomDataToJSON(
  postSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData:
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$outboundSchema
      .parse(
        postSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData,
      ),
  );
}

export function postSubscriptionSubscriptionIdActivateSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivatePrice$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivatePrice,
    z.ZodTypeDef,
    unknown
  > = z.object({
    product_id: z.string(),
    description: z.nullable(z.string()).optional(),
    type: PostSubscriptionSubscriptionIdActivateSubscriptionType$inboundSchema,
    name: z.string(),
    billing_cycle: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$inboundSchema
    ),
    trial_period: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateTrialPeriod$inboundSchema
    ),
    unit_price: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateUnitPrice$inboundSchema
    ),
    status:
      PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$inboundSchema,
    custom_data: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$inboundSchema
    ).optional(),
    id: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "product_id": "productId",
      "billing_cycle": "billingCycle",
      "trial_period": "trialPeriod",
      "unit_price": "unitPrice",
      "custom_data": "customData",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivatePrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$Outbound;
  trial_period: PostSubscriptionSubscriptionIdActivateTrialPeriod$Outbound;
  unit_price: PostSubscriptionSubscriptionIdActivateUnitPrice$Outbound;
  status: string;
  custom_data?:
    | PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivatePrice$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivatePrice$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivatePrice
  > = z.object({
    productId: z.string(),
    description: z.nullable(z.string()).optional(),
    type: PostSubscriptionSubscriptionIdActivateSubscriptionType$outboundSchema,
    name: z.string(),
    billingCycle: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateSubscriptionBillingCycle$outboundSchema
    ),
    trialPeriod: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateTrialPeriod$outboundSchema
    ),
    unitPrice: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateUnitPrice$outboundSchema
    ),
    status:
      PostSubscriptionSubscriptionIdActivateSubscriptionResponse200Status$outboundSchema,
    customData: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateSubscriptionResponseCustomData$outboundSchema
    ).optional(),
    id: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
  }).transform((v) => {
    return remap$(v, {
      productId: "product_id",
      billingCycle: "billing_cycle",
      trialPeriod: "trial_period",
      unitPrice: "unit_price",
      customData: "custom_data",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivatePrice$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivatePrice$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivatePrice$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivatePrice$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivatePrice$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivatePrice$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdActivatePrice$Outbound;
}

export function postSubscriptionSubscriptionIdActivatePriceToJSON(
  postSubscriptionSubscriptionIdActivatePrice:
    PostSubscriptionSubscriptionIdActivatePrice,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivatePrice$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivatePrice,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivatePriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivatePrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivatePrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivatePrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateItems$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateItems,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status:
      PostSubscriptionSubscriptionIdActivateSubscriptionStatus$inboundSchema,
    price_id: z.string(),
    quantity: z.number().int(),
    id: z.string(),
    subscription_id: z.string(),
    recurring: z.boolean(),
    created_at: z.string(),
    updated_at: z.string(),
    previously_billed_at: z.nullable(z.string()),
    next_billed_at: z.nullable(z.string()),
    trial_started_at: z.nullable(z.string()),
    trial_ended_at: z.nullable(z.string()),
    custom_data: z.nullable(z.any()).optional(),
    price: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivatePrice$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "price_id": "priceId",
      "subscription_id": "subscriptionId",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "previously_billed_at": "previouslyBilledAt",
      "next_billed_at": "nextBilledAt",
      "trial_started_at": "trialStartedAt",
      "trial_ended_at": "trialEndedAt",
      "custom_data": "customData",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: PostSubscriptionSubscriptionIdActivatePrice$Outbound;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateItems$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateItems$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateItems
  > = z.object({
    status:
      PostSubscriptionSubscriptionIdActivateSubscriptionStatus$outboundSchema,
    priceId: z.string(),
    quantity: z.number().int(),
    id: z.string(),
    subscriptionId: z.string(),
    recurring: z.boolean(),
    createdAt: z.string(),
    updatedAt: z.string(),
    previouslyBilledAt: z.nullable(z.string()),
    nextBilledAt: z.nullable(z.string()),
    trialStartedAt: z.nullable(z.string()),
    trialEndedAt: z.nullable(z.string()),
    customData: z.nullable(z.any()).optional(),
    price: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivatePrice$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      priceId: "price_id",
      subscriptionId: "subscription_id",
      createdAt: "created_at",
      updatedAt: "updated_at",
      previouslyBilledAt: "previously_billed_at",
      nextBilledAt: "next_billed_at",
      trialStartedAt: "trial_started_at",
      trialEndedAt: "trial_ended_at",
      customData: "custom_data",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateItems$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateItems$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateItems$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateItems$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateItems$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateItems$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdActivateItems$Outbound;
}

export function postSubscriptionSubscriptionIdActivateItemsToJSON(
  postSubscriptionSubscriptionIdActivateItems:
    PostSubscriptionSubscriptionIdActivateItems,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateItems$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateItems,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateItemsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateItems,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateItems$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateItems' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdActivateCustomData$Outbound = {};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdActivateCustomDataToJSON(
  postSubscriptionSubscriptionIdActivateCustomData:
    PostSubscriptionSubscriptionIdActivateCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateCustomData$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateCustomData,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateManagementUrls$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateManagementUrls$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateManagementUrls$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateManagementUrls$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateManagementUrls$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateManagementUrls$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateManagementUrls$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateManagementUrls$Outbound;
}

export function postSubscriptionSubscriptionIdActivateManagementUrlsToJSON(
  postSubscriptionSubscriptionIdActivateManagementUrls:
    PostSubscriptionSubscriptionIdActivateManagementUrls,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateManagementUrls$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateManagementUrls,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateManagementUrls' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus
  > =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateType$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdActivateType> = z
    .nativeEnum(PostSubscriptionSubscriptionIdActivateType);

/** @internal */
export const PostSubscriptionSubscriptionIdActivateType$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdActivateType> =
    PostSubscriptionSubscriptionIdActivateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateType$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateType$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateType$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$Outbound =
  {};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdActivateSubscriptionCustomDataToJSON(
  postSubscriptionSubscriptionIdActivateSubscriptionCustomData:
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$outboundSchema
      .parse(postSubscriptionSubscriptionIdActivateSubscriptionCustomData),
  );
}

export function postSubscriptionSubscriptionIdActivateSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateDiscount$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateDiscount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    status: z.nullable(
      PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$inboundSchema,
    ).optional(),
    description: z.nullable(z.string()).optional(),
    enabled_for_checkout: z.nullable(z.boolean()).optional(),
    amount: z.number(),
    currency_code: z.string(),
    type: PostSubscriptionSubscriptionIdActivateType$inboundSchema,
    recur: z.nullable(z.boolean()).optional(),
    max_recurring_intervals: z.nullable(z.number()).optional(),
    usage_limit: z.nullable(z.number().int()).optional(),
    expires_at: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$inboundSchema
    ),
    times_used: z.nullable(z.number().int()).optional(),
    created_at: z.string(),
    updated_at: z.string(),
    restricted_to: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "enabled_for_checkout": "enabledForCheckout",
      "currency_code": "currencyCode",
      "max_recurring_intervals": "maxRecurringIntervals",
      "usage_limit": "usageLimit",
      "expires_at": "expiresAt",
      "custom_data": "customData",
      "times_used": "timesUsed",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "restricted_to": "restrictedTo",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateDiscount$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateDiscount$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateDiscount
  > = z.object({
    id: z.string(),
    status: z.nullable(
      PostSubscriptionSubscriptionIdActivateSubscriptionResponseStatus$outboundSchema,
    ).optional(),
    description: z.nullable(z.string()).optional(),
    enabledForCheckout: z.nullable(z.boolean()).optional(),
    amount: z.number(),
    currencyCode: z.string(),
    type: PostSubscriptionSubscriptionIdActivateType$outboundSchema,
    recur: z.nullable(z.boolean()).optional(),
    maxRecurringIntervals: z.nullable(z.number()).optional(),
    usageLimit: z.nullable(z.number().int()).optional(),
    expiresAt: z.nullable(z.string()).optional(),
    customData: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateSubscriptionCustomData$outboundSchema
    ),
    timesUsed: z.nullable(z.number().int()).optional(),
    createdAt: z.string(),
    updatedAt: z.string(),
    restrictedTo: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      enabledForCheckout: "enabled_for_checkout",
      currencyCode: "currency_code",
      maxRecurringIntervals: "max_recurring_intervals",
      usageLimit: "usage_limit",
      expiresAt: "expires_at",
      customData: "custom_data",
      timesUsed: "times_used",
      createdAt: "created_at",
      updatedAt: "updated_at",
      restrictedTo: "restricted_to",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateDiscount$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateDiscount$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateDiscount$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateDiscount$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateDiscount$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateDiscount$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateDiscount$Outbound;
}

export function postSubscriptionSubscriptionIdActivateDiscountToJSON(
  postSubscriptionSubscriptionIdActivateDiscount:
    PostSubscriptionSubscriptionIdActivateDiscount,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateDiscount$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateDiscount,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateDiscountFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateDiscount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateDiscount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateDiscount' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateData$inboundSchema:
  z.ZodType<PostSubscriptionSubscriptionIdActivateData, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string(),
      status: z.string(),
      customer_id: z.string(),
      address_id: z.string(),
      currency_code: z.string(),
      created_at: z.string(),
      updated_at: z.string(),
      started_at: z.nullable(z.string()),
      first_billed_at: z.nullable(z.string()),
      next_billed_at: z.nullable(z.string()),
      paused_at: z.nullable(z.string()),
      canceled_at: z.nullable(z.string()),
      collection_mode: z.string(),
      billing_details: z.lazy(() =>
        PostSubscriptionSubscriptionIdActivateBillingDetails$inboundSchema
      ),
      current_billing_period: z.lazy(() =>
        PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$inboundSchema
      ),
      billing_cycle: z.lazy(() =>
        PostSubscriptionSubscriptionIdActivateBillingCycle$inboundSchema
      ),
      scheduled_change: z.array(
        z.lazy(() =>
          PostSubscriptionSubscriptionIdActivateScheduledChange$inboundSchema
        ),
      ),
      items: z.array(
        z.lazy(() => PostSubscriptionSubscriptionIdActivateItems$inboundSchema),
      ),
      custom_data: z.lazy(() =>
        PostSubscriptionSubscriptionIdActivateCustomData$inboundSchema
      ).optional(),
      management_urls: z.lazy(() =>
        PostSubscriptionSubscriptionIdActivateManagementUrls$inboundSchema
      ),
      discount: z.nullable(
        z.lazy(() =>
          PostSubscriptionSubscriptionIdActivateDiscount$inboundSchema
        ),
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "customer_id": "customerId",
        "address_id": "addressId",
        "currency_code": "currencyCode",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
        "started_at": "startedAt",
        "first_billed_at": "firstBilledAt",
        "next_billed_at": "nextBilledAt",
        "paused_at": "pausedAt",
        "canceled_at": "canceledAt",
        "collection_mode": "collectionMode",
        "billing_details": "billingDetails",
        "current_billing_period": "currentBillingPeriod",
        "billing_cycle": "billingCycle",
        "scheduled_change": "scheduledChange",
        "custom_data": "customData",
        "management_urls": "managementUrls",
      });
    });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details:
    PostSubscriptionSubscriptionIdActivateBillingDetails$Outbound;
  current_billing_period:
    PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$Outbound;
  billing_cycle: PostSubscriptionSubscriptionIdActivateBillingCycle$Outbound;
  scheduled_change: Array<
    PostSubscriptionSubscriptionIdActivateScheduledChange$Outbound
  >;
  items: Array<PostSubscriptionSubscriptionIdActivateItems$Outbound>;
  custom_data?:
    | PostSubscriptionSubscriptionIdActivateCustomData$Outbound
    | undefined;
  management_urls:
    PostSubscriptionSubscriptionIdActivateManagementUrls$Outbound;
  discount?:
    | PostSubscriptionSubscriptionIdActivateDiscount$Outbound
    | null
    | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateData
  > = z.object({
    id: z.string(),
    status: z.string(),
    customerId: z.string(),
    addressId: z.string(),
    currencyCode: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    startedAt: z.nullable(z.string()),
    firstBilledAt: z.nullable(z.string()),
    nextBilledAt: z.nullable(z.string()),
    pausedAt: z.nullable(z.string()),
    canceledAt: z.nullable(z.string()),
    collectionMode: z.string(),
    billingDetails: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateBillingDetails$outboundSchema
    ),
    currentBillingPeriod: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateCurrentBillingPeriod$outboundSchema
    ),
    billingCycle: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateBillingCycle$outboundSchema
    ),
    scheduledChange: z.array(
      z.lazy(() =>
        PostSubscriptionSubscriptionIdActivateScheduledChange$outboundSchema
      ),
    ),
    items: z.array(
      z.lazy(() => PostSubscriptionSubscriptionIdActivateItems$outboundSchema),
    ),
    customData: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateCustomData$outboundSchema
    ).optional(),
    managementUrls: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateManagementUrls$outboundSchema
    ),
    discount: z.nullable(
      z.lazy(() =>
        PostSubscriptionSubscriptionIdActivateDiscount$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      customerId: "customer_id",
      addressId: "address_id",
      currencyCode: "currency_code",
      createdAt: "created_at",
      updatedAt: "updated_at",
      startedAt: "started_at",
      firstBilledAt: "first_billed_at",
      nextBilledAt: "next_billed_at",
      pausedAt: "paused_at",
      canceledAt: "canceled_at",
      collectionMode: "collection_mode",
      billingDetails: "billing_details",
      currentBillingPeriod: "current_billing_period",
      billingCycle: "billing_cycle",
      scheduledChange: "scheduled_change",
      customData: "custom_data",
      managementUrls: "management_urls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateData$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdActivateData$Outbound;
}

export function postSubscriptionSubscriptionIdActivateDataToJSON(
  postSubscriptionSubscriptionIdActivateData:
    PostSubscriptionSubscriptionIdActivateData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateData$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateData,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdActivateResponseBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateData$inboundSchema
    ),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdActivateResponseBody$Outbound = {
  data: PostSubscriptionSubscriptionIdActivateData$Outbound;
};

/** @internal */
export const PostSubscriptionSubscriptionIdActivateResponseBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdActivateResponseBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdActivateResponseBody
  > = z.object({
    data: z.lazy(() =>
      PostSubscriptionSubscriptionIdActivateData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdActivateResponseBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdActivateResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdActivateResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdActivateResponseBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdActivateResponseBody$Outbound;
}

export function postSubscriptionSubscriptionIdActivateResponseBodyToJSON(
  postSubscriptionSubscriptionIdActivateResponseBody:
    PostSubscriptionSubscriptionIdActivateResponseBody,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdActivateResponseBody$outboundSchema.parse(
      postSubscriptionSubscriptionIdActivateResponseBody,
    ),
  );
}

export function postSubscriptionSubscriptionIdActivateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdActivateResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdActivateResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdActivateResponseBody' from JSON`,
  );
}
