/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostSubscriptionSubscriptionIdPauseEffectiveFrom = {
  Immediately: "immediately",
  NextBillingPeriod: "next_billing_period",
} as const;
export type PostSubscriptionSubscriptionIdPauseEffectiveFrom = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdPauseEffectiveFrom
>;

export const OnResume = {
  ContinueExistingBillingPeriod: "continue_existing_billing_period",
  StartNewBillingPeriod: "start_new_billing_period",
} as const;
export type OnResume = ClosedEnum<typeof OnResume>;

export type PostSubscriptionSubscriptionIdPauseRequestBody = {
  effectiveFrom?: PostSubscriptionSubscriptionIdPauseEffectiveFrom | undefined;
  resumeAt?: Date | null | undefined;
  onResume: OnResume;
};

export type PostSubscriptionSubscriptionIdPauseRequest = {
  subscriptionId: string;
  requestBody?: PostSubscriptionSubscriptionIdPauseRequestBody | undefined;
};

export const PostSubscriptionSubscriptionIdPauseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdPauseInterval = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdPauseInterval
>;

export type PostSubscriptionSubscriptionIdPausePaymentTerms = {
  interval?: PostSubscriptionSubscriptionIdPauseInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type PostSubscriptionSubscriptionIdPauseBillingDetails = {
  paymentTerms: PostSubscriptionSubscriptionIdPausePaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod = {
  startsAt: string | null;
  endsAt: string | null;
};

export type PostSubscriptionSubscriptionIdPauseBillingCycle = {
  frequency: number;
  interval: string;
};

export const PostSubscriptionSubscriptionIdPauseAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type PostSubscriptionSubscriptionIdPauseAction = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdPauseAction
>;

export const PostSubscriptionSubscriptionIdPauseStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type PostSubscriptionSubscriptionIdPauseStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdPauseStatus
>;

export type PostSubscriptionSubscriptionIdPauseScheduledChange = {
  id: string;
  subscriptionId: string;
  action: PostSubscriptionSubscriptionIdPauseAction;
  effectiveAt: string;
  resumesAt?: string | null | undefined;
  status: PostSubscriptionSubscriptionIdPauseStatus;
};

export const PostSubscriptionSubscriptionIdPauseSubscriptionStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type PostSubscriptionSubscriptionIdPauseSubscriptionStatus = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdPauseSubscriptionStatus
>;

export const PostSubscriptionSubscriptionIdPauseSubscriptionType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PostSubscriptionSubscriptionIdPauseSubscriptionType = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdPauseSubscriptionType
>;

export const PostSubscriptionSubscriptionIdPauseSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdPauseSubscriptionInterval =
  ClosedEnum<typeof PostSubscriptionSubscriptionIdPauseSubscriptionInterval>;

export type PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle = {
  interval: PostSubscriptionSubscriptionIdPauseSubscriptionInterval;
  frequency: number;
};

export const PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval
  >;

export type PostSubscriptionSubscriptionIdPauseTrialPeriod = {
  interval: PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval;
  frequency: number;
};

export type PostSubscriptionSubscriptionIdPauseUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData =
  {};

export type PostSubscriptionSubscriptionIdPausePrice = {
  productId: string;
  description?: string | null | undefined;
  type: PostSubscriptionSubscriptionIdPauseSubscriptionType;
  name: string;
  billingCycle: PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle;
  trialPeriod: PostSubscriptionSubscriptionIdPauseTrialPeriod;
  unitPrice: PostSubscriptionSubscriptionIdPauseUnitPrice;
  status: PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type PostSubscriptionSubscriptionIdPauseItems = {
  status: PostSubscriptionSubscriptionIdPauseSubscriptionStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: PostSubscriptionSubscriptionIdPausePrice;
};

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdPauseCustomData = {};

export type PostSubscriptionSubscriptionIdPauseManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus =
  ClosedEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus
  >;

export const PostSubscriptionSubscriptionIdPauseType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type PostSubscriptionSubscriptionIdPauseType = ClosedEnum<
  typeof PostSubscriptionSubscriptionIdPauseType
>;

/**
 * Any valid JSON value
 */
export type PostSubscriptionSubscriptionIdPauseSubscriptionCustomData = {};

export type PostSubscriptionSubscriptionIdPauseDiscount = {
  id: string;
  status?:
    | PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus
    | null
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: number;
  currencyCode: string;
  type: PostSubscriptionSubscriptionIdPauseType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: number | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: PostSubscriptionSubscriptionIdPauseSubscriptionCustomData;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type PostSubscriptionSubscriptionIdPauseData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: string;
  updatedAt: string;
  startedAt: string | null;
  firstBilledAt: string | null;
  nextBilledAt: string | null;
  pausedAt: string | null;
  canceledAt: string | null;
  collectionMode: string;
  billingDetails: PostSubscriptionSubscriptionIdPauseBillingDetails;
  currentBillingPeriod: PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod;
  billingCycle: PostSubscriptionSubscriptionIdPauseBillingCycle;
  scheduledChange: Array<PostSubscriptionSubscriptionIdPauseScheduledChange>;
  items: Array<PostSubscriptionSubscriptionIdPauseItems>;
  /**
   * Any valid JSON value
   */
  customData?: PostSubscriptionSubscriptionIdPauseCustomData | undefined;
  managementUrls: PostSubscriptionSubscriptionIdPauseManagementUrls;
  discount?: PostSubscriptionSubscriptionIdPauseDiscount | null | undefined;
};

/**
 * Pause a subscription given its id
 */
export type PostSubscriptionSubscriptionIdPauseResponseBody = {
  data: PostSubscriptionSubscriptionIdPauseData;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseEffectiveFrom$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseEffectiveFrom> = z
    .nativeEnum(PostSubscriptionSubscriptionIdPauseEffectiveFrom);

/** @internal */
export const PostSubscriptionSubscriptionIdPauseEffectiveFrom$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseEffectiveFrom> =
    PostSubscriptionSubscriptionIdPauseEffectiveFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseEffectiveFrom$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseEffectiveFrom$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseEffectiveFrom$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseEffectiveFrom$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseEffectiveFrom$outboundSchema;
}

/** @internal */
export const OnResume$inboundSchema: z.ZodNativeEnum<typeof OnResume> = z
  .nativeEnum(OnResume);

/** @internal */
export const OnResume$outboundSchema: z.ZodNativeEnum<typeof OnResume> =
  OnResume$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnResume$ {
  /** @deprecated use `OnResume$inboundSchema` instead. */
  export const inboundSchema = OnResume$inboundSchema;
  /** @deprecated use `OnResume$outboundSchema` instead. */
  export const outboundSchema = OnResume$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseRequestBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    effective_from:
      PostSubscriptionSubscriptionIdPauseEffectiveFrom$inboundSchema.default(
        "next_billing_period",
      ),
    resume_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    on_resume: OnResume$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "effective_from": "effectiveFrom",
      "resume_at": "resumeAt",
      "on_resume": "onResume",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseRequestBody$Outbound = {
  effective_from: string;
  resume_at?: string | null | undefined;
  on_resume: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseRequestBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseRequestBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseRequestBody
  > = z.object({
    effectiveFrom:
      PostSubscriptionSubscriptionIdPauseEffectiveFrom$outboundSchema.default(
        "next_billing_period",
      ),
    resumeAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    onResume: OnResume$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      effectiveFrom: "effective_from",
      resumeAt: "resume_at",
      onResume: "on_resume",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseRequestBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseRequestBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseRequestBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseRequestBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseRequestBody$Outbound;
}

export function postSubscriptionSubscriptionIdPauseRequestBodyToJSON(
  postSubscriptionSubscriptionIdPauseRequestBody:
    PostSubscriptionSubscriptionIdPauseRequestBody,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseRequestBody$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseRequestBody,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseRequestBody' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseRequest$inboundSchema:
  z.ZodType<PostSubscriptionSubscriptionIdPauseRequest, z.ZodTypeDef, unknown> =
    z.object({
      subscription_id: z.string(),
      RequestBody: z.lazy(() =>
        PostSubscriptionSubscriptionIdPauseRequestBody$inboundSchema
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "subscription_id": "subscriptionId",
        "RequestBody": "requestBody",
      });
    });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseRequest$Outbound = {
  subscription_id: string;
  RequestBody?:
    | PostSubscriptionSubscriptionIdPauseRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseRequest$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseRequest$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseRequest
  > = z.object({
    subscriptionId: z.string(),
    requestBody: z.lazy(() =>
      PostSubscriptionSubscriptionIdPauseRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseRequest$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseRequest$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseRequest$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseRequest$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdPauseRequest$Outbound;
}

export function postSubscriptionSubscriptionIdPauseRequestToJSON(
  postSubscriptionSubscriptionIdPauseRequest:
    PostSubscriptionSubscriptionIdPauseRequest,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseRequest$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseRequest,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseRequest' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseInterval$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseInterval> = z
    .nativeEnum(PostSubscriptionSubscriptionIdPauseInterval);

/** @internal */
export const PostSubscriptionSubscriptionIdPauseInterval$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseInterval> =
    PostSubscriptionSubscriptionIdPauseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPausePaymentTerms$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPausePaymentTerms,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: z.nullable(
      PostSubscriptionSubscriptionIdPauseInterval$inboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPausePaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPausePaymentTerms$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPausePaymentTerms$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPausePaymentTerms
  > = z.object({
    interval: z.nullable(
      PostSubscriptionSubscriptionIdPauseInterval$outboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPausePaymentTerms$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPausePaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPausePaymentTerms$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPausePaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPausePaymentTerms$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPausePaymentTerms$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPausePaymentTerms$Outbound;
}

export function postSubscriptionSubscriptionIdPausePaymentTermsToJSON(
  postSubscriptionSubscriptionIdPausePaymentTerms:
    PostSubscriptionSubscriptionIdPausePaymentTerms,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPausePaymentTerms$outboundSchema.parse(
      postSubscriptionSubscriptionIdPausePaymentTerms,
    ),
  );
}

export function postSubscriptionSubscriptionIdPausePaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPausePaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPausePaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPausePaymentTerms' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseBillingDetails$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      PostSubscriptionSubscriptionIdPausePaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseBillingDetails$Outbound = {
  payment_terms: PostSubscriptionSubscriptionIdPausePaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseBillingDetails$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseBillingDetails$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      PostSubscriptionSubscriptionIdPausePaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseBillingDetails$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseBillingDetails$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseBillingDetails$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseBillingDetails$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseBillingDetails$Outbound;
}

export function postSubscriptionSubscriptionIdPauseBillingDetailsToJSON(
  postSubscriptionSubscriptionIdPauseBillingDetails:
    PostSubscriptionSubscriptionIdPauseBillingDetails,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseBillingDetails$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseBillingDetails,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseBillingDetails' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string()),
    ends_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.string()),
    endsAt: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$Outbound;
}

export function postSubscriptionSubscriptionIdPauseCurrentBillingPeriodToJSON(
  postSubscriptionSubscriptionIdPauseCurrentBillingPeriod:
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$outboundSchema
      .parse(postSubscriptionSubscriptionIdPauseCurrentBillingPeriod),
  );
}

export function postSubscriptionSubscriptionIdPauseCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseBillingCycle$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseBillingCycle$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseBillingCycle$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseBillingCycle$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionIdPauseBillingCycleToJSON(
  postSubscriptionSubscriptionIdPauseBillingCycle:
    PostSubscriptionSubscriptionIdPauseBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseBillingCycle$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseBillingCycle,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseAction$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseAction> = z
    .nativeEnum(PostSubscriptionSubscriptionIdPauseAction);

/** @internal */
export const PostSubscriptionSubscriptionIdPauseAction$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseAction> =
    PostSubscriptionSubscriptionIdPauseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseAction$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseAction$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseAction$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseAction$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseAction$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseStatus> = z
    .nativeEnum(PostSubscriptionSubscriptionIdPauseStatus);

/** @internal */
export const PostSubscriptionSubscriptionIdPauseStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseStatus> =
    PostSubscriptionSubscriptionIdPauseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseScheduledChange$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: PostSubscriptionSubscriptionIdPauseAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()).optional(),
    status: PostSubscriptionSubscriptionIdPauseStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at?: string | null | undefined;
  status: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseScheduledChange$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseScheduledChange$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: PostSubscriptionSubscriptionIdPauseAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()).optional(),
    status: PostSubscriptionSubscriptionIdPauseStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseScheduledChange$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseScheduledChange$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseScheduledChange$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseScheduledChange$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseScheduledChange$Outbound;
}

export function postSubscriptionSubscriptionIdPauseScheduledChangeToJSON(
  postSubscriptionSubscriptionIdPauseScheduledChange:
    PostSubscriptionSubscriptionIdPauseScheduledChange,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseScheduledChange$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseScheduledChange,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseScheduledChange' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionStatus
  > = z.nativeEnum(PostSubscriptionSubscriptionIdPauseSubscriptionStatus);

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionStatus
  > = PostSubscriptionSubscriptionIdPauseSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionType$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseSubscriptionType> =
    z.nativeEnum(PostSubscriptionSubscriptionIdPauseSubscriptionType);

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionType$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseSubscriptionType> =
    PostSubscriptionSubscriptionIdPauseSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionType$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionInterval
  > = z.nativeEnum(PostSubscriptionSubscriptionIdPauseSubscriptionInterval);

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionInterval
  > = PostSubscriptionSubscriptionIdPauseSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdPauseSubscriptionInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$Outbound =
  {
    interval: string;
    frequency: number;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdPauseSubscriptionInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$Outbound;
}

export function postSubscriptionSubscriptionIdPauseSubscriptionBillingCycleToJSON(
  postSubscriptionSubscriptionIdPauseSubscriptionBillingCycle:
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$outboundSchema
      .parse(postSubscriptionSubscriptionIdPauseSubscriptionBillingCycle),
  );
}

export function postSubscriptionSubscriptionIdPauseSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval
  > =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseTrialPeriod$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseTrialPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseTrialPeriod$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseTrialPeriod$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseTrialPeriod
  > = z.object({
    interval:
      PostSubscriptionSubscriptionIdPauseSubscriptionResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseTrialPeriod$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseTrialPeriod$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseTrialPeriod$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseTrialPeriod$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseTrialPeriod$Outbound;
}

export function postSubscriptionSubscriptionIdPauseTrialPeriodToJSON(
  postSubscriptionSubscriptionIdPauseTrialPeriod:
    PostSubscriptionSubscriptionIdPauseTrialPeriod,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseTrialPeriod$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseTrialPeriod,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseUnitPrice$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseUnitPrice,
    z.ZodTypeDef,
    unknown
  > = z.object({
    amount: z.number(),
    currency_code: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "currency_code": "currencyCode",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseUnitPrice$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseUnitPrice$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseUnitPrice
  > = z.object({
    amount: z.number(),
    currencyCode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      currencyCode: "currency_code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseUnitPrice$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseUnitPrice$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseUnitPrice$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseUnitPrice$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdPauseUnitPrice$Outbound;
}

export function postSubscriptionSubscriptionIdPauseUnitPriceToJSON(
  postSubscriptionSubscriptionIdPauseUnitPrice:
    PostSubscriptionSubscriptionIdPauseUnitPrice,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseUnitPrice$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseUnitPrice,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseUnitPrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status
  > =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$Outbound =
  {};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdPauseSubscriptionResponseCustomDataToJSON(
  postSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData:
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$outboundSchema
      .parse(postSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData),
  );
}

export function postSubscriptionSubscriptionIdPauseSubscriptionResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPausePrice$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdPausePrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostSubscriptionSubscriptionIdPauseSubscriptionType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseUnitPrice$inboundSchema
  ),
  status:
    PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdPausePrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$Outbound;
  trial_period: PostSubscriptionSubscriptionIdPauseTrialPeriod$Outbound;
  unit_price: PostSubscriptionSubscriptionIdPauseUnitPrice$Outbound;
  status: string;
  custom_data?:
    | PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPausePrice$outboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdPausePrice$Outbound,
  z.ZodTypeDef,
  PostSubscriptionSubscriptionIdPausePrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PostSubscriptionSubscriptionIdPauseSubscriptionType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseSubscriptionBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseUnitPrice$outboundSchema
  ),
  status:
    PostSubscriptionSubscriptionIdPauseSubscriptionResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPausePrice$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPausePrice$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPausePrice$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPausePrice$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPausePrice$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPausePrice$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdPausePrice$Outbound;
}

export function postSubscriptionSubscriptionIdPausePriceToJSON(
  postSubscriptionSubscriptionIdPausePrice:
    PostSubscriptionSubscriptionIdPausePrice,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPausePrice$outboundSchema.parse(
      postSubscriptionSubscriptionIdPausePrice,
    ),
  );
}

export function postSubscriptionSubscriptionIdPausePriceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPausePrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPausePrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPausePrice' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseItems$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdPauseItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PostSubscriptionSubscriptionIdPauseSubscriptionStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.lazy(() => PostSubscriptionSubscriptionIdPausePrice$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdPauseItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: PostSubscriptionSubscriptionIdPausePrice$Outbound;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseItems$outboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdPauseItems$Outbound,
  z.ZodTypeDef,
  PostSubscriptionSubscriptionIdPauseItems
> = z.object({
  status: PostSubscriptionSubscriptionIdPauseSubscriptionStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.lazy(() => PostSubscriptionSubscriptionIdPausePrice$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseItems$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseItems$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseItems$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseItems$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseItems$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseItems$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdPauseItems$Outbound;
}

export function postSubscriptionSubscriptionIdPauseItemsToJSON(
  postSubscriptionSubscriptionIdPauseItems:
    PostSubscriptionSubscriptionIdPauseItems,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseItems$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseItems,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseItemsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseItems,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseItems$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseItems' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdPauseCustomData$Outbound = {};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseCustomData$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdPauseCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdPauseCustomDataToJSON(
  postSubscriptionSubscriptionIdPauseCustomData:
    PostSubscriptionSubscriptionIdPauseCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseCustomData$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseCustomData,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseManagementUrls$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseManagementUrls$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseManagementUrls$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseManagementUrls$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseManagementUrls$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseManagementUrls$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseManagementUrls$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseManagementUrls$Outbound;
}

export function postSubscriptionSubscriptionIdPauseManagementUrlsToJSON(
  postSubscriptionSubscriptionIdPauseManagementUrls:
    PostSubscriptionSubscriptionIdPauseManagementUrls,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseManagementUrls$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseManagementUrls,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseManagementUrls' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus
  > = z.nativeEnum(
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus,
  );

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus
  > =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseType$inboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseType> = z
    .nativeEnum(PostSubscriptionSubscriptionIdPauseType);

/** @internal */
export const PostSubscriptionSubscriptionIdPauseType$outboundSchema:
  z.ZodNativeEnum<typeof PostSubscriptionSubscriptionIdPauseType> =
    PostSubscriptionSubscriptionIdPauseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseType$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseType$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseType$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseType$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseType$outboundSchema;
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$Outbound =
  {};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$Outbound;
}

export function postSubscriptionSubscriptionIdPauseSubscriptionCustomDataToJSON(
  postSubscriptionSubscriptionIdPauseSubscriptionCustomData:
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$outboundSchema
      .parse(postSubscriptionSubscriptionIdPauseSubscriptionCustomData),
  );
}

export function postSubscriptionSubscriptionIdPauseSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseDiscount$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseDiscount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    status: z.nullable(
      PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$inboundSchema,
    ).optional(),
    description: z.nullable(z.string()).optional(),
    enabled_for_checkout: z.nullable(z.boolean()).optional(),
    amount: z.number(),
    currency_code: z.string(),
    type: PostSubscriptionSubscriptionIdPauseType$inboundSchema,
    recur: z.nullable(z.boolean()).optional(),
    max_recurring_intervals: z.nullable(z.number()).optional(),
    usage_limit: z.nullable(z.number().int()).optional(),
    expires_at: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$inboundSchema
    ),
    times_used: z.nullable(z.number().int()).optional(),
    created_at: z.string(),
    updated_at: z.string(),
    restricted_to: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "enabled_for_checkout": "enabledForCheckout",
      "currency_code": "currencyCode",
      "max_recurring_intervals": "maxRecurringIntervals",
      "usage_limit": "usageLimit",
      "expires_at": "expiresAt",
      "custom_data": "customData",
      "times_used": "timesUsed",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "restricted_to": "restrictedTo",
    });
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseDiscount$Outbound = {
  id: string;
  status?: string | null | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: number;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: number | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data:
    PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$Outbound;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseDiscount$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseDiscount$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseDiscount
  > = z.object({
    id: z.string(),
    status: z.nullable(
      PostSubscriptionSubscriptionIdPauseSubscriptionResponseStatus$outboundSchema,
    ).optional(),
    description: z.nullable(z.string()).optional(),
    enabledForCheckout: z.nullable(z.boolean()).optional(),
    amount: z.number(),
    currencyCode: z.string(),
    type: PostSubscriptionSubscriptionIdPauseType$outboundSchema,
    recur: z.nullable(z.boolean()).optional(),
    maxRecurringIntervals: z.nullable(z.number()).optional(),
    usageLimit: z.nullable(z.number().int()).optional(),
    expiresAt: z.nullable(z.string()).optional(),
    customData: z.lazy(() =>
      PostSubscriptionSubscriptionIdPauseSubscriptionCustomData$outboundSchema
    ),
    timesUsed: z.nullable(z.number().int()).optional(),
    createdAt: z.string(),
    updatedAt: z.string(),
    restrictedTo: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      enabledForCheckout: "enabled_for_checkout",
      currencyCode: "currency_code",
      maxRecurringIntervals: "max_recurring_intervals",
      usageLimit: "usage_limit",
      expiresAt: "expires_at",
      customData: "custom_data",
      timesUsed: "times_used",
      createdAt: "created_at",
      updatedAt: "updated_at",
      restrictedTo: "restricted_to",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseDiscount$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseDiscount$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseDiscount$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseDiscount$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseDiscount$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseDiscount$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdPauseDiscount$Outbound;
}

export function postSubscriptionSubscriptionIdPauseDiscountToJSON(
  postSubscriptionSubscriptionIdPauseDiscount:
    PostSubscriptionSubscriptionIdPauseDiscount,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseDiscount$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseDiscount,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseDiscountFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseDiscount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseDiscount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseDiscount' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseData$inboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdPauseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  started_at: z.nullable(z.string()),
  first_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  paused_at: z.nullable(z.string()),
  canceled_at: z.nullable(z.string()),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.lazy(() =>
      PostSubscriptionSubscriptionIdPauseScheduledChange$inboundSchema
    ),
  ),
  items: z.array(
    z.lazy(() => PostSubscriptionSubscriptionIdPauseItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => PostSubscriptionSubscriptionIdPauseDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type PostSubscriptionSubscriptionIdPauseData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: PostSubscriptionSubscriptionIdPauseBillingDetails$Outbound;
  current_billing_period:
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$Outbound;
  billing_cycle: PostSubscriptionSubscriptionIdPauseBillingCycle$Outbound;
  scheduled_change: Array<
    PostSubscriptionSubscriptionIdPauseScheduledChange$Outbound
  >;
  items: Array<PostSubscriptionSubscriptionIdPauseItems$Outbound>;
  custom_data?:
    | PostSubscriptionSubscriptionIdPauseCustomData$Outbound
    | undefined;
  management_urls: PostSubscriptionSubscriptionIdPauseManagementUrls$Outbound;
  discount?:
    | PostSubscriptionSubscriptionIdPauseDiscount$Outbound
    | null
    | undefined;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseData$outboundSchema: z.ZodType<
  PostSubscriptionSubscriptionIdPauseData$Outbound,
  z.ZodTypeDef,
  PostSubscriptionSubscriptionIdPauseData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  startedAt: z.nullable(z.string()),
  firstBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  pausedAt: z.nullable(z.string()),
  canceledAt: z.nullable(z.string()),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.lazy(() =>
      PostSubscriptionSubscriptionIdPauseScheduledChange$outboundSchema
    ),
  ),
  items: z.array(
    z.lazy(() => PostSubscriptionSubscriptionIdPauseItems$outboundSchema),
  ),
  customData: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    PostSubscriptionSubscriptionIdPauseManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => PostSubscriptionSubscriptionIdPauseDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseData$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseData$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseData$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseData$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseData$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseData$Outbound` instead. */
  export type Outbound = PostSubscriptionSubscriptionIdPauseData$Outbound;
}

export function postSubscriptionSubscriptionIdPauseDataToJSON(
  postSubscriptionSubscriptionIdPauseData:
    PostSubscriptionSubscriptionIdPauseData,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseData$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseData,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseDataFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseData' from JSON`,
  );
}

/** @internal */
export const PostSubscriptionSubscriptionIdPauseResponseBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => PostSubscriptionSubscriptionIdPauseData$inboundSchema),
  });

/** @internal */
export type PostSubscriptionSubscriptionIdPauseResponseBody$Outbound = {
  data: PostSubscriptionSubscriptionIdPauseData$Outbound;
};

/** @internal */
export const PostSubscriptionSubscriptionIdPauseResponseBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdPauseResponseBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdPauseResponseBody
  > = z.object({
    data: z.lazy(() => PostSubscriptionSubscriptionIdPauseData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdPauseResponseBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdPauseResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdPauseResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdPauseResponseBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdPauseResponseBody$Outbound;
}

export function postSubscriptionSubscriptionIdPauseResponseBodyToJSON(
  postSubscriptionSubscriptionIdPauseResponseBody:
    PostSubscriptionSubscriptionIdPauseResponseBody,
): string {
  return JSON.stringify(
    PostSubscriptionSubscriptionIdPauseResponseBody$outboundSchema.parse(
      postSubscriptionSubscriptionIdPauseResponseBody,
    ),
  );
}

export function postSubscriptionSubscriptionIdPauseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostSubscriptionSubscriptionIdPauseResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostSubscriptionSubscriptionIdPauseResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostSubscriptionSubscriptionIdPauseResponseBody' from JSON`,
  );
}
