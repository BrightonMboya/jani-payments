/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * No Subscription found with that Id
 */
export type PostSubscriptionSubscriptionIdResumeSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * No Subscription found with that Id
 */
export class PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: PostSubscriptionSubscriptionIdResumeSubscriptionResponseBodyData;

  constructor(
    err: PostSubscriptionSubscriptionIdResumeSubscriptionResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody";
  }
}

/**
 * Bad Request
 */
export type PostSubscriptionSubscriptionIdResumeResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Bad Request
 */
export class PostSubscriptionSubscriptionIdResumeResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: PostSubscriptionSubscriptionIdResumeResponseBodyData;

  constructor(err: PostSubscriptionSubscriptionIdResumeResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "PostSubscriptionSubscriptionIdResumeResponseBody";
  }
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody(
        v,
      );
    });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$Outbound =
  {
    message: string;
    error: string;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody
  > = z.instanceof(PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeSubscriptionResponseBody$Outbound;
}

/** @internal */
export const PostSubscriptionSubscriptionIdResumeResponseBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new PostSubscriptionSubscriptionIdResumeResponseBody(v);
    });

/** @internal */
export type PostSubscriptionSubscriptionIdResumeResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdResumeResponseBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdResumeResponseBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdResumeResponseBody
  > = z.instanceof(PostSubscriptionSubscriptionIdResumeResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdResumeResponseBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdResumeResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdResumeResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdResumeResponseBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdResumeResponseBody$Outbound;
}
