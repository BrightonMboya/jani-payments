/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Subscription not found
 */
export type PatchSubscriptionSubscriptionIdSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Subscription not found
 */
export class PatchSubscriptionSubscriptionIdSubscriptionResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: PatchSubscriptionSubscriptionIdSubscriptionResponseBodyData;

  constructor(
    err: PatchSubscriptionSubscriptionIdSubscriptionResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "PatchSubscriptionSubscriptionIdSubscriptionResponseBody";
  }
}

/**
 * Bad Request
 */
export type PatchSubscriptionSubscriptionIdResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Bad Request
 */
export class PatchSubscriptionSubscriptionIdResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: PatchSubscriptionSubscriptionIdResponseBodyData;

  constructor(err: PatchSubscriptionSubscriptionIdResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "PatchSubscriptionSubscriptionIdResponseBody";
  }
}

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponseBody$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new PatchSubscriptionSubscriptionIdSubscriptionResponseBody(v);
    });

/** @internal */
export type PatchSubscriptionSubscriptionIdSubscriptionResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdSubscriptionResponseBody
  > = z.instanceof(PatchSubscriptionSubscriptionIdSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdSubscriptionResponseBody$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdSubscriptionResponseBody$Outbound` instead. */
  export type Outbound =
    PatchSubscriptionSubscriptionIdSubscriptionResponseBody$Outbound;
}

/** @internal */
export const PatchSubscriptionSubscriptionIdResponseBody$inboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new PatchSubscriptionSubscriptionIdResponseBody(v);
    });

/** @internal */
export type PatchSubscriptionSubscriptionIdResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const PatchSubscriptionSubscriptionIdResponseBody$outboundSchema:
  z.ZodType<
    PatchSubscriptionSubscriptionIdResponseBody$Outbound,
    z.ZodTypeDef,
    PatchSubscriptionSubscriptionIdResponseBody
  > = z.instanceof(PatchSubscriptionSubscriptionIdResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriptionSubscriptionIdResponseBody$ {
  /** @deprecated use `PatchSubscriptionSubscriptionIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchSubscriptionSubscriptionIdResponseBody$inboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchSubscriptionSubscriptionIdResponseBody$outboundSchema;
  /** @deprecated use `PatchSubscriptionSubscriptionIdResponseBody$Outbound` instead. */
  export type Outbound = PatchSubscriptionSubscriptionIdResponseBody$Outbound;
}
