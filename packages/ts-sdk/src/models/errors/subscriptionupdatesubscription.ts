/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Subscription not found
 */
export type SubscriptionUpdateSubscriptionSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Subscription not found
 */
export class SubscriptionUpdateSubscriptionSubscriptionResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionUpdateSubscriptionSubscriptionResponseBodyData;

  constructor(err: SubscriptionUpdateSubscriptionSubscriptionResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionUpdateSubscriptionSubscriptionResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscriptionUpdateSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Bad Request
 */
export class SubscriptionUpdateSubscriptionResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionUpdateSubscriptionResponseBodyData;

  constructor(err: SubscriptionUpdateSubscriptionResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionUpdateSubscriptionResponseBody";
  }
}

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new SubscriptionUpdateSubscriptionSubscriptionResponseBody(v);
    });

/** @internal */
export type SubscriptionUpdateSubscriptionSubscriptionResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionUpdateSubscriptionSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionSubscriptionResponseBody
  > = z.instanceof(SubscriptionUpdateSubscriptionSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionSubscriptionResponseBody$Outbound` instead. */
  export type Outbound =
    SubscriptionUpdateSubscriptionSubscriptionResponseBody$Outbound;
}

/** @internal */
export const SubscriptionUpdateSubscriptionResponseBody$inboundSchema:
  z.ZodType<SubscriptionUpdateSubscriptionResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
      error: z.string(),
    })
      .transform((v) => {
        return new SubscriptionUpdateSubscriptionResponseBody(v);
      });

/** @internal */
export type SubscriptionUpdateSubscriptionResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionUpdateSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionUpdateSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionUpdateSubscriptionResponseBody
  > = z.instanceof(SubscriptionUpdateSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionUpdateSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionUpdateSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionUpdateSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSubscriptionResponseBody$Outbound;
}
