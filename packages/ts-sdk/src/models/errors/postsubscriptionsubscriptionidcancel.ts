/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * No Subscription found with that Id
 */
export type PostSubscriptionSubscriptionIdCancelSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * No Subscription found with that Id
 */
export class PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: PostSubscriptionSubscriptionIdCancelSubscriptionResponseBodyData;

  constructor(
    err: PostSubscriptionSubscriptionIdCancelSubscriptionResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody";
  }
}

/**
 * Bad Request
 */
export type PostSubscriptionSubscriptionIdCancelResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Bad Request
 */
export class PostSubscriptionSubscriptionIdCancelResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: PostSubscriptionSubscriptionIdCancelResponseBodyData;

  constructor(err: PostSubscriptionSubscriptionIdCancelResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "PostSubscriptionSubscriptionIdCancelResponseBody";
  }
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody(
        v,
      );
    });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$Outbound =
  {
    message: string;
    error: string;
  };

/** @internal */
export const PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody
  > = z.instanceof(PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelSubscriptionResponseBody$Outbound;
}

/** @internal */
export const PostSubscriptionSubscriptionIdCancelResponseBody$inboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new PostSubscriptionSubscriptionIdCancelResponseBody(v);
    });

/** @internal */
export type PostSubscriptionSubscriptionIdCancelResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const PostSubscriptionSubscriptionIdCancelResponseBody$outboundSchema:
  z.ZodType<
    PostSubscriptionSubscriptionIdCancelResponseBody$Outbound,
    z.ZodTypeDef,
    PostSubscriptionSubscriptionIdCancelResponseBody
  > = z.instanceof(PostSubscriptionSubscriptionIdCancelResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostSubscriptionSubscriptionIdCancelResponseBody$ {
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostSubscriptionSubscriptionIdCancelResponseBody$inboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostSubscriptionSubscriptionIdCancelResponseBody$outboundSchema;
  /** @deprecated use `PostSubscriptionSubscriptionIdCancelResponseBody$Outbound` instead. */
  export type Outbound =
    PostSubscriptionSubscriptionIdCancelResponseBody$Outbound;
}
