/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subscriptionActivateSubscription } from "../funcs/subscriptionActivateSubscription.js";
import { subscriptionCancelSubscription } from "../funcs/subscriptionCancelSubscription.js";
import { subscriptionCreate } from "../funcs/subscriptionCreate.js";
import { subscriptionList } from "../funcs/subscriptionList.js";
import { subscriptionPauseSubscription } from "../funcs/subscriptionPauseSubscription.js";
import { subscriptionResumeSubscription } from "../funcs/subscriptionResumeSubscription.js";
import { subscriptionUpdateSubscription } from "../funcs/subscriptionUpdateSubscription.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Subscription extends ClientSDK {
  async list(
    options?: RequestOptions,
  ): Promise<Array<operations.SubscriptionListResponseBody>> {
    return unwrapAsync(subscriptionList(
      this,
      options,
    ));
  }

  async create(
    request?: operations.SubscriptionCreateRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionCreateResponseBody> {
    return unwrapAsync(subscriptionCreate(
      this,
      request,
      options,
    ));
  }

  async cancelSubscription(
    request: operations.SubscriptionCancelSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionCancelSubscriptionResponseBody> {
    return unwrapAsync(subscriptionCancelSubscription(
      this,
      request,
      options,
    ));
  }

  async pauseSubscription(
    request: operations.SubscriptionPauseSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionPauseSubscriptionResponseBody> {
    return unwrapAsync(subscriptionPauseSubscription(
      this,
      request,
      options,
    ));
  }

  async resumeSubscription(
    request: operations.SubscriptionResumeSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionResumeSubscriptionResponseBody> {
    return unwrapAsync(subscriptionResumeSubscription(
      this,
      request,
      options,
    ));
  }

  async activateSubscription(
    request: operations.SubscriptionActivateSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionActivateSubscriptionResponseBody> {
    return unwrapAsync(subscriptionActivateSubscription(
      this,
      request,
      options,
    ));
  }

  async updateSubscription(
    request: operations.SubscriptionUpdateSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionUpdateSubscriptionResponseBody> {
    return unwrapAsync(subscriptionUpdateSubscription(
      this,
      request,
      options,
    ));
  }
}
